{
  "RampUp": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class RampUp {\n\n    public static void algo(int[] arr) {\n        int N = arr.length;\n        boolean allPositive = true;\n\n        for (int i = 0; i < N; i++) {\n            if (arr[i] < 0) {\n                allPositive = false;\n            }\n        }\n\n        if (allPositive) {\n            int dummy = 1;\n            for (int i = 0; i < N * 500; i++) {\n                dummy = dummy * dummy;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int N = Integer.parseInt(args[0]);\n        int[] arr = new int[N];\n        for (int i = 0; i < N; i++) {\n            arr[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n\n        algo(arr);\n    }\n}\n",
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 0)  ( <  in1 0))  ( <  in2 0))  ( <  in3 0))  ( <  in4 0))  ( <  in5 0))  ( <  in6 0))  ( <  in7 0))  ( <  in8 0))  ( <  in9 0))  ( <  in10 0))  ( <  in11 0))  ( <  in12 0))  ( <  in13 0))  ( <  in14 0))  ( <  in15 0)))",
      "response": "Worst-case time complexity: \u0398(N). It occurs when all N array elements are non-negative, so the second loop runs N*500 iterations (still linear in N).\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(assert (>= in0 0))\n(assert (>= in1 0))\n(assert (>= in2 0))\n(assert (>= in3 0))\n(assert (>= in4 0))\n(assert (>= in5 0))\n(assert (>= in6 0))\n(assert (>= in7 0))\n(assert (>= in8 0))\n(assert (>= in9 0))\n(assert (>= in10 0))\n(assert (>= in11 0))\n(assert (>= in12 0))\n(assert (>= in13 0))\n(assert (>= in14 0))\n(assert (>= in15 0))\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and  ( <  in0 0)  ( <  in1 0)))",
      "response": "Worst-case time complexity: O(N)\n\nReasoning:\n- First loop scans the entire array once: N iterations.\n- If all elements are non-negative, the second loop executes 500\u00b7N iterations.\n- Total worst-case iterations \u2248 N + 500\u00b7N = 501\u00b7N \u2192 \u0398(N).\n\nFor input size n = 2, to take the worst-case path, both inputs must be non-negative.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(assert (>= in0 0))\n(assert (>= in1 0))\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and  ( <  in0 0)  ( <  in1 0))  ( <  in2 0))  ( <  in3 0)))",
      "response": "- Worst-case time complexity: O(N) (linear). The first loop takes N checks; in the worst case (all elements non-negative), the second loop executes 500N iterations. Total \u2248 501N = \u0398(N).\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n; Path to worst-case (allPositive == true) for N = 4\n(assert (and (>= in0 0) (>= in1 0) (>= in2 0) (>= in3 0)))\n(check-sat)"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 0)  ( <  in1 0))  ( <  in2 0))  ( <  in3 0))  ( <  in4 0))  ( <  in5 0))  ( <  in6 0))  ( <  in7 0))  ( <  in8 0))  ( <  in9 0))  ( <  in10 0))  ( <  in11 0))  ( <  in12 0))  ( <  in13 0))  ( <  in14 0))  ( <  in15 0))  ( <  in16 0))  ( <  in17 0))  ( <  in18 0))  ( <  in19 0))  ( <  in20 0))  ( <  in21 0))  ( <  in22 0))  ( <  in23 0))  ( <  in24 0))  ( <  in25 0))  ( <  in26 0))  ( <  in27 0))  ( <  in28 0))  ( <  in29 0)))",
      "response": "- Worst-case time complexity: \u0398(N)\n  - The first loop scans the N elements once (O(N)).\n  - If all elements are non-negative, the second loop runs 500\u00b7N iterations, each O(1), so O(N).\n  - Worst-case total: O(N + 500N) = \u0398(N).\n\nSMT2 constraints for the worst-case path when input size n = 30 (all elements non-negative):\n(set-logic QF_LIA)\n(declare-const N Int)\n(assert (= N 30))\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(declare-const in8 Int)\n(declare-const in9 Int)\n(declare-const in10 Int)\n(declare-const in11 Int)\n(declare-const in12 Int)\n(declare-const in13 Int)\n(declare-const in14 Int)\n(declare-const in15 Int)\n(declare-const in16 Int)\n(declare-const in17 Int)\n(declare-const in18 Int)\n(declare-const in19 Int)\n(declare-const in20 Int)\n(declare-const in21 Int)\n(declare-const in22 Int)\n(declare-const in23 Int)\n(declare-const in24 Int)\n(declare-const in25 Int)\n(declare-const in26 Int)\n(declare-const in27 Int)\n(declare-const in28 Int)\n(declare-const in29 Int)\n(assert (and\n  (>= in0 0) (>= in1 0) (>= in2 0) (>= in3 0) (>= in4 0)\n  (>= in5 0) (>= in6 0) (>= in7 0) (>= in8 0) (>= in9 0)\n  (>= in10 0) (>= in11 0) (>= in12 0) (>= in13 0) (>= in14 0)\n  (>= in15 0) (>= in16 0) (>= in17 0) (>= in18 0) (>= in19 0)\n  (>= in20 0) (>= in21 0) (>= in22 0) (>= in23 0) (>= in24 0)\n  (>= in25 0) (>= in26 0) (>= in27 0) (>= in28 0) (>= in29 0)))\n(check-sat)\n(get-model)\n\nAnswer: (and (>= in0 0) (>= in1 0) (>= in2 0) (>= in3 0) (>= in4 0) (>= in5 0) (>= in6 0) (>= in7 0) (>= in8 0) (>= in9 0) (>= in10 0) (>= in11 0) (>= in12 0) (>= in13 0) (>= in14 0) (>= in15 0) (>= in16 0) (>= in17 0) (>= in18 0) (>= in19 0) (>= in20 0) (>= in21 0) (>= in22 0) (>= in23 0) (>= in24 0) (>= in25 0) (>= in26 0) (>= in27 0) (>= in28 0) (>= in29 0))"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and  ( <  in0 0)  ( <  in1 0))  ( <  in2 0))  ( <  in3 0))  ( <  in4 0))  ( <  in5 0))  ( <  in6 0))  ( <  in7 0)))",
      "response": "Worst-case time complexity: O(N).\n\nExplanation:\n- First loop scans the array once: O(N).\n- The second loop runs only if all elements are non-negative, for 500\u00b7N iterations. Each iteration is O(1) (int multiplication), so it is O(N).\n- Therefore, the worst-case (when all elements are non-negative) is O(N) + O(N) = O(N). It is also \u0398(N).\n\nPath constraint for N = 8 that triggers the worst-case (entering the if-branch): every element must be non-negative.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(assert (and (>= in0 0) (>= in1 0) (>= in2 0) (>= in3 0) (>= in4 0) (>= in5 0) (>= in6 0) (>= in7 0)))\n(check-sat)\n(get-model)"
    }
  },
  "ComplexStateMachineParser": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class ComplexStateMachineParser {\n\n    /**\n     * Processes an input character array through a state machine with several transitions.\n     */\n    public static void parse(char[] input) {\n        int state = 0;\n        for (int i = 0; i < input.length; i++) {\n            char c = input[i];\n            switch (state) {\n                case 0:\n                    if (c == 'A') state = 1;\n                    else if (c == 'B') state = 2;\n                    else state = 0;\n                    break;\n                case 1:\n                    if (c == 'C') state = 3;\n                    else if (c == 'D') state = 4;\n                    else state = 0;\n                    break;\n                case 2:\n                    if (c == 'E') state = 3;\n                    else if (c == 'F') state = 4;\n                    else state = 0;\n                    break;\n                case 3:\n                    if (c == 'G') state = 5;\n                    else if (c == 'H') state = 6;\n                    else state = 0;\n                    break;\n                case 4:\n                    if (c == 'I') state = 5;\n                    else if (c == 'J') state = 6;\n                    else state = 0;\n                    break;\n                case 5:\n                    if (c == 'K') state = 7;\n                    else state = 5;\n                    break;\n                case 6:\n                    if (c == 'L') state = 7;\n                    else state = 6;\n                    break;\n                default:\n                    state = 0;\n                    break;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int N = Integer.parseInt(args[0]);\n        char[] input = new char[N];\n        for (int i = 0; i < N; i++) {\n            input[i] = Debug.makeSymbolicChar(\"in\" + i);\n        }\n        parse(input);\n    }\n}\n",
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (not ( = in0 65))  ( =  in0 66)) (not ( = in1 69)))  ( =  in1 70)) (not ( = in2 73))) (not ( = in2 74))) (not ( = in3 65)))  ( =  in3 66)))",
      "response": "Worst-case time complexity: O(N), where N is the input length. Each character is processed once with a constant amount of work per iteration; there are no nested loops or recursion.\n\nSMT2 constraint (for input size n = 4) ensuring the machine reaches state 7 after processing the four characters:\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(assert\n  (or\n    (and (= in0 65) (= in1 67) (= in2 71) (= in3 75))\n    (and (= in0 65) (= in1 67) (= in2 72) (= in3 76))\n    (and (= in0 65) (= in1 68) (= in2 73) (= in3 75))\n    (and (= in0 65) (= in1 68) (= in2 74) (= in3 76))\n    (and (= in0 66) (= in1 69) (= in2 71) (= in3 75))\n    (and (= in0 66) (= in1 69) (= in2 72) (= in3 76))\n    (and (= in0 66) (= in1 70) (= in2 73) (= in3 75))\n    (and (= in0 66) (= in1 70) (= in2 74) (= in3 76))\n  )\n)\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 65))  ( =  in0 66)) (not ( = in1 69)))  ( =  in1 70)) (not ( = in2 73))) (not ( = in2 74))) (not ( = in3 65)))  ( =  in3 66)) (not ( = in4 69)))  ( =  in4 70)) (not ( = in5 73))) (not ( = in5 74))) (not ( = in6 65)))  ( =  in6 66)) (not ( = in7 69)))  ( =  in7 70)))",
      "response": "- Worst-case time complexity: O(n), where n is the input length. The parser performs a single pass over the array and does only constant-time work per character (a few comparisons and assignments). Space complexity is O(1).\n\nAnswer:\n(set-logic QF_BV)\n\n; 8 input characters (Java char is 16-bit)\n(declare-fun in0 () (_ BitVec 16))\n(declare-fun in1 () (_ BitVec 16))\n(declare-fun in2 () (_ BitVec 16))\n(declare-fun in3 () (_ BitVec 16))\n(declare-fun in4 () (_ BitVec 16))\n(declare-fun in5 () (_ BitVec 16))\n(declare-fun in6 () (_ BitVec 16))\n(declare-fun in7 () (_ BitVec 16))\n\n; States after consuming i characters: s0..s8 (32-bit for convenience)\n(declare-fun s0 () (_ BitVec 32))\n(declare-fun s1 () (_ BitVec 32))\n(declare-fun s2 () (_ BitVec 32))\n(declare-fun s3 () (_ BitVec 32))\n(declare-fun s4 () (_ BitVec 32))\n(declare-fun s5 () (_ BitVec 32))\n(declare-fun s6 () (_ BitVec 32))\n(declare-fun s7 () (_ BitVec 32))\n(declare-fun s8 () (_ BitVec 32))\n\n; Transition function matching the switch-case in the Java code\n(define-fun delta ((s (_ BitVec 32)) (c (_ BitVec 16))) (_ BitVec 32)\n  (ite (= s #x00000000)\n       (ite (= c #x0041) #x00000001\n            (ite (= c #x0042) #x00000002\n                 #x00000000))\n  (ite (= s #x00000001)\n       (ite (= c #x0043) #x00000003\n            (ite (= c #x0044) #x00000004\n                 #x00000000))\n  (ite (= s #x00000002)\n       (ite (= c #x0045) #x00000003\n            (ite (= c #x0046) #x00000004\n                 #x00000000))\n  (ite (= s #x00000003)\n       (ite (= c #x0047) #x00000005\n            (ite (= c #x0048) #x00000006\n                 #x00000000))\n  (ite (= s #x00000004)\n       (ite (= c #x0049) #x00000005\n            (ite (= c #x004A) #x00000006\n                 #x00000000))\n  (ite (= s #x00000005)\n       (ite (= c #x004B) #x00000007\n            #x00000005)\n  (ite (= s #x00000006)\n       (ite (= c #x004C) #x00000007\n            #x00000006)\n       #x00000000))))))))\n\n; Initial state and unrolling for n = 8 characters\n(assert (= s0 #x00000000))\n(assert (= s1 (delta s0 in0)))\n(assert (= s2 (delta s1 in1)))\n(assert (= s3 (delta s2 in2)))\n(assert (= s4 (delta s3 in3)))\n(assert (= s5 (delta s4 in4)))\n(assert (= s6 (delta s5 in5)))\n(assert (= s7 (delta s6 in6)))\n(assert (= s8 (delta s7 in7)))\n\n; Example property: reach state 7 at least once within the 8 inputs\n(assert (or (= s1 #x00000007)\n            (= s2 #x00000007)\n            (= s3 #x00000007)\n            (= s4 #x00000007)\n            (= s5 #x00000007)\n            (= s6 #x00000007)\n            (= s7 #x00000007)\n            (= s8 #x00000007)))\n\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and (and (and (not ( = in0 65))  ( =  in0 66)) (not ( = in1 69)))  ( =  in1 70)))",
      "response": "Worst-case time complexity: O(N), where N is the length of the input. Both creating N symbolic chars and processing them in the state machine are linear-time operations with constant work per character.\n\nAnswer:\n(set-logic QF_BV)\n; Input size n = 2\n(declare-fun in0 () (_ BitVec 16))\n(declare-fun in1 () (_ BitVec 16))\n\n; States encoded as 32-bit bit-vectors: 0..7\n(declare-fun s1 () (_ BitVec 32))\n(declare-fun s2 () (_ BitVec 32))\n\n; After first character (initial state is 0)\n(assert\n  (= s1\n     (ite (= in0 #x0041) #x00000001        ; 'A' -> state 1\n         (ite (= in0 #x0042) #x00000002    ; 'B' -> state 2\n                              #x00000000)))) ; else -> state 0\n\n; After second character, follow the switch cases\n(assert\n  (= s2\n     (ite (= s1 #x00000001)  ; state 1\n          (ite (= in1 #x0043) #x00000003    ; 'C' -> 3\n              (ite (= in1 #x0044) #x00000004 ; 'D' -> 4\n                                   #x00000000)) ; else -> 0\n     (ite (= s1 #x00000002)  ; state 2\n          (ite (= in1 #x0045) #x00000003    ; 'E' -> 3\n              (ite (= in1 #x0046) #x00000004 ; 'F' -> 4\n                                   #x00000000)) ; else -> 0\n     (ite (= s1 #x00000003)  ; state 3 (included for completeness)\n          (ite (= in1 #x0047) #x00000005    ; 'G' -> 5\n              (ite (= in1 #x0048) #x00000006 ; 'H' -> 6\n                                   #x00000000)) ; else -> 0\n     (ite (= s1 #x00000004)  ; state 4 (included for completeness)\n          (ite (= in1 #x0049) #x00000005    ; 'I' -> 5\n              (ite (= in1 #x004a) #x00000006 ; 'J' -> 6\n                                   #x00000000)) ; else -> 0\n     (ite (= s1 #x00000005)  ; state 5 (included for completeness)\n          (ite (= in1 #x004b) #x00000007    ; 'K' -> 7\n                               #x00000005)   ; else stay 5\n     (ite (= s1 #x00000006)  ; state 6 (included for completeness)\n          (ite (= in1 #x004c) #x00000007    ; 'L' -> 7\n                               #x00000006)   ; else stay 6\n     (ite (= s1 #x00000000)  ; state 0\n          (ite (= in1 #x0041) #x00000001    ; 'A' -> 1\n              (ite (= in1 #x0042) #x00000002 ; 'B' -> 2\n                                   #x00000000)) ; else -> 0\n          #x00000000)))))))))"
    },
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 65))  ( =  in0 66)) (not ( = in1 69)))  ( =  in1 70)) (not ( = in2 73))) (not ( = in2 74))) (not ( = in3 65)))  ( =  in3 66)) (not ( = in4 69)))  ( =  in4 70)) (not ( = in5 73))) (not ( = in5 74))) (not ( = in6 65)))  ( =  in6 66)) (not ( = in7 69)))  ( =  in7 70)) (not ( = in8 73))) (not ( = in8 74))) (not ( = in9 65)))  ( =  in9 66)) (not ( = in10 69)))  ( =  in10 70)) (not ( = in11 73))) (not ( = in11 74))) (not ( = in12 65)))  ( =  in12 66)) (not ( = in13 69)))  ( =  in13 70)) (not ( = in14 73))) (not ( = in14 74))) (not ( = in15 65)))  ( =  in15 66)))",
      "response": "- Worst-case time complexity: O(n), where n is the input length. Each character causes a constant-time transition in the switch; there are no nested loops dependent on n.\n\nAnswer:\n(set-logic QF_BV)\n\n; next-state function for the parser\n(define-fun next ((s (_ BitVec 4)) (ch (_ BitVec 16))) (_ BitVec 4)\n  (ite (= s (_ bv0 4))\n       (ite (= ch (_ bv65 16)) (_ bv1 4)\n            (ite (= ch (_ bv66 16)) (_ bv2 4) (_ bv0 4)))\n  (ite (= s (_ bv1 4))\n       (ite (= ch (_ bv67 16)) (_ bv3 4)\n            (ite (= ch (_ bv68 16)) (_ bv4 4) (_ bv0 4)))\n  (ite (= s (_ bv2 4))\n       (ite (= ch (_ bv69 16)) (_ bv3 4)\n            (ite (= ch (_ bv70 16)) (_ bv4 4) (_ bv0 4)))\n  (ite (= s (_ bv3 4))\n       (ite (= ch (_ bv71 16)) (_ bv5 4)\n            (ite (= ch (_ bv72 16)) (_ bv6 4) (_ bv0 4)))\n  (ite (= s (_ bv4 4))\n       (ite (= ch (_ bv73 16)) (_ bv5 4)\n            (ite (= ch (_ bv74 16)) (_ bv6 4) (_ bv0 4)))\n  (ite (= s (_ bv5 4))\n       (ite (= ch (_ bv75 16)) (_ bv7 4) (_ bv5 4))\n  (ite (= s (_ bv6 4))\n       (ite (= ch (_ bv76 16)) (_ bv7 4) (_ bv6 4))\n       (_ bv0 4))))))))\n\n; declare 16 symbolic chars (Java char is 16-bit)\n(declare-fun in0  () (_ BitVec 16))\n(declare-fun in1  () (_ BitVec 16))\n(declare-fun in2  () (_ BitVec 16))\n(declare-fun in3  () (_ BitVec 16))\n(declare-fun in4  () (_ BitVec 16))\n(declare-fun in5  () (_ BitVec 16))\n(declare-fun in6  () (_ BitVec 16))\n(declare-fun in7  () (_ BitVec 16))\n(declare-fun in8  () (_ BitVec 16))\n(declare-fun in9  () (_ BitVec 16))\n(declare-fun in10 () (_ BitVec 16))\n(declare-fun in11 () (_ BitVec 16))\n(declare-fun in12 () (_ BitVec 16))\n(declare-fun in13 () (_ BitVec 16))\n(declare-fun in14 () (_ BitVec 16))\n(declare-fun in15 () (_ BitVec 16))\n\n; declare states s0..s16 as 4-bit (values 0..7)\n(declare-fun s0  () (_ BitVec 4))\n(declare-fun s1  () (_ BitVec 4))\n(declare-fun s2  () (_ BitVec 4))\n(declare-fun s3  () (_ BitVec 4))\n(declare-fun s4  () (_ BitVec 4))\n(declare-fun s5  () (_ BitVec 4))\n(declare-fun s6  () (_ BitVec 4))\n(declare-fun s7  () (_ BitVec 4))\n(declare-fun s8  () (_ BitVec 4))\n(declare-fun s9  () (_ BitVec 4))\n(declare-fun s10 () (_ BitVec 4))\n(declare-fun s11 () (_ BitVec 4))\n(declare-fun s12 () (_ BitVec 4))\n(declare-fun s13 () (_ BitVec 4))\n(declare-fun s14 () (_ BitVec 4))\n(declare-fun s15 () (_ BitVec 4))\n(declare-fun s16 () (_ BitVec 4))\n\n; initial state\n(assert (= s0 (_ bv0 4)))\n\n; unroll 16 steps of the state machine\n(assert (= s1  (next s0  in0)))\n(assert (= s2  (next s1  in1)))\n(assert (= s3  (next s2  in2)))\n(assert (= s4  (next s3  in3)))\n(assert (= s5  (next s4  in4)))\n(assert (= s6  (next s5  in5)))\n(assert (= s7  (next s6  in6)))\n(assert (= s8  (next s7  in7)))\n(assert (= s9  (next s8  in8)))\n(assert (= s10 (next s9  in9)))\n(assert (= s11 (next s10 in10)))\n(assert (= s12 (next s11 in11)))\n(assert (= s13 (next s12 in12)))\n(assert (= s14 (next s13 in13)))\n(assert (= s15 (next s14 in14)))\n(assert (= s16 (next s15 in15)))"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 65))  ( =  in0 66)) (not ( = in1 69)))  ( =  in1 70)) (not ( = in2 73))) (not ( = in2 74))) (not ( = in3 65)))  ( =  in3 66)) (not ( = in4 69)))  ( =  in4 70)) (not ( = in5 73))) (not ( = in5 74))) (not ( = in6 65)))  ( =  in6 66)) (not ( = in7 69)))  ( =  in7 70)) (not ( = in8 73))) (not ( = in8 74))) (not ( = in9 65)))  ( =  in9 66)) (not ( = in10 69)))  ( =  in10 70)) (not ( = in11 73))) (not ( = in11 74))) (not ( = in12 65)))  ( =  in12 66)) (not ( = in13 69)))  ( =  in13 70)) (not ( = in14 73))) (not ( = in14 74))) (not ( = in15 65)))  ( =  in15 66)) (not ( = in16 69)))  ( =  in16 70)) (not ( = in17 73))) (not ( = in17 74))) (not ( = in18 65)))  ( =  in18 66)) (not ( = in19 69)))  ( =  in19 70)) (not ( = in20 73))) (not ( = in20 74))) (not ( = in21 65)))  ( =  in21 66)) (not ( = in22 69)))  ( =  in22 70)) (not ( = in23 73))) (not ( = in23 74))) (not ( = in24 65)))  ( =  in24 66)) (not ( = in25 69)))  ( =  in25 70)) (not ( = in26 73))) (not ( = in26 74))) (not ( = in27 65)))  ( =  in27 66)) (not ( = in28 69)))  ( =  in28 70)) (not ( = in29 73))) (not ( = in29 74))))",
      "response": "Worst-case time complexity: O(N), where N is the length of the input array. The parser does a single pass over the input with constant-time work per character; memory usage is O(1).\n\nAnswer:\n(set-logic QF_BV)\n(declare-fun in0 () (_ BitVec 16))\n(declare-fun in1 () (_ BitVec 16))\n(declare-fun in2 () (_ BitVec 16))\n(declare-fun in3 () (_ BitVec 16))\n(declare-fun in4 () (_ BitVec 16))\n(declare-fun in5 () (_ BitVec 16))\n(declare-fun in6 () (_ BitVec 16))\n(declare-fun in7 () (_ BitVec 16))\n(declare-fun in8 () (_ BitVec 16))\n(declare-fun in9 () (_ BitVec 16))\n(declare-fun in10 () (_ BitVec 16))\n(declare-fun in11 () (_ BitVec 16))\n(declare-fun in12 () (_ BitVec 16))\n(declare-fun in13 () (_ BitVec 16))\n(declare-fun in14 () (_ BitVec 16))\n(declare-fun in15 () (_ BitVec 16))\n(declare-fun in16 () (_ BitVec 16))\n(declare-fun in17 () (_ BitVec 16))\n(declare-fun in18 () (_ BitVec 16))\n(declare-fun in19 () (_ BitVec 16))\n(declare-fun in20 () (_ BitVec 16))\n(declare-fun in21 () (_ BitVec 16))\n(declare-fun in22 () (_ BitVec 16))\n(declare-fun in23 () (_ BitVec 16))\n(declare-fun in24 () (_ BitVec 16))\n(declare-fun in25 () (_ BitVec 16))\n(declare-fun in26 () (_ BitVec 16))\n(declare-fun in27 () (_ BitVec 16))\n(declare-fun in28 () (_ BitVec 16))\n(declare-fun in29 () (_ BitVec 16))\n\n; Ensure a path that ends in state 7 at the final character (n = 30):\n; State path: 0 -(A)-> 1 -(C)-> 3 -(G)-> 5 --(not K for i=3..28)--> 5 -(K)-> 7\n(assert (= in0 (_ bv65 16)))  ; 'A'\n(assert (= in1 (_ bv67 16)))  ; 'C'\n(assert (= in2 (_ bv71 16)))  ; 'G'\n(assert (not (= in3  (_ bv75 16))))  ; not 'K'\n(assert (not (= in4  (_ bv75 16))))\n(assert (not (= in5  (_ bv75 16))))\n(assert (not (= in6  (_ bv75 16))))\n(assert (not (= in7  (_ bv75 16))))\n(assert (not (= in8  (_ bv75 16))))\n(assert (not (= in9  (_ bv75 16))))\n(assert (not (= in10 (_ bv75 16))))\n(assert (not (= in11 (_ bv75 16))))\n(assert (not (= in12 (_ bv75 16))))\n(assert (not (= in13 (_ bv75 16))))\n(assert (not (= in14 (_ bv75 16))))\n(assert (not (= in15 (_ bv75 16))))\n(assert (not (= in16 (_ bv75 16))))\n(assert (not (= in17 (_ bv75 16))))\n(assert (not (= in18 (_ bv75 16))))\n(assert (not (= in19 (_ bv75 16))))\n(assert (not (= in20 (_ bv75 16))))\n(assert (not (= in21 (_ bv75 16))))\n(assert (not (= in22 (_ bv75 16))))\n(assert (not (= in23 (_ bv75 16))))\n(assert (not (= in24 (_ bv75 16))))\n(assert (not (= in25 (_ bv75 16))))\n(assert (not (= in26 (_ bv75 16))))\n(assert (not (= in27 (_ bv75 16))))\n(assert (not (= in28 (_ bv75 16))))\n(assert (= in29 (_ bv75 16)))        ; 'K' on the last character\n\n(check-sat)\n(get-model)"
    }
  },
  "QuickSort": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class QuickSort {\n    public static void quickSort(int[] arr, int low, int high) {\n        if (low < high) {\n            int pivotIndex = partition(arr, low, high);\n            quickSort(arr, low, pivotIndex - 1);\n            quickSort(arr, pivotIndex + 1, high);\n        }\n    }\n    \n    public static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high];\n        int i = low - 1;\n        for (int j = low; j < high; j++) {\n            if (arr[j] <= pivot) {\n                i++;\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        int temp = arr[i+1];\n        arr[i+1] = arr[high];\n        arr[high] = temp;\n        return i + 1;\n    }\n    \n    public static void main(String[] args) {\n        int N = Integer.parseInt(args[0]);\n        int[] arr = new int[N];\n        for (int i = 0; i < N; i++) {\n            arr[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n        \n        quickSort(arr, 0, N - 1);\n    \n    }\n}\n",
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in9 Int)\n(declare-const in10 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <=  in0 in29)  ( <=  in1 in29))  ( <=  in2 in29))  ( <=  in3 in29))  ( <=  in4 in29))  ( <=  in5 in29))  ( <=  in6 in29))  ( <=  in7 in29))  ( <=  in8 in29))  ( <=  in9 in29))  ( <=  in10 in29))  ( <=  in11 in29))  ( <=  in12 in29))  ( <=  in13 in29))  ( <=  in14 in29))  ( <=  in15 in29))  ( <=  in16 in29))  ( <=  in17 in29))  ( <=  in18 in29))  ( <=  in19 in29))  ( <=  in20 in29))  ( <=  in21 in29))  ( <=  in22 in29))  ( <=  in23 in29))  ( <=  in24 in29))  ( <=  in25 in29))  ( <=  in26 in29))  ( <=  in27 in29))  ( <=  in28 in29))  ( <=  in0 in28))  ( <=  in1 in28))  ( <=  in2 in28))  ( <=  in3 in28))  ( <=  in4 in28))  ( <=  in5 in28))  ( <=  in6 in28))  ( <=  in7 in28))  ( <=  in8 in28))  ( <=  in9 in28))  ( <=  in10 in28))  ( <=  in11 in28))  ( <=  in12 in28))  ( <=  in13 in28))  ( <=  in14 in28))  ( <=  in15 in28))  ( <=  in16 in28))  ( <=  in17 in28))  ( <=  in18 in28))  ( <=  in19 in28))  ( <=  in20 in28))  ( <=  in21 in28))  ( <=  in22 in28))  ( <=  in23 in28))  ( <=  in24 in28))  ( <=  in25 in28))  ( <=  in26 in28))  ( <=  in27 in28))  ( <=  in0 in27))  ( <=  in1 in27))  ( <=  in2 in27))  ( <=  in3 in27))  ( <=  in4 in27))  ( <=  in5 in27))  ( <=  in6 in27))  ( <=  in7 in27))  ( <=  in8 in27))  ( <=  in9 in27))  ( <=  in10 in27))  ( <=  in11 in27))  ( <=  in12 in27))  ( <=  in13 in27))  ( <=  in14 in27))  ( <=  in15 in27))  ( <=  in16 in27))  ( <=  in17 in27))  ( <=  in18 in27))  ( <=  in19 in27))  ( <=  in20 in27))  ( <=  in21 in27))  ( <=  in22 in27))  ( <=  in23 in27))  ( <=  in24 in27))  ( <=  in25 in27))  ( <=  in26 in27))  ( <=  in0 in26))  ( <=  in1 in26))  ( <=  in2 in26))  ( <=  in3 in26))  ( <=  in4 in26))  ( <=  in5 in26))  ( <=  in6 in26))  ( <=  in7 in26))  ( <=  in8 in26))  ( <=  in9 in26))  ( <=  in10 in26))  ( <=  in11 in26))  ( <=  in12 in26))  ( <=  in13 in26))  ( <=  in14 in26))  ( <=  in15 in26))  ( <=  in16 in26))  ( <=  in17 in26))  ( <=  in18 in26))  ( <=  in19 in26))  ( <=  in20 in26))  ( <=  in21 in26))  ( <=  in22 in26))  ( <=  in23 in26))  ( <=  in24 in26))  ( <=  in25 in26))  ( <=  in0 in25))  ( <=  in1 in25))  ( <=  in2 in25))  ( <=  in3 in25))  ( <=  in4 in25))  ( <=  in5 in25))  ( <=  in6 in25))  ( <=  in7 in25))  ( <=  in8 in25))  ( <=  in9 in25))  ( <=  in10 in25))  ( <=  in11 in25))  ( <=  in12 in25))  ( <=  in13 in25))  ( <=  in14 in25))  ( <=  in15 in25))  ( <=  in16 in25))  ( <=  in17 in25))  ( <=  in18 in25))  ( <=  in19 in25))  ( <=  in20 in25))  ( <=  in21 in25))  ( <=  in22 in25))  ( <=  in23 in25))  ( <=  in24 in25))  ( <=  in0 in24))  ( <=  in1 in24))  ( <=  in2 in24))  ( <=  in3 in24))  ( <=  in4 in24))  ( <=  in5 in24))  ( <=  in6 in24))  ( <=  in7 in24))  ( <=  in8 in24))  ( <=  in9 in24))  ( <=  in10 in24))  ( <=  in11 in24))  ( <=  in12 in24))  ( <=  in13 in24))  ( <=  in14 in24))  ( <=  in15 in24))  ( <=  in16 in24))  ( <=  in17 in24))  ( <=  in18 in24))  ( <=  in19 in24))  ( <=  in20 in24))  ( <=  in21 in24))  ( <=  in22 in24))  ( <=  in23 in24))  ( <=  in0 in23))  ( <=  in1 in23))  ( <=  in2 in23))  ( <=  in3 in23))  ( <=  in4 in23))  ( <=  in5 in23))  ( <=  in6 in23))  ( <=  in7 in23))  ( <=  in8 in23))  ( <=  in9 in23))  ( <=  in10 in23))  ( <=  in11 in23))  ( <=  in12 in23))  ( <=  in13 in23))  ( <=  in14 in23))  ( <=  in15 in23))  ( <=  in16 in23))  ( <=  in17 in23))  ( <=  in18 in23))  ( <=  in19 in23))  ( <=  in20 in23))  ( <=  in21 in23))  ( <=  in22 in23))  ( <=  in0 in22))  ( <=  in1 in22))  ( <=  in2 in22))  ( <=  in3 in22))  ( <=  in4 in22))  ( <=  in5 in22))  ( <=  in6 in22))  ( <=  in7 in22))  ( <=  in8 in22))  ( <=  in9 in22))  ( <=  in10 in22))  ( <=  in11 in22))  ( <=  in12 in22))  ( <=  in13 in22))  ( <=  in14 in22))  ( <=  in15 in22))  ( <=  in16 in22))  ( <=  in17 in22))  ( <=  in18 in22))  ( <=  in19 in22))  ( <=  in20 in22))  ( <=  in21 in22))  ( <=  in0 in21))  ( <=  in1 in21))  ( <=  in2 in21))  ( <=  in3 in21))  ( <=  in4 in21))  ( <=  in5 in21))  ( <=  in6 in21))  ( <=  in7 in21))  ( <=  in8 in21))  ( <=  in9 in21))  ( <=  in10 in21))  ( <=  in11 in21))  ( <=  in12 in21))  ( <=  in13 in21))  ( <=  in14 in21))  ( <=  in15 in21))  ( <=  in16 in21))  ( <=  in17 in21))  ( <=  in18 in21))  ( <=  in19 in21))  ( <=  in20 in21))  ( <=  in0 in20))  ( <=  in1 in20))  ( <=  in2 in20))  ( <=  in3 in20))  ( <=  in4 in20))  ( <=  in5 in20))  ( <=  in6 in20))  ( <=  in7 in20))  ( <=  in8 in20))  ( <=  in9 in20))  ( <=  in10 in20))  ( <=  in11 in20))  ( <=  in12 in20))  ( <=  in13 in20))  ( <=  in14 in20))  ( <=  in15 in20))  ( <=  in16 in20))  ( <=  in17 in20))  ( <=  in18 in20))  ( <=  in19 in20))  ( <=  in0 in19))  ( <=  in1 in19))  ( <=  in2 in19))  ( <=  in3 in19))  ( <=  in4 in19))  ( <=  in5 in19))  ( <=  in6 in19))  ( <=  in7 in19))  ( <=  in8 in19))  ( <=  in9 in19))  ( <=  in10 in19))  ( <=  in11 in19))  ( <=  in12 in19))  ( <=  in13 in19))  ( <=  in14 in19))  ( <=  in15 in19))  ( <=  in16 in19))  ( <=  in17 in19))  ( <=  in18 in19))  ( <=  in0 in18))  ( <=  in1 in18))  ( <=  in2 in18))  ( <=  in3 in18))  ( <=  in4 in18))  ( <=  in5 in18))  ( <=  in6 in18))  ( <=  in7 in18))  ( <=  in8 in18))  ( <=  in9 in18))  ( <=  in10 in18))  ( <=  in11 in18))  ( <=  in12 in18))  ( <=  in13 in18))  ( <=  in14 in18))  ( <=  in15 in18))  ( <=  in16 in18))  ( <=  in17 in18))  ( <=  in0 in17))  ( <=  in1 in17))  ( <=  in2 in17))  ( <=  in3 in17))  ( <=  in4 in17))  ( <=  in5 in17))  ( <=  in6 in17))  ( <=  in7 in17))  ( <=  in8 in17))  ( <=  in9 in17))  ( <=  in10 in17))  ( <=  in11 in17))  ( <=  in12 in17))  ( <=  in13 in17))  ( <=  in14 in17))  ( <=  in15 in17))  ( <=  in16 in17))  ( <=  in0 in16))  ( <=  in1 in16))  ( <=  in2 in16))  ( <=  in3 in16))  ( <=  in4 in16))  ( <=  in5 in16))  ( <=  in6 in16))  ( <=  in7 in16))  ( <=  in8 in16))  ( <=  in9 in16))  ( <=  in10 in16))  ( <=  in11 in16))  ( <=  in12 in16))  ( <=  in13 in16))  ( <=  in14 in16))  ( <=  in15 in16))  ( <=  in0 in15))  ( <=  in1 in15))  ( <=  in2 in15))  ( <=  in3 in15))  ( <=  in4 in15))  ( <=  in5 in15))  ( <=  in6 in15))  ( <=  in7 in15))  ( <=  in8 in15))  ( <=  in9 in15))  ( <=  in10 in15))  ( <=  in11 in15))  ( <=  in12 in15))  ( <=  in13 in15))  ( <=  in14 in15))  ( <=  in0 in14))  ( <=  in1 in14))  ( <=  in2 in14))  ( <=  in3 in14))  ( <=  in4 in14))  ( <=  in5 in14))  ( <=  in6 in14))  ( <=  in7 in14))  ( <=  in8 in14))  ( <=  in9 in14))  ( <=  in10 in14))  ( <=  in11 in14))  ( <=  in12 in14))  ( <=  in13 in14))  ( <=  in0 in13))  ( <=  in1 in13))  ( <=  in2 in13))  ( <=  in3 in13))  ( <=  in4 in13))  ( <=  in5 in13))  ( <=  in6 in13))  ( <=  in7 in13))  ( <=  in8 in13))  ( <=  in9 in13))  ( <=  in10 in13))  ( <=  in11 in13))  ( <=  in12 in13))  ( <=  in0 in12))  ( <=  in1 in12))  ( <=  in2 in12))  ( <=  in3 in12))  ( <=  in4 in12))  ( <=  in5 in12))  ( <=  in6 in12))  ( <=  in7 in12))  ( <=  in8 in12))  ( <=  in9 in12))  ( <=  in10 in12))  ( <=  in11 in12))  ( <=  in0 in11))  ( <=  in1 in11))  ( <=  in2 in11))  ( <=  in3 in11))  ( <=  in4 in11))  ( <=  in5 in11))  ( <=  in6 in11))  ( <=  in7 in11))  ( <=  in8 in11))  ( <=  in9 in11))  ( <=  in10 in11))  ( <=  in0 in10))  ( <=  in1 in10))  ( <=  in2 in10))  ( <=  in3 in10))  ( <=  in4 in10))  ( <=  in5 in10))  ( <=  in6 in10))  ( <=  in7 in10))  ( <=  in8 in10))  ( <=  in9 in10))  ( <=  in0 in9))  ( <=  in1 in9))  ( <=  in2 in9))  ( <=  in3 in9))  ( <=  in4 in9))  ( <=  in5 in9))  ( <=  in6 in9))  ( <=  in7 in9))  ( <=  in8 in9))  ( <=  in0 in8))  ( <=  in1 in8))  ( <=  in2 in8))  ( <=  in3 in8))  ( <=  in4 in8))  ( <=  in5 in8))  ( <=  in6 in8))  ( <=  in7 in8))  ( <=  in0 in7))  ( <=  in1 in7))  ( <=  in2 in7))  ( <=  in3 in7))  ( <=  in4 in7))  ( <=  in5 in7))  ( <=  in6 in7))  ( <=  in0 in6))  ( <=  in1 in6))  ( <=  in2 in6))  ( <=  in3 in6))  ( <=  in4 in6))  ( <=  in5 in6))  ( <=  in0 in5))  ( <=  in1 in5))  ( <=  in2 in5))  ( <=  in3 in5))  ( <=  in4 in5))  ( <=  in0 in4))  ( <=  in1 in4))  ( <=  in2 in4))  ( <=  in3 in4))  ( <=  in0 in3))  ( <=  in1 in3))  ( <=  in2 in3))  ( <=  in0 in2))  ( <=  in1 in2))  ( <=  in0 in1)))",
      "response": "Worst-case time complexity: O(n^2). This occurs when the chosen pivot (arr[high]) is always the smallest or largest element of the subarray, yielding highly unbalanced partitions (sizes n\u22121 and 0) at every recursive step. Arrays that are nondecreasing or nonincreasing produce this behavior.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n(declare-fun in18 () Int)\n(declare-fun in19 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in22 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n(declare-fun in28 () Int)\n(declare-fun in29 () Int)\n(assert\n  (or\n    (and (<= in0 in1) (<= in1 in2) (<= in2 in3) (<= in3 in4) (<= in4 in5)\n         (<= in5 in6) (<= in6 in7) (<= in7 in8) (<= in8 in9) (<= in9 in10)\n         (<= in10 in11) (<= in11 in12) (<= in12 in13) (<= in13 in14) (<= in14 in15)\n         (<= in15 in16) (<= in16 in17) (<= in17 in18) (<= in18 in19) (<= in19 in20)\n         (<= in20 in21) (<= in21 in22) (<= in22 in23) (<= in23 in24) (<= in24 in25)\n         (<= in25 in26) (<= in26 in27) (<= in27 in28) (<= in28 in29))\n    (and (>= in0 in1) (>= in1 in2) (>= in2 in3) (>= in3 in4) (>= in4 in5)\n         (>= in5 in6) (>= in6 in7) (>= in7 in8) (>= in8 in9) (>= in9 in10)\n         (>= in10 in11) (>= in11 in12) (>= in12 in13) (>= in13 in14) (>= in14 in15)\n         (>= in15 in16) (>= in16 in17) (>= in17 in18) (>= in18 in19) (>= in19 in20)\n         (>= in20 in21) (>= in21 in22) (>= in22 in23) (>= in23 in24) (>= in24 in25)\n         (>= in25 in26) (>= in26 in27) (>= in27 in28) (>= in28 in29))))\n(check-sat)"
    },
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in9 Int)\n(declare-const in10 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <=  in0 in15)  ( <=  in1 in15))  ( <=  in2 in15))  ( <=  in3 in15))  ( <=  in4 in15))  ( <=  in5 in15))  ( <=  in6 in15))  ( <=  in7 in15))  ( <=  in8 in15))  ( <=  in9 in15))  ( <=  in10 in15))  ( <=  in11 in15))  ( <=  in12 in15))  ( <=  in13 in15))  ( <=  in14 in15))  ( <=  in0 in14))  ( <=  in1 in14))  ( <=  in2 in14))  ( <=  in3 in14))  ( <=  in4 in14))  ( <=  in5 in14))  ( <=  in6 in14))  ( <=  in7 in14))  ( <=  in8 in14))  ( <=  in9 in14))  ( <=  in10 in14))  ( <=  in11 in14))  ( <=  in12 in14))  ( <=  in13 in14))  ( <=  in0 in13))  ( <=  in1 in13))  ( <=  in2 in13))  ( <=  in3 in13))  ( <=  in4 in13))  ( <=  in5 in13))  ( <=  in6 in13))  ( <=  in7 in13))  ( <=  in8 in13))  ( <=  in9 in13))  ( <=  in10 in13))  ( <=  in11 in13))  ( <=  in12 in13))  ( <=  in0 in12))  ( <=  in1 in12))  ( <=  in2 in12))  ( <=  in3 in12))  ( <=  in4 in12))  ( <=  in5 in12))  ( <=  in6 in12))  ( <=  in7 in12))  ( <=  in8 in12))  ( <=  in9 in12))  ( <=  in10 in12))  ( <=  in11 in12))  ( <=  in0 in11))  ( <=  in1 in11))  ( <=  in2 in11))  ( <=  in3 in11))  ( <=  in4 in11))  ( <=  in5 in11))  ( <=  in6 in11))  ( <=  in7 in11))  ( <=  in8 in11))  ( <=  in9 in11))  ( <=  in10 in11))  ( <=  in0 in10))  ( <=  in1 in10))  ( <=  in2 in10))  ( <=  in3 in10))  ( <=  in4 in10))  ( <=  in5 in10))  ( <=  in6 in10))  ( <=  in7 in10))  ( <=  in8 in10))  ( <=  in9 in10))  ( <=  in0 in9))  ( <=  in1 in9))  ( <=  in2 in9))  ( <=  in3 in9))  ( <=  in4 in9))  ( <=  in5 in9))  ( <=  in6 in9))  ( <=  in7 in9))  ( <=  in8 in9))  ( <=  in0 in8))  ( <=  in1 in8))  ( <=  in2 in8))  ( <=  in3 in8))  ( <=  in4 in8))  ( <=  in5 in8))  ( <=  in6 in8))  ( <=  in7 in8))  ( <=  in0 in7))  ( <=  in1 in7))  ( <=  in2 in7))  ( <=  in3 in7))  ( <=  in4 in7))  ( <=  in5 in7))  ( <=  in6 in7))  ( <=  in0 in6))  ( <=  in1 in6))  ( <=  in2 in6))  ( <=  in3 in6))  ( <=  in4 in6))  ( <=  in5 in6))  ( <=  in0 in5))  ( <=  in1 in5))  ( <=  in2 in5))  ( <=  in3 in5))  ( <=  in4 in5))  ( <=  in0 in4))  ( <=  in1 in4))  ( <=  in2 in4))  ( <=  in3 in4))  ( <=  in0 in3))  ( <=  in1 in3))  ( <=  in2 in3))  ( <=  in0 in2))  ( <=  in1 in2))  ( <=  in0 in1)))",
      "response": "- Worst-case time complexity: O(n^2). With pivot chosen as the last element (Lomuto partition), already-sorted or reverse-sorted inputs produce the recurrence T(n) = T(n\u22121) + (n\u22121), yielding quadratic time.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(define-fun nondecreasing () Bool\n  (and (<= in0 in1) (<= in1 in2) (<= in2 in3) (<= in3 in4)\n       (<= in4 in5) (<= in5 in6) (<= in6 in7) (<= in7 in8)\n       (<= in8 in9) (<= in9 in10) (<= in10 in11) (<= in11 in12)\n       (<= in12 in13) (<= in13 in14) (<= in14 in15)))\n(define-fun nonincreasing () Bool\n  (and (>= in0 in1) (>= in1 in2) (>= in2 in3) (>= in3 in4)\n       (>= in4 in5) (>= in5 in6) (>= in6 in7) (>= in7 in8)\n       (>= in8 in9) (>= in9 in10) (>= in10 in11) (>= in11 in12)\n       (>= in12 in13) (>= in13 in14) (>= in14 in15)))\n(assert (or nondecreasing nonincreasing))"
    },
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert  ( <=  in0 in1))",
      "response": "Worst-case time complexity: O(n^2)\n\nReason: The algorithm always selects the last element as pivot (Lomuto partition). If the input is already sorted (nondecreasing) or reverse-sorted (nonincreasing), the pivot ends up as an extreme (max or min) and each partition reduces the problem by only one element, yielding one-sided recursion and \u0398(n^2) comparisons/swaps overall.\n\nFor input size n = 2, one sufficient constraint to realize the worst-case pattern (already sorted, so pivot is always the maximum) is in0 \u2264 in1.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(assert (<= in0 in1))\n(check-sat)"
    },
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and  ( <=  in0 in3)  ( <=  in1 in3))  ( <=  in2 in3))  ( <=  in0 in2))  ( <=  in1 in2))  ( <=  in0 in1)))",
      "response": "- Worst-case time complexity: O(n^2). This happens because the pivot is always chosen as the last element (Lomuto partition). If the input array is already sorted (strictly increasing) or strictly decreasing, each partition produces one subarray of size n\u22121 and the other of size 0, leading to quadratic time.\n\n- SMT2 constraint for n=4 that forces this worst case (array strictly increasing or strictly decreasing so the pivot is always an extreme):\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(assert\n  (or\n    (and (< in0 in1) (< in1 in2) (< in2 in3))\n    (and (> in0 in1) (> in1 in2) (> in2 in3))\n  )\n)\n(check-sat)"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <=  in0 in7)  ( <=  in1 in7))  ( <=  in2 in7))  ( <=  in3 in7))  ( <=  in4 in7))  ( <=  in5 in7))  ( <=  in6 in7))  ( <=  in0 in6))  ( <=  in1 in6))  ( <=  in2 in6))  ( <=  in3 in6))  ( <=  in4 in6))  ( <=  in5 in6))  ( <=  in0 in5))  ( <=  in1 in5))  ( <=  in2 in5))  ( <=  in3 in5))  ( <=  in4 in5))  ( <=  in0 in4))  ( <=  in1 in4))  ( <=  in2 in4))  ( <=  in3 in4))  ( <=  in0 in3))  ( <=  in1 in3))  ( <=  in2 in3))  ( <=  in0 in2))  ( <=  in1 in2))  ( <=  in0 in1)))",
      "response": "Worst-case time complexity: O(n^2). This happens when the chosen pivot (last element) is always the maximum or minimum of the current subarray, e.g., an already sorted (non-decreasing) array.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(assert (< in0 in1))\n(assert (< in1 in2))\n(assert (< in2 in3))\n(assert (< in3 in4))\n(assert (< in4 in5))\n(assert (< in5 in6))\n(assert (< in6 in7))\n(check-sat)\n(get-model)"
    }
  },
  "NaiveFibonacci": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class NaiveFibonacci {\n    /**\n     * Computes the Fibonacci number for n recursively.\n     * This naive recursion leads to exponential growth in function calls.\n     */\n    public static long fib(int n) {\n        if(n <= 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n\n    public static void main(String[] args) {\n        // Create a symbolic integer for n.\n        int n = Debug.makeSymbolicInteger(\"in\");\n        // Constrain n to small values to avoid deep recursion.\n        if(n < 0 || n > 10) {\n            return;\n        }\n        fib(n);\n    }\n}\n",
    "30": {
      "constants": "(declare-const in Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and  ( >=  in 0)  ( <=  in 10))  ( >  in 1))  ( >  ( -  in 1) 1))  ( >  ( -  ( -  in 1) 1) 1))  ( >  ( -  ( -  ( -  in 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1) 1)))",
      "response": "- Naive Fibonacci recursion has exponential time: T(n) = Theta(phi^n) \u2248 O(2^n).\n- For this specific program, n is constrained to 0 \u2264 n \u2264 10. Therefore, as a whole program over its allowed inputs, the worst-case runtime is bounded by a constant (n = 10), even though within that domain it still grows exponentially with n.\n\nBecause the program constrains n to [0,10], the SMT2 path condition for \u201cexecute fib\u201d together with n = 30 is unsatisfiable. A corresponding SMT2 script is:\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in () Int)\n(assert (and (<= 0 in) (<= in 10)))\n(assert (= in 30))\n(check-sat)\n(get-model)"
    },
    "16": {
      "constants": "(declare-const in Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and  ( >=  in 0)  ( <=  in 10))  ( >  in 1))  ( >  ( -  in 1) 1))  ( >  ( -  ( -  in 1) 1) 1))  ( >  ( -  ( -  ( -  in 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1) 1)))",
      "response": "- Worst-case time complexity: Exponential. Specifically, the naive recursive Fibonacci has T(n) = T(n\u22121) + T(n\u22122) + O(1), yielding \u0398(\u03c6^n) \u2248 O(2^n). Although this program constrains n to [0,10], the algorithm itself is exponential.\n\n- For input n = 16, the program will take the early return branch (since 16 > 10). The corresponding SMT2 path constraint is that n = 16 and (n < 0 \u2228 n > 10) holds.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const n Int)\n(assert (= n 16))\n(assert (or (< n 0) (> n 10)))\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const in Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and  ( >=  in 0)  ( <=  in 10))  ( >  in 1))  ( >  ( -  in 1) 1))  ( >  ( -  ( -  in 1) 1) 1))  ( >  ( -  ( -  ( -  in 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1) 1)))",
      "response": "- Worst-case time complexity:\n  - Asymptotically (for general n): exponential, \u0398(\u03c6^n) \u2248 O(2^n), due to the naive recursive definition T(n) = T(n\u22121) + T(n\u22122) + O(1).\n  - Space complexity: O(n) recursion depth.\n  - For this specific program (n constrained to 0..10), the runtime is bounded by a constant, but the algorithm itself remains exponential in n.\n\n- SMT2 constraint for input n = 8 (symbolic variable name is \"in\"):\n  - Must satisfy the guard: 0 \u2264 in \u2264 10\n  - And the concrete input: in = 8\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in () Int)\n(assert (>= in 0))\n(assert (<= in 10))\n(assert (= in 8))\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const in Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and  ( >=  in 0)  ( <=  in 10))  ( >  in 1))  ( >  ( -  in 1) 1))  ( >  ( -  ( -  in 1) 1) 1))  ( >  ( -  ( -  ( -  in 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1) 1)))",
      "response": "- Worst-case time complexity:\n  - The naive recursive Fibonacci algorithm runs in exponential time: \u0398(\u03c6^n) \u2248 O(1.618^n) (often upper-bounded as O(2^n)).\n  - Note: In this specific program, n is constrained to 0 \u2264 n \u2264 10, so the runtime is bounded by a constant (max at n=10). Asymptotically (without the cap), it\u2019s exponential.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in () Int)\n(assert (and (>= in 0) (<= in 10))) ; path condition to reach fib(n)\n(assert (= in 4))                    ; input size n = 4\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const in Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and  ( >=  in 0)  ( <=  in 10))  ( >  in 1))  ( >  ( -  in 1) 1))  ( >  ( -  ( -  in 1) 1) 1))  ( >  ( -  ( -  ( -  in 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1))  ( >  ( -  ( -  ( -  ( -  ( -  ( -  ( -  ( -  in 1) 1) 1) 1) 1) 1) 1) 1) 1)))",
      "response": "- Worst-case time complexity (as a function of n): \u0398(\u03c6^n) \u2248 O(2^n), due to the naive recursive recurrence T(n) = T(n\u22121) + T(n\u22122) + O(1).\n- Note: In this specific program, n is constrained to 0 \u2264 n \u2264 10, so the practical worst-case runtime is bounded by a constant. Asymptotically, however, it remains exponential.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in () Int)\n(assert (= in 2))\n(assert (>= in 0))\n(assert (<= in 10))\n(check-sat)\n(get-model)"
    }
  },
  "Collatz": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class Collatz {\n    public static int run(int[] nums) {\n        int maxSteps = 0;\n        for (int num : nums) {\n            int steps = 0;\n            int n = num;\n            while (n != 1 && n > 0) {\n                if (n % 2 == 0) {\n                    n = n / 2;\n                } else {\n                    n = 3 * n + 1;\n                }\n                steps++;\n            }\n            if (steps > maxSteps) {\n                maxSteps = steps;\n            }\n        }\n        return maxSteps;\n    }\n\n    public static void main(String[] args) {\n        final int N = Integer.parseInt(args[0]);\n        int[] nums = new int[N];\n        for (int i = 0; i < N; i++) {\n            nums[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n\n        run(nums);\n    }\n}\n",
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  ( mod  in0 2) 0)) (not ( = ( div  in0 2) 1)))  ( =  ( mod  ( div  in0 2) 2) 0)) (not ( = ( div  ( div  in0 2) 2) 1))) (not ( = in1 1)))  ( =  ( mod  in1 2) 0)) (not ( = ( div  in1 2) 1)))  ( =  ( mod  ( div  in1 2) 2) 0)) (not ( = ( div  ( div  in1 2) 2) 1))) (not ( = in2 1)))  ( =  ( mod  in2 2) 0)) (not ( = ( div  in2 2) 1)))  ( =  ( mod  ( div  in2 2) 2) 0)) (not ( = ( div  ( div  in2 2) 2) 1))) (not ( = in3 1)))  ( =  ( mod  in3 2) 0)) (not ( = ( div  in3 2) 1)))  ( =  ( mod  ( div  in3 2) 2) 0)) (not ( = ( div  ( div  in3 2) 2) 1))) (not ( = in4 1)))  ( =  ( mod  in4 2) 0)) (not ( = ( div  in4 2) 1)))  ( =  ( mod  ( div  in4 2) 2) 0)) (not ( = ( div  ( div  in4 2) 2) 1))) (not ( = in5 1)))  ( =  ( mod  in5 2) 0)) (not ( = ( div  in5 2) 1)))  ( =  ( mod  ( div  in5 2) 2) 0)) (not ( = ( div  ( div  in5 2) 2) 1))) (not ( = in6 1)))  ( =  ( mod  in6 2) 0)) (not ( = ( div  in6 2) 1)))  ( =  ( mod  ( div  in6 2) 2) 0)) (not ( = ( div  ( div  in6 2) 2) 1))) (not ( = in7 1)))  ( =  ( mod  in7 2) 0)) (not ( = ( div  in7 2) 1)))  ( =  ( mod  ( div  in7 2) 2) 0)) (not ( = ( div  ( div  in7 2) 2) 1))) (not ( = in8 1)))  ( =  ( mod  in8 2) 0)) (not ( = ( div  in8 2) 1)))  ( =  ( mod  ( div  in8 2) 2) 0)) (not ( = ( div  ( div  in8 2) 2) 1))) (not ( = in9 1)))  ( =  ( mod  in9 2) 0)) (not ( = ( div  in9 2) 1)))  ( =  ( mod  ( div  in9 2) 2) 0)) (not ( = ( div  ( div  in9 2) 2) 1))) (not ( = in10 1)))  ( =  ( mod  in10 2) 0)) (not ( = ( div  in10 2) 1)))  ( =  ( mod  ( div  in10 2) 2) 0)) (not ( = ( div  ( div  in10 2) 2) 1))) (not ( = in11 1)))  ( =  ( mod  in11 2) 0)) (not ( = ( div  in11 2) 1)))  ( =  ( mod  ( div  in11 2) 2) 0)) (not ( = ( div  ( div  in11 2) 2) 1))) (not ( = in12 1)))  ( =  ( mod  in12 2) 0)) (not ( = ( div  in12 2) 1)))  ( =  ( mod  ( div  in12 2) 2) 0)) (not ( = ( div  ( div  in12 2) 2) 1))) (not ( = in13 1)))  ( =  ( mod  in13 2) 0)) (not ( = ( div  in13 2) 1)))  ( =  ( mod  ( div  in13 2) 2) 0)) (not ( = ( div  ( div  in13 2) 2) 1))) (not ( = in14 1)))  ( =  ( mod  in14 2) 0)) (not ( = ( div  in14 2) 1)))  ( =  ( mod  ( div  in14 2) 2) 0)) (not ( = ( div  ( div  in14 2) 2) 1))) (not ( = in15 1)))  ( =  ( mod  in15 2) 0)) (not ( = ( div  in15 2) 1)))  ( =  ( mod  ( div  in15 2) 2) 0)) (not ( = ( div  ( div  in15 2) 2) 1))))",
      "response": "Time complexity:\n- Let n be the array length and let steps(x) be the number of Collatz steps until the loop stops for value x. The runtime is Theta(n + sum_i steps(nums[i])).\n- Worst case over fixed-width Java 32-bit ints: O(n), since steps(x) is bounded by a constant dependent on the 32-bit domain (though the constant can be very large). \n- If you parameterize by the magnitude of inputs and assume Collatz trajectories terminate, a common bound is O(n log V), where V is the maximum absolute value among the inputs. \n- Without assumptions on termination for arbitrary positive integers (Collatz conjecture), a tight asymptotic worst-case bound in terms of input magnitudes is unknown.\n\nSMT2 encoding (n = 16):\n- The following SMT-LIB2 script declares 16 integer inputs, defines the Collatz transition and a recursive function steps that matches the program\u2019s stopping condition (stop at n <= 1), constrains inputs to Java int range, and links m to be the maximum steps among the 16 inputs.\n\nAnswer:\n(set-logic ALL)\n(set-option :produce-models true)\n\n; Collatz next-state function reflecting the loop guard n > 0\n(define-fun collatz-next ((x Int)) Int\n  (ite (<= x 0)\n       x\n       (ite (= (mod x 2) 0)\n            (div x 2)\n            (+ (* 3 x) 1))))\n\n; Number of loop iterations until termination (stop when x <= 1)\n(define-fun-rec steps ((x Int)) Int\n  (ite (<= x 1)\n       0\n       (+ 1 (steps (collatz-next x)))))\n\n; 16 symbolic inputs (array length N = 16)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n\n; Constrain inputs to Java 32-bit int range\n(define-fun in-range ((x Int)) Bool\n  (and (<= (- 2147483648) x) (<= x 2147483647)))\n\n(assert (in-range in0))\n(assert (in-range in1))\n(assert (in-range in2))\n(assert (in-range in3))\n(assert (in-range in4))\n(assert (in-range in5))\n(assert (in-range in6))\n(assert (in-range in7))\n(assert (in-range in8))\n(assert (in-range in9))\n(assert (in-range in10))\n(assert (in-range in11))\n(assert (in-range in12))\n(assert (in-range in13))\n(assert (in-range in14))\n(assert (in-range in15))\n\n; m is the maximum steps among the 16 inputs (matches return value)\n(declare-fun m () Int)\n(assert (>= m (steps in0)))\n(assert (>= m (steps in1)))\n(assert (>= m (steps in2)))\n(assert (>= m (steps in3)))\n(assert (>= m (steps in4)))\n(assert (>= m (steps in5)))\n(assert (>= m (steps in6)))\n(assert (>= m (steps in7)))\n(assert (>= m (steps in8)))\n(assert (>= m (steps in9)))\n(assert (>= m (steps in10)))\n(assert (>= m (steps in11)))\n(assert (>= m (steps in12)))\n(assert (>= m (steps in13)))\n(assert (>= m (steps in14)))\n(assert (>= m (steps in15)))\n(assert (or (= m (steps in0))\n            (= m (steps in1))\n            (= m (steps in2))\n            (= m (steps in3))\n            (= m (steps in4))\n            (= m (steps in5))\n            (= m (steps in6))\n            (= m (steps in7))\n            (= m (steps in8))\n            (= m (steps in9))\n            (= m (steps in10))\n            (= m (steps in11))\n            (= m (steps in12))\n            (= m (steps in13))\n            (= m (steps in14))\n            (= m (steps in15))))"
    },
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  ( mod  in0 2) 0)) (not ( = ( div  in0 2) 1)))  ( =  ( mod  ( div  in0 2) 2) 0)) (not ( = ( div  ( div  in0 2) 2) 1))) (not ( = in1 1)))  ( =  ( mod  in1 2) 0)) (not ( = ( div  in1 2) 1)))  ( =  ( mod  ( div  in1 2) 2) 0)) (not ( = ( div  ( div  in1 2) 2) 1))) (not ( = in2 1)))  ( =  ( mod  in2 2) 0)) (not ( = ( div  in2 2) 1)))  ( =  ( mod  ( div  in2 2) 2) 0)) (not ( = ( div  ( div  in2 2) 2) 1))) (not ( = in3 1)))  ( =  ( mod  in3 2) 0)) (not ( = ( div  in3 2) 1)))  ( =  ( mod  ( div  in3 2) 2) 0)) (not ( = ( div  ( div  in3 2) 2) 1))))",
      "response": "Time complexity:\n- If you measure time only in terms of the array length N under Java\u2019s 32-bit int semantics, the worst-case time is O(N). Reason: for any 32-bit int, the loop either reaches 1 or overflows to a non-positive number in a bounded number of steps, so each element contributes at most a constant number of iterations.\n- If you ignore Java overflow and measure in terms of the magnitude of the inputs, the time is O(N \u00b7 S(U)), where U = max(nums) and S(U) is the maximal Collatz stopping time up to U. Heuristically S(U) = Theta(log U), giving O(N log U); a tight worst-case bound is unknown (it depends on the Collatz conjecture).\n\nSMT2 constraint for input size n = 4 (four symbolic 32-bit Java ints, all forced to enter the loop at least once by being > 1):\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(assert (and (> in0 1) (<= in0 2147483647)))\n(assert (and (> in1 1) (<= in1 2147483647)))\n(assert (and (> in2 1) (<= in2 2147483647)))\n(assert (and (> in3 1) (<= in3 2147483647)))"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  ( mod  in0 2) 0)) (not ( = ( div  in0 2) 1)))  ( =  ( mod  ( div  in0 2) 2) 0)) (not ( = ( div  ( div  in0 2) 2) 1))) (not ( = in1 1)))  ( =  ( mod  in1 2) 0)) (not ( = ( div  in1 2) 1)))  ( =  ( mod  ( div  in1 2) 2) 0)) (not ( = ( div  ( div  in1 2) 2) 1))) (not ( = in2 1)))  ( =  ( mod  in2 2) 0)) (not ( = ( div  in2 2) 1)))  ( =  ( mod  ( div  in2 2) 2) 0)) (not ( = ( div  ( div  in2 2) 2) 1))) (not ( = in3 1)))  ( =  ( mod  in3 2) 0)) (not ( = ( div  in3 2) 1)))  ( =  ( mod  ( div  in3 2) 2) 0)) (not ( = ( div  ( div  in3 2) 2) 1))) (not ( = in4 1)))  ( =  ( mod  in4 2) 0)) (not ( = ( div  in4 2) 1)))  ( =  ( mod  ( div  in4 2) 2) 0)) (not ( = ( div  ( div  in4 2) 2) 1))) (not ( = in5 1)))  ( =  ( mod  in5 2) 0)) (not ( = ( div  in5 2) 1)))  ( =  ( mod  ( div  in5 2) 2) 0)) (not ( = ( div  ( div  in5 2) 2) 1))) (not ( = in6 1)))  ( =  ( mod  in6 2) 0)) (not ( = ( div  in6 2) 1)))  ( =  ( mod  ( div  in6 2) 2) 0)) (not ( = ( div  ( div  in6 2) 2) 1))) (not ( = in7 1)))  ( =  ( mod  in7 2) 0)) (not ( = ( div  in7 2) 1)))  ( =  ( mod  ( div  in7 2) 2) 0)) (not ( = ( div  ( div  in7 2) 2) 1))))",
      "response": "Time complexity:\n- The outer loop runs N times (once per array element).\n- For each element, the inner while-loop executes a number of iterations equal to the Collatz \u201cstopping time\u201d for that element (or until 32-bit overflow makes n \u2264 0).\n- In Java with 32-bit ints, that stopping time is bounded by a constant over the finite domain of int values, so the worst-case time is O(N).\n\nNote: If you modeled numbers with unbounded precision instead of 32-bit ints, the runtime would be O(N \u00b7 T(M)), where T(M) is the Collatz stopping time for the maximum input magnitude M; empirically T(M) grows roughly like O(log M), but no tight proven bound is known.\n\nAnswer:\n(set-logic QF_BV)\n(declare-fun in0 () (_ BitVec 32))\n(declare-fun in1 () (_ BitVec 32))\n(declare-fun in2 () (_ BitVec 32))\n(declare-fun in3 () (_ BitVec 32))\n(declare-fun in4 () (_ BitVec 32))\n(declare-fun in5 () (_ BitVec 32))\n(declare-fun in6 () (_ BitVec 32))\n(declare-fun in7 () (_ BitVec 32))\n(check-sat)\n(get-model)"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  ( mod  in0 2) 0)) (not ( = ( div  in0 2) 1)))  ( =  ( mod  ( div  in0 2) 2) 0)) (not ( = ( div  ( div  in0 2) 2) 1))) (not ( = in1 1)))  ( =  ( mod  in1 2) 0)) (not ( = ( div  in1 2) 1)))  ( =  ( mod  ( div  in1 2) 2) 0)) (not ( = ( div  ( div  in1 2) 2) 1))) (not ( = in2 1)))  ( =  ( mod  in2 2) 0)) (not ( = ( div  in2 2) 1)))  ( =  ( mod  ( div  in2 2) 2) 0)) (not ( = ( div  ( div  in2 2) 2) 1))) (not ( = in3 1)))  ( =  ( mod  in3 2) 0)) (not ( = ( div  in3 2) 1)))  ( =  ( mod  ( div  in3 2) 2) 0)) (not ( = ( div  ( div  in3 2) 2) 1))) (not ( = in4 1)))  ( =  ( mod  in4 2) 0)) (not ( = ( div  in4 2) 1)))  ( =  ( mod  ( div  in4 2) 2) 0)) (not ( = ( div  ( div  in4 2) 2) 1))) (not ( = in5 1)))  ( =  ( mod  in5 2) 0)) (not ( = ( div  in5 2) 1)))  ( =  ( mod  ( div  in5 2) 2) 0)) (not ( = ( div  ( div  in5 2) 2) 1))) (not ( = in6 1)))  ( =  ( mod  in6 2) 0)) (not ( = ( div  in6 2) 1)))  ( =  ( mod  ( div  in6 2) 2) 0)) (not ( = ( div  ( div  in6 2) 2) 1))) (not ( = in7 1)))  ( =  ( mod  in7 2) 0)) (not ( = ( div  in7 2) 1)))  ( =  ( mod  ( div  in7 2) 2) 0)) (not ( = ( div  ( div  in7 2) 2) 1))) (not ( = in8 1)))  ( =  ( mod  in8 2) 0)) (not ( = ( div  in8 2) 1)))  ( =  ( mod  ( div  in8 2) 2) 0)) (not ( = ( div  ( div  in8 2) 2) 1))) (not ( = in9 1)))  ( =  ( mod  in9 2) 0)) (not ( = ( div  in9 2) 1)))  ( =  ( mod  ( div  in9 2) 2) 0)) (not ( = ( div  ( div  in9 2) 2) 1))) (not ( = in10 1)))  ( =  ( mod  in10 2) 0)) (not ( = ( div  in10 2) 1)))  ( =  ( mod  ( div  in10 2) 2) 0)) (not ( = ( div  ( div  in10 2) 2) 1))) (not ( = in11 1)))  ( =  ( mod  in11 2) 0)) (not ( = ( div  in11 2) 1)))  ( =  ( mod  ( div  in11 2) 2) 0)) (not ( = ( div  ( div  in11 2) 2) 1))) (not ( = in12 1)))  ( =  ( mod  in12 2) 0)) (not ( = ( div  in12 2) 1)))  ( =  ( mod  ( div  in12 2) 2) 0)) (not ( = ( div  ( div  in12 2) 2) 1))) (not ( = in13 1)))  ( =  ( mod  in13 2) 0)) (not ( = ( div  in13 2) 1)))  ( =  ( mod  ( div  in13 2) 2) 0)) (not ( = ( div  ( div  in13 2) 2) 1))) (not ( = in14 1)))  ( =  ( mod  in14 2) 0)) (not ( = ( div  in14 2) 1)))  ( =  ( mod  ( div  in14 2) 2) 0)) (not ( = ( div  ( div  in14 2) 2) 1))) (not ( = in15 1)))  ( =  ( mod  in15 2) 0)) (not ( = ( div  in15 2) 1)))  ( =  ( mod  ( div  in15 2) 2) 0)) (not ( = ( div  ( div  in15 2) 2) 1))) (not ( = in16 1)))  ( =  ( mod  in16 2) 0)) (not ( = ( div  in16 2) 1)))  ( =  ( mod  ( div  in16 2) 2) 0)) (not ( = ( div  ( div  in16 2) 2) 1))) (not ( = in17 1)))  ( =  ( mod  in17 2) 0)) (not ( = ( div  in17 2) 1)))  ( =  ( mod  ( div  in17 2) 2) 0)) (not ( = ( div  ( div  in17 2) 2) 1))) (not ( = in18 1)))  ( =  ( mod  in18 2) 0)) (not ( = ( div  in18 2) 1)))  ( =  ( mod  ( div  in18 2) 2) 0)) (not ( = ( div  ( div  in18 2) 2) 1))) (not ( = in19 1)))  ( =  ( mod  in19 2) 0)) (not ( = ( div  in19 2) 1)))  ( =  ( mod  ( div  in19 2) 2) 0)) (not ( = ( div  ( div  in19 2) 2) 1))) (not ( = in20 1)))  ( =  ( mod  in20 2) 0)) (not ( = ( div  in20 2) 1)))  ( =  ( mod  ( div  in20 2) 2) 0)) (not ( = ( div  ( div  in20 2) 2) 1))) (not ( = in21 1)))  ( =  ( mod  in21 2) 0)) (not ( = ( div  in21 2) 1)))  ( =  ( mod  ( div  in21 2) 2) 0)) (not ( = ( div  ( div  in21 2) 2) 1))) (not ( = in22 1)))  ( =  ( mod  in22 2) 0)) (not ( = ( div  in22 2) 1)))  ( =  ( mod  ( div  in22 2) 2) 0)) (not ( = ( div  ( div  in22 2) 2) 1))) (not ( = in23 1)))  ( =  ( mod  in23 2) 0)) (not ( = ( div  in23 2) 1)))  ( =  ( mod  ( div  in23 2) 2) 0)) (not ( = ( div  ( div  in23 2) 2) 1))) (not ( = in24 1)))  ( =  ( mod  in24 2) 0)) (not ( = ( div  in24 2) 1)))  ( =  ( mod  ( div  in24 2) 2) 0)) (not ( = ( div  ( div  in24 2) 2) 1))) (not ( = in25 1)))  ( =  ( mod  in25 2) 0)) (not ( = ( div  in25 2) 1)))  ( =  ( mod  ( div  in25 2) 2) 0)) (not ( = ( div  ( div  in25 2) 2) 1))) (not ( = in26 1)))  ( =  ( mod  in26 2) 0)) (not ( = ( div  in26 2) 1)))  ( =  ( mod  ( div  in26 2) 2) 0)) (not ( = ( div  ( div  in26 2) 2) 1))) (not ( = in27 1)))  ( =  ( mod  in27 2) 0)) (not ( = ( div  in27 2) 1)))  ( =  ( mod  ( div  in27 2) 2) 0)) (not ( = ( div  ( div  in27 2) 2) 1))) (not ( = in28 1)))  ( =  ( mod  in28 2) 0)) (not ( = ( div  in28 2) 1)))  ( =  ( mod  ( div  in28 2) 2) 0)) (not ( = ( div  ( div  in28 2) 2) 1))) (not ( = in29 1)))  ( =  ( mod  in29 2) 0)) (not ( = ( div  in29 2) 1)))  ( =  ( mod  ( div  in29 2) 2) 0)) (not ( = ( div  ( div  in29 2) 2) 1))))",
      "response": "Time complexity:\n- Let N be the array length. For each element, the loop performs the Collatz iteration until n == 1 or n becomes non-positive (overflow stops the loop in Java\u2019s 32-bit int semantics). Because Java ints are fixed-width, the number of steps per element is bounded by a constant that depends only on 32-bit width. Therefore, the worst-case time complexity as a function of N is O(N).\n- If you instead analyze with unbounded integers parameterized by the magnitude M of the inputs, the cost per element equals its Collatz stopping time; without assuming the Collatz conjecture you can only express it as O(sum_i T(nums[i])). Under the common heuristic, it behaves roughly O(N log M).\n\nSMT2 constraint (n = 30):\n- Below, we declare 30 inputs in0..in29 as 32-bit signed integers, and constrain each to be a positive odd integer (> 1). This avoids trivial immediate termination (n \u2264 1) and steers execution into the loop, tending toward higher iteration counts.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n(declare-fun in18 () Int)\n(declare-fun in19 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in22 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n(declare-fun in28 () Int)\n(declare-fun in29 () Int)\n\n(assert (and (>= in0 2) (<= in0 2147483647) (= (mod in0 2) 1)))\n(assert (and (>= in1 2) (<= in1 2147483647) (= (mod in1 2) 1)))\n(assert (and (>= in2 2) (<= in2 2147483647) (= (mod in2 2) 1)))\n(assert (and (>= in3 2) (<= in3 2147483647) (= (mod in3 2) 1)))\n(assert (and (>= in4 2) (<= in4 2147483647) (= (mod in4 2) 1)))\n(assert (and (>= in5 2) (<= in5 2147483647) (= (mod in5 2) 1)))\n(assert (and (>= in6 2) (<= in6 2147483647) (= (mod in6 2) 1)))\n(assert (and (>= in7 2) (<= in7 2147483647) (= (mod in7 2) 1)))\n(assert (and (>= in8 2) (<= in8 2147483647) (= (mod in8 2) 1)))\n(assert (and (>= in9 2) (<= in9 2147483647) (= (mod in9 2) 1)))\n(assert (and (>= in10 2) (<= in10 2147483647) (= (mod in10 2) 1)))\n(assert (and (>= in11 2) (<= in11 2147483647) (= (mod in11 2) 1)))\n(assert (and (>= in12 2) (<= in12 2147483647) (= (mod in12 2) 1)))\n(assert (and (>= in13 2) (<= in13 2147483647) (= (mod in13 2) 1)))\n(assert (and (>= in14 2) (<= in14 2147483647) (= (mod in14 2) 1)))\n(assert (and (>= in15 2) (<= in15 2147483647) (= (mod in15 2) 1)))\n(assert (and (>= in16 2) (<= in16 2147483647) (= (mod in16 2) 1)))\n(assert (and (>= in17 2) (<= in17 2147483647) (= (mod in17 2) 1)))\n(assert (and (>= in18 2) (<= in18 2147483647) (= (mod in18 2) 1)))\n(assert (and (>= in19 2) (<= in19 2147483647) (= (mod in19 2) 1)))\n(assert (and (>= in20 2) (<= in20 2147483647) (= (mod in20 2) 1)))\n(assert (and (>= in21 2) (<= in21 2147483647) (= (mod in21 2) 1)))\n(assert (and (>= in22 2) (<= in22 2147483647) (= (mod in22 2) 1)))\n(assert (and (>= in23 2) (<= in23 2147483647) (= (mod in23 2) 1)))\n(assert (and (>= in24 2) (<= in24 2147483647) (= (mod in24 2) 1)))\n(assert (and (>= in25 2) (<= in25 2147483647) (= (mod in25 2) 1)))\n(assert (and (>= in26 2) (<= in26 2147483647) (= (mod in26 2) 1)))\n(assert (and (>= in27 2) (<= in27 2147483647) (= (mod in27 2) 1)))\n(assert (and (>= in28 2) (<= in28 2147483647) (= (mod in28 2) 1)))\n(assert (and (>= in29 2) (<= in29 2147483647) (= (mod in29 2) 1)))\n\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  ( mod  in0 2) 0)) (not ( = ( div  in0 2) 1)))  ( =  ( mod  ( div  in0 2) 2) 0)) (not ( = ( div  ( div  in0 2) 2) 1))) (not ( = in1 1)))  ( =  ( mod  in1 2) 0)) (not ( = ( div  in1 2) 1)))  ( =  ( mod  ( div  in1 2) 2) 0)) (not ( = ( div  ( div  in1 2) 2) 1))))",
      "response": "Time complexity:\n- Let N be the number of inputs (length of nums). Each element performs a Collatz loop until n == 1 or n <= 0. With Java 32-bit signed ints, the number of iterations per element is bounded by a constant (values can overflow to negative and terminate, and the 32-bit domain is finite). Therefore the worst-case time complexity with respect to N is O(N).\n- Note: If one modeled unbounded mathematical integers instead of 32-bit Java ints, the runtime would be proportional to the sum of Collatz stopping times of the inputs, which has no proven asymptotic bound; but for this Java program, O(N) is the appropriate worst-case bound.\n\nSMT2 constraint for input size N = 2:\n- The program creates two symbolic integers named \"in0\" and \"in1\". A simple, corresponding SMT-LIB2 specification declares those as 32-bit bit-vectors (to match Java int) and, optionally, constrains them to be > 1 so the loop actually executes at least once.\n\nAnswer:\n(set-logic QF_BV)\n(declare-fun in0 () (_ BitVec 32))\n(declare-fun in1 () (_ BitVec 32))\n; Ensure both inputs are > 1 (so the loop runs)\n(assert (bvsgt in0 #x00000001))\n(assert (bvsgt in1 #x00000001))\n; Optionally, force the first step to take the odd branch (often increases steps)\n(assert (= (bvand in0 #x00000001) #x00000001))\n(assert (= (bvand in1 #x00000001) #x00000001))"
    }
  },
  "KnapsackSolver": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class KnapsackSolver {\n    public static int knapsack(int[] weights, int[] values, int n, int capacity) {\n        if (n == 0 || capacity == 0) return 0;\n        if (weights[n-1] > capacity) {\n            return knapsack(weights, values, n - 1, capacity);\n        } else {\n            int include = values[n-1] + knapsack(weights, values, n - 1, capacity - weights[n-1]);\n            int exclude = knapsack(weights, values, n - 1, capacity);\n            return (include > exclude) ? include : exclude;\n        }\n    }\n    \n    public static void main(String[] args) {\n        int n = 3; // Fixed number of items.\n        int[] weights = new int[n];\n        int[] values = new int[n];\n        \n        for (int i = 0; i < n; i++){\n            weights[i] = Debug.makeSymbolicInteger(\"w\" + i);\n            values[i] = Debug.makeSymbolicInteger(\"v\" + i);\n        }\n        \n        int capacity = Debug.makeSymbolicInteger(\"c\");\n\n        \n        knapsack(weights, values, n, capacity);\n\n    }\n}\n",
    "16": {
      "constants": "(declare-const c Int)\n(declare-const w0 Int)\n(declare-const v0 Int)\n(declare-const w1 Int)\n(declare-const v1 Int)\n(declare-const w2 Int)\n(declare-const v2 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = c 0))  ( <=  w2 c)) (not ( = ( -  c w2) 0)))  ( <=  w1 ( -  c w2))) (not ( = ( -  ( -  c w2) w1) 0)))  ( >  w0 ( -  ( -  c w2) w1)))  ( >  w0 ( -  c w2)))  ( >  v1 0))  ( <=  w1 c)) (not ( = ( -  c w1) 0)))  ( >  w0 ( -  c w1)))  ( <=  w0 c))  ( >  v0 0))  ( >  v1 v0))  ( >  ( +  v1 v2) v1)))",
      "response": "- Worst-case time complexity: O(2^n)\n- Auxiliary space complexity (recursion): O(n)\n\nReason: The recursive algorithm explores both \u201cinclude\u201d and \u201cexclude\u201d branches whenever weights[i] <= current capacity. In the worst case, this happens at every level, yielding a full binary recursion tree with 2^n leaves.\n\nA simple sufficient SMT2 constraint to force the worst-case (both branches taken at every level) is to make the capacity at least the sum of all weights. For n = 16, using the same symbolic names as in your code (w0..w15, v0..v15, c), one such SMT2 instance is:\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const c Int)\n(declare-const w0 Int)\n(declare-const w1 Int)\n(declare-const w2 Int)\n(declare-const w3 Int)\n(declare-const w4 Int)\n(declare-const w5 Int)\n(declare-const w6 Int)\n(declare-const w7 Int)\n(declare-const w8 Int)\n(declare-const w9 Int)\n(declare-const w10 Int)\n(declare-const w11 Int)\n(declare-const w12 Int)\n(declare-const w13 Int)\n(declare-const w14 Int)\n(declare-const w15 Int)\n(declare-const v0 Int)\n(declare-const v1 Int)\n(declare-const v2 Int)\n(declare-const v3 Int)\n(declare-const v4 Int)\n(declare-const v5 Int)\n(declare-const v6 Int)\n(declare-const v7 Int)\n(declare-const v8 Int)\n(declare-const v9 Int)\n(declare-const v10 Int)\n(declare-const v11 Int)\n(declare-const v12 Int)\n(declare-const v13 Int)\n(declare-const v14 Int)\n(declare-const v15 Int)\n(assert (and\n  (>= c 0)\n  (>= w0 1) (>= w1 1) (>= w2 1) (>= w3 1)\n  (>= w4 1) (>= w5 1) (>= w6 1) (>= w7 1)\n  (>= w8 1) (>= w9 1) (>= w10 1) (>= w11 1)\n  (>= w12 1) (>= w13 1) (>= w14 1) (>= w15 1)\n  (>= c (+ w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15))\n))"
    },
    "30": {
      "constants": "(declare-const c Int)\n(declare-const w0 Int)\n(declare-const v0 Int)\n(declare-const w1 Int)\n(declare-const v1 Int)\n(declare-const w2 Int)\n(declare-const v2 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = c 0))  ( <=  w2 c)) (not ( = ( -  c w2) 0)))  ( <=  w1 ( -  c w2))) (not ( = ( -  ( -  c w2) w1) 0)))  ( >  w0 ( -  ( -  c w2) w1)))  ( >  w0 ( -  c w2)))  ( >  v1 0))  ( <=  w1 c)) (not ( = ( -  c w1) 0)))  ( >  w0 ( -  c w1)))  ( <=  w0 c))  ( >  v0 0))  ( >  v1 v0))  ( >  ( +  v1 v2) v1)))",
      "response": "Worst\u2011case time complexity: O(2^n)\n\nReason: The recursive 0/1 knapsack without memoization branches into \u201cinclude\u201d and \u201cexclude\u201d when weights[n-1] \u2264 capacity, yielding T(n) = 2\u00b7T(n\u22121) + O(1) \u21d2 O(2^n). A worst-case input is when this condition holds at every level, for example all weights are 0 and capacity \u2265 0, which forces full binary branching at each step.\n\nAnswer:\n(set-logic QF_LIA)\n; capacity\n(declare-fun c () Int)\n\n; weights w0..w29\n(declare-fun w0 () Int)\n(declare-fun w1 () Int)\n(declare-fun w2 () Int)\n(declare-fun w3 () Int)\n(declare-fun w4 () Int)\n(declare-fun w5 () Int)\n(declare-fun w6 () Int)\n(declare-fun w7 () Int)\n(declare-fun w8 () Int)\n(declare-fun w9 () Int)\n(declare-fun w10 () Int)\n(declare-fun w11 () Int)\n(declare-fun w12 () Int)\n(declare-fun w13 () Int)\n(declare-fun w14 () Int)\n(declare-fun w15 () Int)\n(declare-fun w16 () Int)\n(declare-fun w17 () Int)\n(declare-fun w18 () Int)\n(declare-fun w19 () Int)\n(declare-fun w20 () Int)\n(declare-fun w21 () Int)\n(declare-fun w22 () Int)\n(declare-fun w23 () Int)\n(declare-fun w24 () Int)\n(declare-fun w25 () Int)\n(declare-fun w26 () Int)\n(declare-fun w27 () Int)\n(declare-fun w28 () Int)\n(declare-fun w29 () Int)\n\n; values v0..v29 (do not affect branching; left unconstrained)\n(declare-fun v0 () Int)\n(declare-fun v1 () Int)\n(declare-fun v2 () Int)\n(declare-fun v3 () Int)\n(declare-fun v4 () Int)\n(declare-fun v5 () Int)\n(declare-fun v6 () Int)\n(declare-fun v7 () Int)\n(declare-fun v8 () Int)\n(declare-fun v9 () Int)\n(declare-fun v10 () Int)\n(declare-fun v11 () Int)\n(declare-fun v12 () Int)\n(declare-fun v13 () Int)\n(declare-fun v14 () Int)\n(declare-fun v15 () Int)\n(declare-fun v16 () Int)\n(declare-fun v17 () Int)\n(declare-fun v18 () Int)\n(declare-fun v19 () Int)\n(declare-fun v20 () Int)\n(declare-fun v21 () Int)\n(declare-fun v22 () Int)\n(declare-fun v23 () Int)\n(declare-fun v24 () Int)\n(declare-fun v25 () Int)\n(declare-fun v26 () Int)\n(declare-fun v27 () Int)\n(declare-fun v28 () Int)\n(declare-fun v29 () Int)\n\n; Worst-case branching constraints: all weights are 0 and capacity >= 0\n(assert (>= c 0))\n(assert (= w0 0))\n(assert (= w1 0))\n(assert (= w2 0))\n(assert (= w3 0))\n(assert (= w4 0))\n(assert (= w5 0))\n(assert (= w6 0))\n(assert (= w7 0))\n(assert (= w8 0))\n(assert (= w9 0))\n(assert (= w10 0))\n(assert (= w11 0))\n(assert (= w12 0))\n(assert (= w13 0))\n(assert (= w14 0))\n(assert (= w15 0))\n(assert (= w16 0))\n(assert (= w17 0))\n(assert (= w18 0))\n(assert (= w19 0))\n(assert (= w20 0))\n(assert (= w21 0))\n(assert (= w22 0))\n(assert (= w23 0))\n(assert (= w24 0))\n(assert (= w25 0))\n(assert (= w26 0))\n(assert (= w27 0))\n(assert (= w28 0))\n(assert (= w29 0))\n\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const c Int)\n(declare-const w0 Int)\n(declare-const v0 Int)\n(declare-const w1 Int)\n(declare-const v1 Int)\n(declare-const w2 Int)\n(declare-const v2 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = c 0))  ( <=  w2 c)) (not ( = ( -  c w2) 0)))  ( <=  w1 ( -  c w2))) (not ( = ( -  ( -  c w2) w1) 0)))  ( >  w0 ( -  ( -  c w2) w1)))  ( >  w0 ( -  c w2)))  ( >  v1 0))  ( <=  w1 c)) (not ( = ( -  c w1) 0)))  ( >  w0 ( -  c w1)))  ( <=  w0 c))  ( >  v0 0))  ( >  v1 v0))  ( >  ( +  v1 v2) v1)))",
      "response": "- Worst-case time complexity: O(2^n) recursive calls (specifically 2^(n+1) - 1 calls), with O(n) stack space.\n- Intuition: In the worst case (e.g., all weights are small enough so the \u201cweights[n-1] > capacity\u201d check is always false), the function explores both include and exclude branches at every level.\n\nSMT2 constraint for n = 4 that forces the worst-case branching (i.e., the weight-capacity check is always false along all recursive branches):\n- Ensure all weights are positive.\n- Ensure capacity is at least the sum of all weights so that every item can still fit regardless of previous choices.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const w0 Int)\n(declare-const w1 Int)\n(declare-const w2 Int)\n(declare-const w3 Int)\n(declare-const v0 Int)\n(declare-const v1 Int)\n(declare-const v2 Int)\n(declare-const v3 Int)\n(declare-const c Int)\n(assert (and\n  (>= w0 1) (>= w1 1) (>= w2 1) (>= w3 1)\n  (> c 0)\n  (>= c (+ w0 w1 w2 w3))\n))\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const c Int)\n(declare-const w0 Int)\n(declare-const v0 Int)\n(declare-const w1 Int)\n(declare-const v1 Int)\n(declare-const w2 Int)\n(declare-const v2 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = c 0))  ( <=  w2 c)) (not ( = ( -  c w2) 0)))  ( <=  w1 ( -  c w2))) (not ( = ( -  ( -  c w2) w1) 0)))  ( >  w0 ( -  ( -  c w2) w1)))  ( >  w0 ( -  c w2)))  ( >  v1 0))  ( <=  w1 c)) (not ( = ( -  c w1) 0)))  ( >  w0 ( -  c w1)))  ( <=  w0 c))  ( >  v0 0))  ( >  v1 v0))  ( >  ( +  v1 v2) v1)))",
      "response": "- Worst-case time complexity: O(2^n). At each item the solver explores two branches (include/exclude) in the worst case (when the item\u2019s weight is not greater than the current capacity), leading to a full binary recursion tree without memoization. Space complexity is O(n) due to recursion depth.\n\n- SMT2 constraint for n = 8 that guarantees the worst-case branching (i.e., both include/exclude branches are always feasible): make all weights positive and set capacity at least the sum of all weights so that at every recursive call weights[i] <= current capacity regardless of previous choices.\n\nAnswer:\n(set-logic QF_LIA)\n\n(declare-fun w0 () Int)\n(declare-fun w1 () Int)\n(declare-fun w2 () Int)\n(declare-fun w3 () Int)\n(declare-fun w4 () Int)\n(declare-fun w5 () Int)\n(declare-fun w6 () Int)\n(declare-fun w7 () Int)\n\n(declare-fun v0 () Int)\n(declare-fun v1 () Int)\n(declare-fun v2 () Int)\n(declare-fun v3 () Int)\n(declare-fun v4 () Int)\n(declare-fun v5 () Int)\n(declare-fun v6 () Int)\n(declare-fun v7 () Int)\n\n(declare-fun c () Int)\n\n(assert\n  (and\n    (>= w0 1) (>= w1 1) (>= w2 1) (>= w3 1)\n    (>= w4 1) (>= w5 1) (>= w6 1) (>= w7 1)\n    (>= v0 0) (>= v1 0) (>= v2 0) (>= v3 0)\n    (>= v4 0) (>= v5 0) (>= v6 0) (>= v7 0)\n    (>= c (+ w0 w1 w2 w3 w4 w5 w6 w7))\n  )\n)\n\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const c Int)\n(declare-const w0 Int)\n(declare-const v0 Int)\n(declare-const w1 Int)\n(declare-const v1 Int)\n(declare-const w2 Int)\n(declare-const v2 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = c 0))  ( <=  w2 c)) (not ( = ( -  c w2) 0)))  ( <=  w1 ( -  c w2))) (not ( = ( -  ( -  c w2) w1) 0)))  ( >  w0 ( -  ( -  c w2) w1)))  ( >  w0 ( -  c w2)))  ( >  v1 0))  ( <=  w1 c)) (not ( = ( -  c w1) 0)))  ( >  w0 ( -  c w1)))  ( <=  w0 c))  ( >  v0 0))  ( >  v1 v0))  ( >  ( +  v1 v2) v1)))",
      "response": "- Worst-case time complexity: O(2^n). This happens when at every level the item can fit in the current capacity so the algorithm explores both the \u201cinclude\u201d and \u201cexclude\u201d branches, yielding a full binary recursion tree. The recursion depth is n, so auxiliary space is O(n).\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun w0 () Int)\n(declare-fun w1 () Int)\n(declare-fun v0 () Int)\n(declare-fun v1 () Int)\n(declare-fun c () Int)\n; Worst-case branching conditions for n = 2:\n; Top-level (n=2) must branch:\n(assert (> c 0))\n(assert (<= w1 c))\n; Include-branch call (n=1, capacity = c - w1) must also branch:\n(assert (> (- c w1) 0))\n(assert (<= w0 (- c w1)))\n; Exclude-branch call (n=1, capacity = c) must also branch:\n(assert (<= w0 c))"
    }
  },
  "MergeSort": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class MergeSort {\n    public static void mergeSort(int[] arr, int l, int r) {\n        if (l < r) {\n            int m = (l + r) / 2;\n            mergeSort(arr, l, m);\n            mergeSort(arr, m + 1, r);\n            merge(arr, l, m, r);\n        }\n    }\n    \n    public static void merge(int[] arr, int l, int m, int r) {\n        int n1 = m - l + 1;\n        int n2 = r - m;\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            L[i] = arr[l + i];\n        }\n        for (int j = 0; j < n2; j++) {\n            R[j] = arr[m + 1 + j];\n        }\n        \n        int i = 0, j = 0, k = l;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k++] = L[i++];\n            } else {\n                arr[k++] = R[j++];\n            }\n        }\n        while (i < n1) {\n            arr[k++] = L[i++];\n        }\n        while (j < n2) {\n            arr[k++] = R[j++];\n        }\n    }\n    \n    public static void main(String[] args) {\n        int N = Integer.parseInt(args[0]);\n        int[] arr = new int[N];\n        for (int i = 0; i < N; i++){\n            arr[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n        \n        mergeSort(arr, 0, N - 1);\n    }\n}\n",
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert  ( <=  in0 in1))",
      "response": "- Worst-case time complexity: O(n log n)\n  - Recurrence: T(n) = 2T(n/2) + Theta(n)\n  - This implementation always splits and merges, so best-, average-, and worst-case are all O(n log n).\n  - Extra space complexity: O(n) for the temporary arrays L and R.\n\nFor input size n = 2, mergeSort will compare the two symbolic inputs once in the merge step, leading to two feasible path conditions:\n- Path 1: in0 <= in1\n- Path 2: in0 > in1\n\nBelow is a minimal SMT-LIB2 script encoding one concrete path condition (choose either). For example, to drive the else-branch (in0 > in1):\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(assert (> in0 in1))\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and  ( <=  in0 in1)  ( <=  in2 in3))  ( <=  in0 in2))  ( <=  in1 in2)))",
      "response": "Worst-case time complexity: O(n log n). This top\u2011down merge sort performs O(n log n) comparisons/moves in the worst case; the linear-time work of building the temporary arrays and merging at each level yields the same complexity.\n\nFor n = 4, a sufficient condition to realize the worst-case merge at the top level (i.e., 3 comparisons for merging two size-2 runs) is to force the two sorted halves to interleave: let L = sort(in0, in1) = [l0, l1] and R = sort(in2, in3) = [r0, r1]; require l0 <= r0 < l1 <= r1. The SMT2 below encodes this, including how l0, l1, r0, r1 relate to the inputs.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const l0 Int)\n(declare-const l1 Int)\n(declare-const r0 Int)\n(declare-const r1 Int)\n; left half sorted values\n(assert (or (and (<= in0 in1) (= l0 in0) (= l1 in1))\n            (and (< in1 in0) (= l0 in1) (= l1 in0))))\n; right half sorted values\n(assert (or (and (<= in2 in3) (= r0 in2) (= r1 in3))\n            (and (< in3 in2) (= r0 in3) (= r1 in2))))\n; force maximal interleaving at final merge: l0 <= r0 < l1 <= r1\n(assert (<= l0 r0))\n(assert (< r0 l1))\n(assert (<= l1 r1))\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <=  in0 in1)  ( <=  in2 in3))  ( <=  in0 in2))  ( <=  in1 in2))  ( <=  in4 in5))  ( <=  in6 in7))  ( <=  in4 in6))  ( <=  in5 in6))  ( <=  in0 in4))  ( <=  in1 in4))  ( <=  in2 in4))  ( <=  in3 in4)))",
      "response": "- Worst-case time complexity: O(n log n)\n- For n = 8, one way to force the worst-case path (maximal comparisons at every merge) is to ensure the globally sorted order alternates between the left and right halves at the top level, and similarly alternates within each half at the next level. The following SMT-LIB v2 constraints do that by imposing a strict total order on the symbolic inputs in bit-reversal order, which guarantees interleaving at all merge levels.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(assert (and\n  (< in0 in4)\n  (< in4 in2)\n  (< in2 in6)\n  (< in6 in1)\n  (< in1 in5)\n  (< in5 in3)\n  (< in3 in7)\n))\n(check-sat)\n(get-model)"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <=  in0 in1)  ( <=  in2 in3))  ( <=  in0 in2))  ( <=  in1 in2))  ( <=  in4 in5))  ( <=  in6 in7))  ( <=  in4 in6))  ( <=  in5 in6))  ( <=  in0 in4))  ( <=  in1 in4))  ( <=  in2 in4))  ( <=  in3 in4))  ( <=  in8 in9))  ( <=  in10 in11))  ( <=  in8 in10))  ( <=  in9 in10))  ( <=  in12 in13))  ( <=  in12 in14))  ( <=  in13 in14))  ( <=  in8 in12))  ( <=  in9 in12))  ( <=  in10 in12))  ( <=  in11 in12))  ( <=  in0 in8))  ( <=  in1 in8))  ( <=  in2 in8))  ( <=  in3 in8))  ( <=  in4 in8))  ( <=  in5 in8))  ( <=  in6 in8))  ( <=  in7 in8))  ( <=  in15 in16))  ( <=  in17 in18))  ( <=  in15 in17))  ( <=  in16 in17))  ( <=  in19 in20))  ( <=  in21 in22))  ( <=  in19 in21))  ( <=  in20 in21))  ( <=  in15 in19))  ( <=  in16 in19))  ( <=  in17 in19))  ( <=  in18 in19))  ( <=  in23 in24))  ( <=  in25 in26))  ( <=  in23 in25))  ( <=  in24 in25))  ( <=  in27 in28))  ( <=  in27 in29))  ( <=  in28 in29))  ( <=  in23 in27))  ( <=  in24 in27))  ( <=  in25 in27))  ( <=  in26 in27))  ( <=  in15 in23))  ( <=  in16 in23))  ( <=  in17 in23))  ( <=  in18 in23))  ( <=  in19 in23))  ( <=  in20 in23))  ( <=  in21 in23))  ( <=  in22 in23))  ( <=  in0 in15))  ( <=  in1 in15))  ( <=  in2 in15))  ( <=  in3 in15))  ( <=  in4 in15))  ( <=  in5 in15))  ( <=  in6 in15))  ( <=  in7 in15))  ( <=  in8 in15))  ( <=  in9 in15))  ( <=  in10 in15))  ( <=  in11 in15))  ( <=  in12 in15))  ( <=  in13 in15))  ( <=  in14 in15)))",
      "response": "- Worst-case time complexity: O(n log n). Merge sort consistently performs two recursive sorts on halves of size n/2 and a linear-time merge, giving T(n) = 2T(n/2) + Theta(n).\n\n- SMT2 constraint for input size n = 30: the program creates 30 symbolic Java ints named in0..in29. There are no path constraints on their values (all orderings are possible), so the only natural constraints are their 32-bit Java int domains.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n(declare-fun in18 () Int)\n(declare-fun in19 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in22 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n(declare-fun in28 () Int)\n(declare-fun in29 () Int)\n(assert (and\n  (<= -2147483648 in0) (<= in0 2147483647)\n  (<= -2147483648 in1) (<= in1 2147483647)\n  (<= -2147483648 in2) (<= in2 2147483647)\n  (<= -2147483648 in3) (<= in3 2147483647)\n  (<= -2147483648 in4) (<= in4 2147483647)\n  (<= -2147483648 in5) (<= in5 2147483647)\n  (<= -2147483648 in6) (<= in6 2147483647)\n  (<= -2147483648 in7) (<= in7 2147483647)\n  (<= -2147483648 in8) (<= in8 2147483647)\n  (<= -2147483648 in9) (<= in9 2147483647)\n  (<= -2147483648 in10) (<= in10 2147483647)\n  (<= -2147483648 in11) (<= in11 2147483647)\n  (<= -2147483648 in12) (<= in12 2147483647)\n  (<= -2147483648 in13) (<= in13 2147483647)\n  (<= -2147483648 in14) (<= in14 2147483647)\n  (<= -2147483648 in15) (<= in15 2147483647)\n  (<= -2147483648 in16) (<= in16 2147483647)\n  (<= -2147483648 in17) (<= in17 2147483647)\n  (<= -2147483648 in18) (<= in18 2147483647)\n  (<= -2147483648 in19) (<= in19 2147483647)\n  (<= -2147483648 in20) (<= in20 2147483647)\n  (<= -2147483648 in21) (<= in21 2147483647)\n  (<= -2147483648 in22) (<= in22 2147483647)\n  (<= -2147483648 in23) (<= in23 2147483647)\n  (<= -2147483648 in24) (<= in24 2147483647)\n  (<= -2147483648 in25) (<= in25 2147483647)\n  (<= -2147483648 in26) (<= in26 2147483647)\n  (<= -2147483648 in27) (<= in27 2147483647)\n  (<= -2147483648 in28) (<= in28 2147483647)\n  (<= -2147483648 in29) (<= in29 2147483647)\n))\n(check-sat)"
    },
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <=  in0 in1)  ( <=  in2 in3))  ( <=  in0 in2))  ( <=  in1 in2))  ( <=  in4 in5))  ( <=  in6 in7))  ( <=  in4 in6))  ( <=  in5 in6))  ( <=  in0 in4))  ( <=  in1 in4))  ( <=  in2 in4))  ( <=  in3 in4))  ( <=  in8 in9))  ( <=  in10 in11))  ( <=  in8 in10))  ( <=  in9 in10))  ( <=  in12 in13))  ( <=  in14 in15))  ( <=  in12 in14))  ( <=  in13 in14))  ( <=  in8 in12))  ( <=  in9 in12))  ( <=  in10 in12))  ( <=  in11 in12))  ( <=  in0 in8))  ( <=  in1 in8))  ( <=  in2 in8))  ( <=  in3 in8))  ( <=  in4 in8))  ( <=  in5 in8))  ( <=  in6 in8))  ( <=  in7 in8)))",
      "response": "- Worst-case time complexity: O(n log n)\n- Auxiliary space complexity: O(n) due to the temporary arrays L and R\n- For n = 16, the worst-case number of element-to-element comparisons in merge steps is 49\n\nAnswer:\n(set-logic QF_LIA)\n; 16 symbolic Java int inputs: in0..in15\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n\n; Optional: constrain them to Java int range (not strictly required)\n(assert (and\n  (<= -2147483648 in0)  (<= in0 2147483647)\n  (<= -2147483648 in1)  (<= in1 2147483647)\n  (<= -2147483648 in2)  (<= in2 2147483647)\n  (<= -2147483648 in3)  (<= in3 2147483647)\n  (<= -2147483648 in4)  (<= in4 2147483647)\n  (<= -2147483648 in5)  (<= in5 2147483647)\n  (<= -2147483648 in6)  (<= in6 2147483647)\n  (<= -2147483648 in7)  (<= in7 2147483647)\n  (<= -2147483648 in8)  (<= in8 2147483647)\n  (<= -2147483648 in9)  (<= in9 2147483647)\n  (<= -2147483648 in10) (<= in10 2147483647)\n  (<= -2147483648 in11) (<= in11 2147483647)\n  (<= -2147483648 in12) (<= in12 2147483647)\n  (<= -2147483648 in13) (<= in13 2147483647)\n  (<= -2147483648 in14) (<= in14 2147483647)\n  (<= -2147483648 in15) (<= in15 2147483647)\n))\n\n(check-sat)\n(get-model)"
    }
  },
  "BinaryTreeSearch": {
    "program": "/**\n * Copyright (c) 2011, Regents of the University of California\n * All rights reserved.\n * <p/>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <p/>\n * 1. Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * <p/>\n * 2. Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution.\n * <p/>\n * 3. Neither the name of the University of California, Berkeley nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n * <p/>\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\n//package edu.berkeley.cs.wise.benchmarks;\n\n//import edu.berkeley.cs.wise.concolic.Concolic;\n\n/**\n * @author Sudeep Juvekar <sjuvekar@cs.berkeley.edu>\n * @author Jacob Burnim <jburnim@cs.berkeley.edu>\n */\npublic class BinaryTreeSearch {\n\n    private static class BinaryTree {\n        /**\n         * Internal class representing a Node in the tree.\n         */\n        private static class Node {\n            int value;\n            Node left;\n            Node right;\n\n            Node(int v, Node l, Node r) {\n                value = v;\n                left = l;\n                right = r;\n            }\n        }\n\n        private Node root = null;\n\n        /**\n         * Inserts a value in to the tree.\n         */\n        public void insert(int v) {\n\n            if (root == null) {\n                root = new Node(v, null, null);\n                return;\n            }\n\n            Node curr = root;\n            while (true) {\n                if (curr.value < v) {\n                    if (curr.right != null) {\n                        curr = curr.right;\n                    } else {\n                        curr.right = new Node(v, null, null);\n                        break;\n                    }\n                } else if (curr.value > v) {\n                    if (curr.left != null) {\n                        curr = curr.left;\n                    } else {\n                        curr.left = new Node(v, null, null);\n                        break;\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        /**\n         * Searches for a value in the tree.\n         */\n        public boolean search(int v) {\n            Node curr = root;\n            while (curr != null) {  // N branches\n                if (curr.value == v) {  // N-1 branches\n                    return true;\n                } else if (curr.value < v) {  // N-1 branches\n                    curr = curr.right;\n                } else {\n                    curr = curr.left;\n                }\n            }\n            return false;\n        }\n    }\n\n\n    public static void main(String args[]) {\n        final int N = Integer.parseInt(args[0]);\n\n        BinaryTree b = new BinaryTree();\n        for (int i = 0; i < N; i++) {\n            b.insert(Debug.makeSymbolicInteger(\"in\"+i));//Concolic.input.Integer());\n        }\n\n        // We only measure the complexity (i.e. path length) of the\n        // final search operation.  That is, we count branches only\n        // from this point forward in the execution.\n        //Concolic.ResetBranchCounting();\n\n        b.search(Debug.makeSymbolicInteger(\"in\"));//Concolic.input.Integer());\n    }\n}\n",
    "16": {
      "constants": "(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 in1)  ( >  in0 in1))  ( >=  in0 in2))  ( >  in0 in2))  ( >=  in1 in2))  ( >  in1 in2))  ( >=  in0 in3))  ( >  in0 in3))  ( >=  in1 in3))  ( >  in1 in3))  ( >=  in2 in3))  ( >  in2 in3))  ( >=  in0 in4))  ( >  in0 in4))  ( >=  in1 in4))  ( >  in1 in4))  ( >=  in2 in4))  ( >  in2 in4))  ( >=  in3 in4))  ( >  in3 in4))  ( >=  in0 in5))  ( >  in0 in5))  ( >=  in1 in5))  ( >  in1 in5))  ( >=  in2 in5))  ( >  in2 in5))  ( >=  in3 in5))  ( >  in3 in5))  ( >=  in4 in5))  ( >  in4 in5))  ( >=  in0 in6))  ( >  in0 in6))  ( >=  in1 in6))  ( >  in1 in6))  ( >=  in2 in6))  ( >  in2 in6))  ( >=  in3 in6))  ( >  in3 in6))  ( >=  in4 in6))  ( >  in4 in6))  ( >=  in5 in6))  ( >  in5 in6))  ( >=  in0 in7))  ( >  in0 in7))  ( >=  in1 in7))  ( >  in1 in7))  ( >=  in2 in7))  ( >  in2 in7))  ( >=  in3 in7))  ( >  in3 in7))  ( >=  in4 in7))  ( >  in4 in7))  ( >=  in5 in7))  ( >  in5 in7))  ( >=  in6 in7))  ( >  in6 in7))  ( >=  in0 in8))  ( >  in0 in8))  ( >=  in1 in8))  ( >  in1 in8))  ( >=  in2 in8))  ( >  in2 in8))  ( >=  in3 in8))  ( >  in3 in8))  ( >=  in4 in8))  ( >  in4 in8))  ( >=  in5 in8))  ( >  in5 in8))  ( >=  in6 in8))  ( >  in6 in8))  ( >=  in7 in8))  ( >  in7 in8))  ( >=  in0 in9))  ( >  in0 in9))  ( >=  in1 in9))  ( >  in1 in9))  ( >=  in2 in9))  ( >  in2 in9))  ( >=  in3 in9))  ( >  in3 in9))  ( >=  in4 in9))  ( >  in4 in9))  ( >=  in5 in9))  ( >  in5 in9))  ( >=  in6 in9))  ( >  in6 in9))  ( >=  in7 in9))  ( >  in7 in9))  ( >=  in8 in9))  ( >  in8 in9))  ( >=  in0 in10))  ( >  in0 in10))  ( >=  in1 in10))  ( >  in1 in10))  ( >=  in2 in10))  ( >  in2 in10))  ( >=  in3 in10))  ( >  in3 in10))  ( >=  in4 in10))  ( >  in4 in10))  ( >=  in5 in10))  ( >  in5 in10))  ( >=  in6 in10))  ( >  in6 in10))  ( >=  in7 in10))  ( >  in7 in10))  ( >=  in8 in10))  ( >  in8 in10))  ( >=  in9 in10))  ( >  in9 in10))  ( >=  in0 in11))  ( >  in0 in11))  ( >=  in1 in11))  ( >  in1 in11))  ( >=  in2 in11))  ( >  in2 in11))  ( >=  in3 in11))  ( >  in3 in11))  ( >=  in4 in11))  ( >  in4 in11))  ( >=  in5 in11))  ( >  in5 in11))  ( >=  in6 in11))  ( >  in6 in11))  ( >=  in7 in11))  ( >  in7 in11))  ( >=  in8 in11))  ( >  in8 in11))  ( >=  in9 in11))  ( >  in9 in11))  ( >=  in10 in11))  ( >  in10 in11))  ( >=  in0 in12))  ( >  in0 in12))  ( >=  in1 in12))  ( >  in1 in12))  ( >=  in2 in12))  ( >  in2 in12))  ( >=  in3 in12))  ( >  in3 in12))  ( >=  in4 in12))  ( >  in4 in12))  ( >=  in5 in12))  ( >  in5 in12))  ( >=  in6 in12))  ( >  in6 in12))  ( >=  in7 in12))  ( >  in7 in12))  ( >=  in8 in12))  ( >  in8 in12))  ( >=  in9 in12))  ( >  in9 in12))  ( >=  in10 in12))  ( >  in10 in12))  ( >=  in11 in12))  ( >  in11 in12))  ( >=  in0 in13))  ( >  in0 in13))  ( >=  in1 in13))  ( >  in1 in13))  ( >=  in2 in13))  ( >  in2 in13))  ( >=  in3 in13))  ( >  in3 in13))  ( >=  in4 in13))  ( >  in4 in13))  ( >=  in5 in13))  ( >  in5 in13))  ( >=  in6 in13))  ( >  in6 in13))  ( >=  in7 in13))  ( >  in7 in13))  ( >=  in8 in13))  ( >  in8 in13))  ( >=  in9 in13))  ( >  in9 in13))  ( >=  in10 in13))  ( >  in10 in13))  ( >=  in11 in13))  ( >  in11 in13))  ( >=  in12 in13))  ( >  in12 in13))  ( >=  in0 in14))  ( >  in0 in14))  ( >=  in1 in14))  ( >  in1 in14))  ( >=  in2 in14))  ( >  in2 in14))  ( >=  in3 in14))  ( >  in3 in14))  ( >=  in4 in14))  ( >  in4 in14))  ( >=  in5 in14))  ( >  in5 in14))  ( >=  in6 in14))  ( >  in6 in14))  ( >=  in7 in14))  ( >  in7 in14))  ( >=  in8 in14))  ( >  in8 in14))  ( >=  in9 in14))  ( >  in9 in14))  ( >=  in10 in14))  ( >  in10 in14))  ( >=  in11 in14))  ( >  in11 in14))  ( >=  in12 in14))  ( >  in12 in14))  ( >=  in13 in14))  ( >  in13 in14))  ( >=  in0 in15))  ( >  in0 in15))  ( >=  in1 in15))  ( >  in1 in15))  ( >=  in2 in15))  ( >  in2 in15))  ( >=  in3 in15))  ( >  in3 in15))  ( >=  in4 in15))  ( >  in4 in15))  ( >=  in5 in15))  ( >  in5 in15))  ( >=  in6 in15))  ( >  in6 in15))  ( >=  in7 in15))  ( >  in7 in15))  ( >=  in8 in15))  ( >  in8 in15))  ( >=  in9 in15))  ( >  in9 in15))  ( >=  in10 in15))  ( >  in10 in15))  ( >=  in11 in15))  ( >  in11 in15))  ( >=  in12 in15))  ( >  in12 in15))  ( >=  in13 in15))  ( >  in13 in15))  ( >=  in14 in15))  ( >  in14 in15)) (not ( = in0 in)))  ( >=  in0 in)) (not ( = in1 in)))  ( >=  in1 in)) (not ( = in2 in)))  ( >=  in2 in)) (not ( = in3 in)))  ( >=  in3 in)) (not ( = in4 in)))  ( >=  in4 in)) (not ( = in5 in)))  ( >=  in5 in)) (not ( = in6 in)))  ( >=  in6 in)) (not ( = in7 in)))  ( >=  in7 in)) (not ( = in8 in)))  ( >=  in8 in)) (not ( = in9 in)))  ( >=  in9 in)) (not ( = in10 in)))  ( >=  in10 in)) (not ( = in11 in)))  ( >=  in11 in)) (not ( = in12 in)))  ( >=  in12 in)) (not ( = in13 in)))  ( >=  in13 in)) (not ( = in14 in)))  ( >=  in14 in)) (not ( = in15 in)))  ( >=  in15 in)))",
      "response": "Worst-case time complexity:\n- Inserts (N keys into an unbalanced BST): O(N^2)\n- Final search: O(N)\n- Overall program: O(N^2). If you only count from the final search (as the comment suggests), it is O(N).\n\nSMT2 constraint for n = 16 (force a maximally unbalanced right-skewed tree and a worst-case search going past the deepest right leaf):\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(declare-const in8 Int)\n(declare-const in9 Int)\n(declare-const in10 Int)\n(declare-const in11 Int)\n(declare-const in12 Int)\n(declare-const in13 Int)\n(declare-const in14 Int)\n(declare-const in15 Int)\n(declare-const in Int)\n(assert (< in0 in1))\n(assert (< in1 in2))\n(assert (< in2 in3))\n(assert (< in3 in4))\n(assert (< in4 in5))\n(assert (< in5 in6))\n(assert (< in6 in7))\n(assert (< in7 in8))\n(assert (< in8 in9))\n(assert (< in9 in10))\n(assert (< in10 in11))\n(assert (< in11 in12))\n(assert (< in12 in13))\n(assert (< in13 in14))\n(assert (< in14 in15))\n(assert (> in in15))\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and (and (and (and (and  ( >=  in0 in1)  ( >  in0 in1)) (not ( = in0 in)))  ( >=  in0 in)) (not ( = in1 in)))  ( >=  in1 in)))",
      "response": "- Worst-case time complexity:\n  - Building the BST with N inserts (unbalanced): O(N^2)\n  - Final search (which is what the program measures): O(N)\n  - Overall program time: O(N^2) dominated by construction\n\n- SMT2 constraint for n=2 (two inserts: in0, in1; one search key: in), forcing the worst-case search path (a degenerate tree of height 2 and a miss so both comparisons are taken):\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in Int)\n; Ensure two-node degenerate BST and a full two-step miss during search\n(assert (distinct in0 in1))\n(assert (or (and (> in1 in0) (> in in0) (distinct in in1))\n            (and (< in1 in0) (< in in0) (distinct in in1))))\n(check-sat)\n(get-model)"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 in1)  ( >  in0 in1))  ( >=  in0 in2))  ( >  in0 in2))  ( >=  in1 in2))  ( >  in1 in2))  ( >=  in0 in3))  ( >  in0 in3))  ( >=  in1 in3))  ( >  in1 in3))  ( >=  in2 in3))  ( >  in2 in3))  ( >=  in0 in4))  ( >  in0 in4))  ( >=  in1 in4))  ( >  in1 in4))  ( >=  in2 in4))  ( >  in2 in4))  ( >=  in3 in4))  ( >  in3 in4))  ( >=  in0 in5))  ( >  in0 in5))  ( >=  in1 in5))  ( >  in1 in5))  ( >=  in2 in5))  ( >  in2 in5))  ( >=  in3 in5))  ( >  in3 in5))  ( >=  in4 in5))  ( >  in4 in5))  ( >=  in0 in6))  ( >  in0 in6))  ( >=  in1 in6))  ( >  in1 in6))  ( >=  in2 in6))  ( >  in2 in6))  ( >=  in3 in6))  ( >  in3 in6))  ( >=  in4 in6))  ( >  in4 in6))  ( >=  in5 in6))  ( >  in5 in6))  ( >=  in0 in7))  ( >  in0 in7))  ( >=  in1 in7))  ( >  in1 in7))  ( >=  in2 in7))  ( >  in2 in7))  ( >=  in3 in7))  ( >  in3 in7))  ( >=  in4 in7))  ( >  in4 in7))  ( >=  in5 in7))  ( >  in5 in7))  ( >=  in6 in7))  ( >  in6 in7))  ( >=  in0 in8))  ( >  in0 in8))  ( >=  in1 in8))  ( >  in1 in8))  ( >=  in2 in8))  ( >  in2 in8))  ( >=  in3 in8))  ( >  in3 in8))  ( >=  in4 in8))  ( >  in4 in8))  ( >=  in5 in8))  ( >  in5 in8))  ( >=  in6 in8))  ( >  in6 in8))  ( >=  in7 in8))  ( >  in7 in8))  ( >=  in0 in9))  ( >  in0 in9))  ( >=  in1 in9))  ( >  in1 in9))  ( >=  in2 in9))  ( >  in2 in9))  ( >=  in3 in9))  ( >  in3 in9))  ( >=  in4 in9))  ( >  in4 in9))  ( >=  in5 in9))  ( >  in5 in9))  ( >=  in6 in9))  ( >  in6 in9))  ( >=  in7 in9))  ( >  in7 in9))  ( >=  in8 in9))  ( >  in8 in9))  ( >=  in0 in10))  ( >  in0 in10))  ( >=  in1 in10))  ( >  in1 in10))  ( >=  in2 in10))  ( >  in2 in10))  ( >=  in3 in10))  ( >  in3 in10))  ( >=  in4 in10))  ( >  in4 in10))  ( >=  in5 in10))  ( >  in5 in10))  ( >=  in6 in10))  ( >  in6 in10))  ( >=  in7 in10))  ( >  in7 in10))  ( >=  in8 in10))  ( >  in8 in10))  ( >=  in9 in10))  ( >  in9 in10))  ( >=  in0 in11))  ( >  in0 in11))  ( >=  in1 in11))  ( >  in1 in11))  ( >=  in2 in11))  ( >  in2 in11))  ( >=  in3 in11))  ( >  in3 in11))  ( >=  in4 in11))  ( >  in4 in11))  ( >=  in5 in11))  ( >  in5 in11))  ( >=  in6 in11))  ( >  in6 in11))  ( >=  in7 in11))  ( >  in7 in11))  ( >=  in8 in11))  ( >  in8 in11))  ( >=  in9 in11))  ( >  in9 in11))  ( >=  in10 in11))  ( >  in10 in11))  ( >=  in0 in12))  ( >  in0 in12))  ( >=  in1 in12))  ( >  in1 in12))  ( >=  in2 in12))  ( >  in2 in12))  ( >=  in3 in12))  ( >  in3 in12))  ( >=  in4 in12))  ( >  in4 in12))  ( >=  in5 in12))  ( >  in5 in12))  ( >=  in6 in12))  ( >  in6 in12))  ( >=  in7 in12))  ( >  in7 in12))  ( >=  in8 in12))  ( >  in8 in12))  ( >=  in9 in12))  ( >  in9 in12))  ( >=  in10 in12))  ( >  in10 in12))  ( >=  in11 in12))  ( >  in11 in12))  ( >=  in0 in13))  ( >  in0 in13))  ( >=  in1 in13))  ( >  in1 in13))  ( >=  in2 in13))  ( >  in2 in13))  ( >=  in3 in13))  ( >  in3 in13))  ( >=  in4 in13))  ( >  in4 in13))  ( >=  in5 in13))  ( >  in5 in13))  ( >=  in6 in13))  ( >  in6 in13))  ( >=  in7 in13))  ( >  in7 in13))  ( >=  in8 in13))  ( >  in8 in13))  ( >=  in9 in13))  ( >  in9 in13))  ( >=  in10 in13))  ( >  in10 in13))  ( >=  in11 in13))  ( >  in11 in13))  ( >=  in12 in13))  ( >  in12 in13))  ( >=  in0 in14))  ( >  in0 in14))  ( >=  in1 in14))  ( >  in1 in14))  ( >=  in2 in14))  ( >  in2 in14))  ( >=  in3 in14))  ( >  in3 in14))  ( >=  in4 in14))  ( >  in4 in14))  ( >=  in5 in14))  ( >  in5 in14))  ( >=  in6 in14))  ( >  in6 in14))  ( >=  in7 in14))  ( >  in7 in14))  ( >=  in8 in14))  ( >  in8 in14))  ( >=  in9 in14))  ( >  in9 in14))  ( >=  in10 in14))  ( >  in10 in14))  ( >=  in11 in14))  ( >  in11 in14))  ( >=  in12 in14))  ( >  in12 in14))  ( >=  in13 in14))  ( >  in13 in14))  ( >=  in0 in15))  ( >  in0 in15))  ( >=  in1 in15))  ( >  in1 in15))  ( >=  in2 in15))  ( >  in2 in15))  ( >=  in3 in15))  ( >  in3 in15))  ( >=  in4 in15))  ( >  in4 in15))  ( >=  in5 in15))  ( >  in5 in15))  ( >=  in6 in15))  ( >  in6 in15))  ( >=  in7 in15))  ( >  in7 in15))  ( >=  in8 in15))  ( >  in8 in15))  ( >=  in9 in15))  ( >  in9 in15))  ( >=  in10 in15))  ( >  in10 in15))  ( >=  in11 in15))  ( >  in11 in15))  ( >=  in12 in15))  ( >  in12 in15))  ( >=  in13 in15))  ( >  in13 in15))  ( >=  in14 in15))  ( >  in14 in15))  ( >=  in0 in16))  ( >  in0 in16))  ( >=  in1 in16))  ( >  in1 in16))  ( >=  in2 in16))  ( >  in2 in16))  ( >=  in3 in16))  ( >  in3 in16))  ( >=  in4 in16))  ( >  in4 in16))  ( >=  in5 in16))  ( >  in5 in16))  ( >=  in6 in16))  ( >  in6 in16))  ( >=  in7 in16))  ( >  in7 in16))  ( >=  in8 in16))  ( >  in8 in16))  ( >=  in9 in16))  ( >  in9 in16))  ( >=  in10 in16))  ( >  in10 in16))  ( >=  in11 in16))  ( >  in11 in16))  ( >=  in12 in16))  ( >  in12 in16))  ( >=  in13 in16))  ( >  in13 in16))  ( >=  in14 in16))  ( >  in14 in16))  ( >=  in15 in16))  ( >  in15 in16))  ( >=  in0 in17))  ( >  in0 in17))  ( >=  in1 in17))  ( >  in1 in17))  ( >=  in2 in17))  ( >  in2 in17))  ( >=  in3 in17))  ( >  in3 in17))  ( >=  in4 in17))  ( >  in4 in17))  ( >=  in5 in17))  ( >  in5 in17))  ( >=  in6 in17))  ( >  in6 in17))  ( >=  in7 in17))  ( >  in7 in17))  ( >=  in8 in17))  ( >  in8 in17))  ( >=  in9 in17))  ( >  in9 in17))  ( >=  in10 in17))  ( >  in10 in17))  ( >=  in11 in17))  ( >  in11 in17))  ( >=  in12 in17))  ( >  in12 in17))  ( >=  in13 in17))  ( >  in13 in17))  ( >=  in14 in17))  ( >  in14 in17))  ( >=  in15 in17))  ( >  in15 in17))  ( >=  in16 in17))  ( >  in16 in17))  ( >=  in0 in18))  ( >  in0 in18))  ( >=  in1 in18))  ( >  in1 in18))  ( >=  in2 in18))  ( >  in2 in18))  ( >=  in3 in18))  ( >  in3 in18))  ( >=  in4 in18))  ( >  in4 in18))  ( >=  in5 in18))  ( >  in5 in18))  ( >=  in6 in18))  ( >  in6 in18))  ( >=  in7 in18))  ( >  in7 in18))  ( >=  in8 in18))  ( >  in8 in18))  ( >=  in9 in18))  ( >  in9 in18))  ( >=  in10 in18))  ( >  in10 in18))  ( >=  in11 in18))  ( >  in11 in18))  ( >=  in12 in18))  ( >  in12 in18))  ( >=  in13 in18))  ( >  in13 in18))  ( >=  in14 in18))  ( >  in14 in18))  ( >=  in15 in18))  ( >  in15 in18))  ( >=  in16 in18))  ( >  in16 in18))  ( >=  in17 in18))  ( >  in17 in18))  ( >=  in0 in19))  ( >  in0 in19))  ( >=  in1 in19))  ( >  in1 in19))  ( >=  in2 in19))  ( >  in2 in19))  ( >=  in3 in19))  ( >  in3 in19))  ( >=  in4 in19))  ( >  in4 in19))  ( >=  in5 in19))  ( >  in5 in19))  ( >=  in6 in19))  ( >  in6 in19))  ( >=  in7 in19))  ( >  in7 in19))  ( >=  in8 in19))  ( >  in8 in19))  ( >=  in9 in19))  ( >  in9 in19))  ( >=  in10 in19))  ( >  in10 in19))  ( >=  in11 in19))  ( >  in11 in19))  ( >=  in12 in19))  ( >  in12 in19))  ( >=  in13 in19))  ( >  in13 in19))  ( >=  in14 in19))  ( >  in14 in19))  ( >=  in15 in19))  ( >  in15 in19))  ( >=  in16 in19))  ( >  in16 in19))  ( >=  in17 in19))  ( >  in17 in19))  ( >=  in18 in19))  ( >  in18 in19))  ( >=  in0 in20))  ( >  in0 in20))  ( >=  in1 in20))  ( >  in1 in20))  ( >=  in2 in20))  ( >  in2 in20))  ( >=  in3 in20))  ( >  in3 in20))  ( >=  in4 in20))  ( >  in4 in20))  ( >=  in5 in20))  ( >  in5 in20))  ( >=  in6 in20))  ( >  in6 in20))  ( >=  in7 in20))  ( >  in7 in20))  ( >=  in8 in20))  ( >  in8 in20))  ( >=  in9 in20))  ( >  in9 in20))  ( >=  in10 in20))  ( >  in10 in20))  ( >=  in11 in20))  ( >  in11 in20))  ( >=  in12 in20))  ( >  in12 in20))  ( >=  in13 in20))  ( >  in13 in20))  ( >=  in14 in20))  ( >  in14 in20))  ( >=  in15 in20))  ( >  in15 in20))  ( >=  in16 in20))  ( >  in16 in20))  ( >=  in17 in20))  ( >  in17 in20))  ( >=  in18 in20))  ( >  in18 in20))  ( >=  in19 in20))  ( >  in19 in20))  ( >=  in0 in21))  ( >  in0 in21))  ( >=  in1 in21))  ( >  in1 in21))  ( >=  in2 in21))  ( >  in2 in21))  ( >=  in3 in21))  ( >  in3 in21))  ( >=  in4 in21))  ( >  in4 in21))  ( >=  in5 in21))  ( >  in5 in21))  ( >=  in6 in21))  ( >  in6 in21))  ( >=  in7 in21))  ( >  in7 in21))  ( >=  in8 in21))  ( >  in8 in21))  ( >=  in9 in21))  ( >  in9 in21))  ( >=  in10 in21))  ( >  in10 in21))  ( >=  in11 in21))  ( >  in11 in21))  ( >=  in12 in21))  ( >  in12 in21))  ( >=  in13 in21))  ( >  in13 in21))  ( >=  in14 in21))  ( >  in14 in21))  ( >=  in15 in21))  ( >  in15 in21))  ( >=  in16 in21))  ( >  in16 in21))  ( >=  in17 in21))  ( >  in17 in21))  ( >=  in18 in21))  ( >  in18 in21))  ( >=  in19 in21))  ( >  in19 in21))  ( >=  in20 in21))  ( >  in20 in21))  ( >=  in0 in22))  ( >  in0 in22))  ( >=  in1 in22))  ( >  in1 in22))  ( >=  in2 in22))  ( >  in2 in22))  ( >=  in3 in22))  ( >  in3 in22))  ( >=  in4 in22))  ( >  in4 in22))  ( >=  in5 in22))  ( >  in5 in22))  ( >=  in6 in22))  ( >  in6 in22))  ( >=  in7 in22))  ( >  in7 in22))  ( >=  in8 in22))  ( >  in8 in22))  ( >=  in9 in22))  ( >  in9 in22))  ( >=  in10 in22))  ( >  in10 in22))  ( >=  in11 in22))  ( >  in11 in22))  ( >=  in12 in22))  ( >  in12 in22))  ( >=  in13 in22))  ( >  in13 in22))  ( >=  in14 in22))  ( >  in14 in22))  ( >=  in15 in22))  ( >  in15 in22))  ( >=  in16 in22))  ( >  in16 in22))  ( >=  in17 in22))  ( >  in17 in22))  ( >=  in18 in22))  ( >  in18 in22))  ( >=  in19 in22))  ( >  in19 in22))  ( >=  in20 in22))  ( >  in20 in22))  ( >=  in21 in22))  ( >  in21 in22))  ( >=  in0 in23))  ( >  in0 in23))  ( >=  in1 in23))  ( >  in1 in23))  ( >=  in2 in23))  ( >  in2 in23))  ( >=  in3 in23))  ( >  in3 in23))  ( >=  in4 in23))  ( >  in4 in23))  ( >=  in5 in23))  ( >  in5 in23))  ( >=  in6 in23))  ( >  in6 in23))  ( >=  in7 in23))  ( >  in7 in23))  ( >=  in8 in23))  ( >  in8 in23))  ( >=  in9 in23))  ( >  in9 in23))  ( >=  in10 in23))  ( >  in10 in23))  ( >=  in11 in23))  ( >  in11 in23))  ( >=  in12 in23))  ( >  in12 in23))  ( >=  in13 in23))  ( >  in13 in23))  ( >=  in14 in23))  ( >  in14 in23))  ( >=  in15 in23))  ( >  in15 in23))  ( >=  in16 in23))  ( >  in16 in23))  ( >=  in17 in23))  ( >  in17 in23))  ( >=  in18 in23))  ( >  in18 in23))  ( >=  in19 in23))  ( >  in19 in23))  ( >=  in20 in23))  ( >  in20 in23))  ( >=  in21 in23))  ( >  in21 in23))  ( >=  in22 in23))  ( >  in22 in23))  ( >=  in0 in24))  ( >  in0 in24))  ( >=  in1 in24))  ( >  in1 in24))  ( >=  in2 in24))  ( >  in2 in24))  ( >=  in3 in24))  ( >  in3 in24))  ( >=  in4 in24))  ( >  in4 in24))  ( >=  in5 in24))  ( >  in5 in24))  ( >=  in6 in24))  ( >  in6 in24))  ( >=  in7 in24))  ( >  in7 in24))  ( >=  in8 in24))  ( >  in8 in24))  ( >=  in9 in24))  ( >  in9 in24))  ( >=  in10 in24))  ( >  in10 in24))  ( >=  in11 in24))  ( >  in11 in24))  ( >=  in12 in24))  ( >  in12 in24))  ( >=  in13 in24))  ( >  in13 in24))  ( >=  in14 in24))  ( >  in14 in24))  ( >=  in15 in24))  ( >  in15 in24))  ( >=  in16 in24))  ( >  in16 in24))  ( >=  in17 in24))  ( >  in17 in24))  ( >=  in18 in24))  ( >  in18 in24))  ( >=  in19 in24))  ( >  in19 in24))  ( >=  in20 in24))  ( >  in20 in24))  ( >=  in21 in24))  ( >  in21 in24))  ( >=  in22 in24))  ( >  in22 in24))  ( >=  in23 in24))  ( >  in23 in24))  ( >=  in0 in25))  ( >  in0 in25))  ( >=  in1 in25))  ( >  in1 in25))  ( >=  in2 in25))  ( >  in2 in25))  ( >=  in3 in25))  ( >  in3 in25))  ( >=  in4 in25))  ( >  in4 in25))  ( >=  in5 in25))  ( >  in5 in25))  ( >=  in6 in25))  ( >  in6 in25))  ( >=  in7 in25))  ( >  in7 in25))  ( >=  in8 in25))  ( >  in8 in25))  ( >=  in9 in25))  ( >  in9 in25))  ( >=  in10 in25))  ( >  in10 in25))  ( >=  in11 in25))  ( >  in11 in25))  ( >=  in12 in25))  ( >  in12 in25))  ( >=  in13 in25))  ( >  in13 in25))  ( >=  in14 in25))  ( >  in14 in25))  ( >=  in15 in25))  ( >  in15 in25))  ( >=  in16 in25))  ( >  in16 in25))  ( >=  in17 in25))  ( >  in17 in25))  ( >=  in18 in25))  ( >  in18 in25))  ( >=  in19 in25))  ( >  in19 in25))  ( >=  in20 in25))  ( >  in20 in25))  ( >=  in21 in25))  ( >  in21 in25))  ( >=  in22 in25))  ( >  in22 in25))  ( >=  in23 in25))  ( >  in23 in25))  ( >=  in24 in25))  ( >  in24 in25))  ( >=  in0 in26))  ( >  in0 in26))  ( >=  in1 in26))  ( >  in1 in26))  ( >=  in2 in26))  ( >  in2 in26))  ( >=  in3 in26))  ( >  in3 in26))  ( >=  in4 in26))  ( >  in4 in26))  ( >=  in5 in26))  ( >  in5 in26))  ( >=  in6 in26))  ( >  in6 in26))  ( >=  in7 in26))  ( >  in7 in26))  ( >=  in8 in26))  ( >  in8 in26))  ( >=  in9 in26))  ( >  in9 in26))  ( >=  in10 in26))  ( >  in10 in26))  ( >=  in11 in26))  ( >  in11 in26))  ( >=  in12 in26))  ( >  in12 in26))  ( >=  in13 in26))  ( >  in13 in26))  ( >=  in14 in26))  ( >  in14 in26))  ( >=  in15 in26))  ( >  in15 in26))  ( >=  in16 in26))  ( >  in16 in26))  ( >=  in17 in26))  ( >  in17 in26))  ( >=  in18 in26))  ( >  in18 in26))  ( >=  in19 in26))  ( >  in19 in26))  ( >=  in20 in26))  ( >  in20 in26))  ( >=  in21 in26))  ( >  in21 in26))  ( >=  in22 in26))  ( >  in22 in26))  ( >=  in23 in26))  ( >  in23 in26))  ( >=  in24 in26))  ( >  in24 in26))  ( >=  in25 in26))  ( >  in25 in26))  ( >=  in0 in27))  ( >  in0 in27))  ( >=  in1 in27))  ( >  in1 in27))  ( >=  in2 in27))  ( >  in2 in27))  ( >=  in3 in27))  ( >  in3 in27))  ( >=  in4 in27))  ( >  in4 in27))  ( >=  in5 in27))  ( >  in5 in27))  ( >=  in6 in27))  ( >  in6 in27))  ( >=  in7 in27))  ( >  in7 in27))  ( >=  in8 in27))  ( >  in8 in27))  ( >=  in9 in27))  ( >  in9 in27))  ( >=  in10 in27))  ( >  in10 in27))  ( >=  in11 in27))  ( >  in11 in27))  ( >=  in12 in27))  ( >  in12 in27))  ( >=  in13 in27))  ( >  in13 in27))  ( >=  in14 in27))  ( >  in14 in27))  ( >=  in15 in27))  ( >  in15 in27))  ( >=  in16 in27))  ( >  in16 in27))  ( >=  in17 in27))  ( >  in17 in27))  ( >=  in18 in27))  ( >  in18 in27))  ( >=  in19 in27))  ( >  in19 in27))  ( >=  in20 in27))  ( >  in20 in27))  ( >=  in21 in27))  ( >  in21 in27))  ( >=  in22 in27))  ( >  in22 in27))  ( >=  in23 in27))  ( >  in23 in27))  ( >=  in24 in27))  ( >  in24 in27))  ( >=  in25 in27))  ( >  in25 in27))  ( >=  in26 in27))  ( >  in26 in27))  ( >=  in0 in28))  ( >  in0 in28))  ( >=  in1 in28))  ( >  in1 in28))  ( >=  in2 in28))  ( >  in2 in28))  ( >=  in3 in28))  ( >  in3 in28))  ( >=  in4 in28))  ( >  in4 in28))  ( >=  in5 in28))  ( >  in5 in28))  ( >=  in6 in28))  ( >  in6 in28))  ( >=  in7 in28))  ( >  in7 in28))  ( >=  in8 in28))  ( >  in8 in28))  ( >=  in9 in28))  ( >  in9 in28))  ( >=  in10 in28))  ( >  in10 in28))  ( >=  in11 in28))  ( >  in11 in28))  ( >=  in12 in28))  ( >  in12 in28))  ( >=  in13 in28))  ( >  in13 in28))  ( >=  in14 in28))  ( >  in14 in28))  ( >=  in15 in28))  ( >  in15 in28))  ( >=  in16 in28))  ( >  in16 in28))  ( >=  in17 in28))  ( >  in17 in28))  ( >=  in18 in28))  ( >  in18 in28))  ( >=  in19 in28))  ( >  in19 in28))  ( >=  in20 in28))  ( >  in20 in28))  ( >=  in21 in28))  ( >  in21 in28))  ( >=  in22 in28))  ( >  in22 in28))  ( >=  in23 in28))  ( >  in23 in28))  ( >=  in24 in28))  ( >  in24 in28))  ( >=  in25 in28))  ( >  in25 in28))  ( >=  in26 in28))  ( >  in26 in28))  ( >=  in27 in28))  ( >  in27 in28))  ( >=  in0 in29))  ( >  in0 in29))  ( >=  in1 in29))  ( >  in1 in29))  ( >=  in2 in29))  ( >  in2 in29))  ( >=  in3 in29))  ( >  in3 in29))  ( >=  in4 in29))  ( >  in4 in29))  ( >=  in5 in29))  ( >  in5 in29))  ( >=  in6 in29))  ( >  in6 in29))  ( >=  in7 in29))  ( >  in7 in29))  ( >=  in8 in29))  ( >  in8 in29))  ( >=  in9 in29))  ( >  in9 in29))  ( >=  in10 in29))  ( >  in10 in29))  ( >=  in11 in29))  ( >  in11 in29))  ( >=  in12 in29))  ( >  in12 in29))  ( >=  in13 in29))  ( >  in13 in29))  ( >=  in14 in29))  ( >  in14 in29))  ( >=  in15 in29))  ( >  in15 in29))  ( >=  in16 in29))  ( >  in16 in29))  ( >=  in17 in29))  ( >  in17 in29))  ( >=  in18 in29))  ( >  in18 in29))  ( >=  in19 in29))  ( >  in19 in29))  ( >=  in20 in29))  ( >  in20 in29))  ( >=  in21 in29))  ( >  in21 in29))  ( >=  in22 in29))  ( >  in22 in29))  ( >=  in23 in29))  ( >  in23 in29))  ( >=  in24 in29))  ( >  in24 in29))  ( >=  in25 in29))  ( >  in25 in29))  ( >=  in26 in29))  ( >  in26 in29))  ( >=  in27 in29))  ( >  in27 in29))  ( >=  in28 in29))  ( >  in28 in29)) (not ( = in0 in)))  ( >=  in0 in)) (not ( = in1 in)))  ( >=  in1 in)) (not ( = in2 in)))  ( >=  in2 in)) (not ( = in3 in)))  ( >=  in3 in)) (not ( = in4 in)))  ( >=  in4 in)) (not ( = in5 in)))  ( >=  in5 in)) (not ( = in6 in)))  ( >=  in6 in)) (not ( = in7 in)))  ( >=  in7 in)) (not ( = in8 in)))  ( >=  in8 in)) (not ( = in9 in)))  ( >=  in9 in)) (not ( = in10 in)))  ( >=  in10 in)) (not ( = in11 in)))  ( >=  in11 in)) (not ( = in12 in)))  ( >=  in12 in)) (not ( = in13 in)))  ( >=  in13 in)) (not ( = in14 in)))  ( >=  in14 in)) (not ( = in15 in)))  ( >=  in15 in)) (not ( = in16 in)))  ( >=  in16 in)) (not ( = in17 in)))  ( >=  in17 in)) (not ( = in18 in)))  ( >=  in18 in)) (not ( = in19 in)))  ( >=  in19 in)) (not ( = in20 in)))  ( >=  in20 in)) (not ( = in21 in)))  ( >=  in21 in)) (not ( = in22 in)))  ( >=  in22 in)) (not ( = in23 in)))  ( >=  in23 in)) (not ( = in24 in)))  ( >=  in24 in)) (not ( = in25 in)))  ( >=  in25 in)) (not ( = in26 in)))  ( >=  in26 in)) (not ( = in27 in)))  ( >=  in27 in)) (not ( = in28 in)))  ( >=  in28 in)) (not ( = in29 in)))  ( >=  in29 in)))",
      "response": "- Worst-case time complexity:\n  - For the final search operation (the measured part): O(N), because the BST is unbalanced and can degenerate into a chain of length N.\n  - For the entire program (build + search): O(N^2) to build the tree in the worst case (degenerate insertions) plus O(N) for search, i.e., overall O(N^2).\n\n- SMT2 constraint for input size n = 30:\n  To realize the worst-case search path, constrain the inserted values to be strictly increasing, creating a right-leaning chain, and pick the search key larger than all inserted values so the search descends through all 30 nodes.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(declare-const in8 Int)\n(declare-const in9 Int)\n(declare-const in10 Int)\n(declare-const in11 Int)\n(declare-const in12 Int)\n(declare-const in13 Int)\n(declare-const in14 Int)\n(declare-const in15 Int)\n(declare-const in16 Int)\n(declare-const in17 Int)\n(declare-const in18 Int)\n(declare-const in19 Int)\n(declare-const in20 Int)\n(declare-const in21 Int)\n(declare-const in22 Int)\n(declare-const in23 Int)\n(declare-const in24 Int)\n(declare-const in25 Int)\n(declare-const in26 Int)\n(declare-const in27 Int)\n(declare-const in28 Int)\n(declare-const in29 Int)\n(declare-const in Int)\n(assert (< in0 in1))\n(assert (< in1 in2))\n(assert (< in2 in3))\n(assert (< in3 in4))\n(assert (< in4 in5))\n(assert (< in5 in6))\n(assert (< in6 in7))\n(assert (< in7 in8))\n(assert (< in8 in9))\n(assert (< in9 in10))\n(assert (< in10 in11))\n(assert (< in11 in12))\n(assert (< in12 in13))\n(assert (< in13 in14))\n(assert (< in14 in15))\n(assert (< in15 in16))\n(assert (< in16 in17))\n(assert (< in17 in18))\n(assert (< in18 in19))\n(assert (< in19 in20))\n(assert (< in20 in21))\n(assert (< in21 in22))\n(assert (< in22 in23))\n(assert (< in23 in24))\n(assert (< in24 in25))\n(assert (< in25 in26))\n(assert (< in26 in27))\n(assert (< in27 in28))\n(assert (< in28 in29))\n(assert (> in in29))\n(check-sat)"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 in1)  ( >  in0 in1))  ( >=  in0 in2))  ( >  in0 in2))  ( >=  in1 in2))  ( >  in1 in2))  ( >=  in0 in3))  ( >  in0 in3))  ( >=  in1 in3))  ( >  in1 in3))  ( >=  in2 in3))  ( >  in2 in3))  ( >=  in0 in4))  ( >  in0 in4))  ( >=  in1 in4))  ( >  in1 in4))  ( >=  in2 in4))  ( >  in2 in4))  ( >=  in3 in4))  ( >  in3 in4))  ( >=  in0 in5))  ( >  in0 in5))  ( >=  in1 in5))  ( >  in1 in5))  ( >=  in2 in5))  ( >  in2 in5))  ( >=  in3 in5))  ( >  in3 in5))  ( >=  in4 in5))  ( >  in4 in5))  ( >=  in0 in6))  ( >  in0 in6))  ( >=  in1 in6))  ( >  in1 in6))  ( >=  in2 in6))  ( >  in2 in6))  ( >=  in3 in6))  ( >  in3 in6))  ( >=  in4 in6))  ( >  in4 in6))  ( >=  in5 in6))  ( >  in5 in6))  ( >=  in0 in7))  ( >  in0 in7))  ( >=  in1 in7))  ( >  in1 in7))  ( >=  in2 in7))  ( >  in2 in7))  ( >=  in3 in7))  ( >  in3 in7))  ( >=  in4 in7))  ( >  in4 in7))  ( >=  in5 in7))  ( >  in5 in7))  ( >=  in6 in7))  ( >  in6 in7)) (not ( = in0 in)))  ( >=  in0 in)) (not ( = in1 in)))  ( >=  in1 in)) (not ( = in2 in)))  ( >=  in2 in)) (not ( = in3 in)))  ( >=  in3 in)) (not ( = in4 in)))  ( >=  in4 in)) (not ( = in5 in)))  ( >=  in5 in)) (not ( = in6 in)))  ( >=  in6 in)) (not ( = in7 in)))  ( >=  in7 in)))",
      "response": "- Worst-case time complexity:\n  - Building the tree (inserts): O(N^2) in the worst case (when the BST becomes completely unbalanced).\n  - Final search (the part whose path length they measure): O(N) in the worst case (height of an unbalanced BST).\n\nFor input size n = 8 (i.e., eight inserted keys), a worst-case search occurs when the tree is a chain (e.g., strictly increasing inserts, creating a right-skewed tree) and the searched value is larger than all inserted keys, forcing the search to traverse all 8 nodes and then fail. The corresponding SMT2 constraints ensure:\n- Strictly increasing insert values: in0 < in1 < ... < in7\n- Search key greater than all inserted values: in > in7\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(declare-const in Int)\n(assert (< in0 in1))\n(assert (< in1 in2))\n(assert (< in2 in3))\n(assert (< in3 in4))\n(assert (< in4 in5))\n(assert (< in5 in6))\n(assert (< in6 in7))\n(assert (> in in7))\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 in1)  ( >  in0 in1))  ( >=  in0 in2))  ( >  in0 in2))  ( >=  in1 in2))  ( >  in1 in2))  ( >=  in0 in3))  ( >  in0 in3))  ( >=  in1 in3))  ( >  in1 in3))  ( >=  in2 in3))  ( >  in2 in3)) (not ( = in0 in)))  ( >=  in0 in)) (not ( = in1 in)))  ( >=  in1 in)) (not ( = in2 in)))  ( >=  in2 in)) (not ( = in3 in)))  ( >=  in3 in)))",
      "response": "- Worst-case time complexity:\n  - Building the tree: O(N^2) (unbalanced BST inserts can take linear time each).\n  - Final search: O(N) (height of an unbalanced tree).\n  - Overall runtime: O(N^2). If you measure only from the final search (as the comment suggests), it\u2019s O(N).\n\n- SMT2 constraint for n=4 that forces a maximally skewed tree and a failing search (worst-case path in search). We make the inserts strictly increasing so the tree is right-skewed, and search for a value greater than the largest element so it traverses all nodes and returns false.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in () Int)\n(assert (< in0 in1))\n(assert (< in1 in2))\n(assert (< in2 in3))\n(assert (> in in3))\n(check-sat)\n(get-model)"
    }
  },
  "MazeSolver": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class MazeSolver {\n    static final int N = 3;\n    static boolean[][] visited = new boolean[N][N];\n    \n    public static boolean solveMaze(int[][] maze, int x, int y) {\n        if(x == N-1 && y == N-1) return maze[x][y] == 0;\n        if(x < 0 || x >= N || y < 0 || y >= N) return false;\n        if(maze[x][y] == 1 || visited[x][y]) return false;\n        \n        visited[x][y] = true;\n        \n        // Explore all four directions.\n        if(solveMaze(maze, x+1, y)) return true;\n        if(solveMaze(maze, x-1, y)) return true;\n        if(solveMaze(maze, x, y+1)) return true;\n        if(solveMaze(maze, x, y-1)) return true;\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        int[][] maze = new int[N][N];\n        for(int i = 0; i < N; i++){\n            for(int j = 0; j < N; j++){\n                maze[i][j] = Debug.makeSymbolicInteger(\"cell_\" + i + \"_\" + j);\n                // Constrain each cell to be either 0 (free) or 1 (wall).\n                if(maze[i][j] != 0 && maze[i][j] != 1) return;\n            }\n        }\n        \n        // Ensure the start and goal cells are free.\n        maze[0][0] = 0;\n        maze[N-1][N-1] = 0;\n        \n        solveMaze(maze, 0, 0);\n    }\n}\n",
    "4": {
      "constants": "(declare-const cell_0_0 Int)",
      "assertions": "(assert (and (not ( = cell_0_0 0)) (not ( = cell_0_0 1))))",
      "response": "Worst-case time complexity: O(N^2)\n- Reason: The DFS visits each of the N^2 cells at most once (visited prevents revisits). Each visit does O(1) work plus exploring up to 4 neighbors, so overall O(N^2).\n\nSMT-LIB constraints for n = 4 (4x4 grid), matching the program\u2019s constraints: each cell is either 0 or 1; start (0,0) and goal (3,3) are 0.\n\nAnswer:\n(set-logic QF_LIA)\n\n; Declare 4x4 grid cells as integers\n(declare-fun cell_0_0 () Int)\n(declare-fun cell_0_1 () Int)\n(declare-fun cell_0_2 () Int)\n(declare-fun cell_0_3 () Int)\n(declare-fun cell_1_0 () Int)\n(declare-fun cell_1_1 () Int)\n(declare-fun cell_1_2 () Int)\n(declare-fun cell_1_3 () Int)\n(declare-fun cell_2_0 () Int)\n(declare-fun cell_2_1 () Int)\n(declare-fun cell_2_2 () Int)\n(declare-fun cell_2_3 () Int)\n(declare-fun cell_3_0 () Int)\n(declare-fun cell_3_1 () Int)\n(declare-fun cell_3_2 () Int)\n(declare-fun cell_3_3 () Int)\n\n; Each cell is either 0 (free) or 1 (wall)\n(assert (or (= cell_0_0 0) (= cell_0_0 1)))\n(assert (or (= cell_0_1 0) (= cell_0_1 1)))\n(assert (or (= cell_0_2 0) (= cell_0_2 1)))\n(assert (or (= cell_0_3 0) (= cell_0_3 1)))\n(assert (or (= cell_1_0 0) (= cell_1_0 1)))\n(assert (or (= cell_1_1 0) (= cell_1_1 1)))\n(assert (or (= cell_1_2 0) (= cell_1_2 1)))\n(assert (or (= cell_1_3 0) (= cell_1_3 1)))\n(assert (or (= cell_2_0 0) (= cell_2_0 1)))\n(assert (or (= cell_2_1 0) (= cell_2_1 1)))\n(assert (or (= cell_2_2 0) (= cell_2_2 1)))\n(assert (or (= cell_2_3 0) (= cell_2_3 1)))\n(assert (or (= cell_3_0 0) (= cell_3_0 1)))\n(assert (or (= cell_3_1 0) (= cell_3_1 1)))\n(assert (or (= cell_3_2 0) (= cell_3_2 1)))\n(assert (or (= cell_3_3 0) (= cell_3_3 1)))\n\n; Start and goal must be free\n(assert (= cell_0_0 0))\n(assert (= cell_3_3 0))\n\n(check-sat)\n(get-model)"
    },
    "16": {
      "constants": "(declare-const cell_0_0 Int)",
      "assertions": "(assert (and (not ( = cell_0_0 0)) (not ( = cell_0_0 1))))",
      "response": "Worst-case time complexity:\n- For an n\u00d7n maze, each cell is visited at most once due to the visited array, and each visit performs O(1) work (four recursive calls that immediately return on visited/bounds/wall). Thus the worst-case time complexity of solveMaze on a fixed input is O(n^2). The recursion stack/visited storage is also O(n^2).\n\nSMT2 constraint for n = 16 (cells constrained to be 0 or 1; start and goal forced to 0):\n\nAnswer:\n(set-logic QF_LIA)\n\n; Declare 16x16 integer variables for the maze cells\n(declare-fun cell_0_0 () Int)\n(declare-fun cell_0_1 () Int)\n(declare-fun cell_0_2 () Int)\n(declare-fun cell_0_3 () Int)\n(declare-fun cell_0_4 () Int)\n(declare-fun cell_0_5 () Int)\n(declare-fun cell_0_6 () Int)\n(declare-fun cell_0_7 () Int)\n(declare-fun cell_0_8 () Int)\n(declare-fun cell_0_9 () Int)\n(declare-fun cell_0_10 () Int)\n(declare-fun cell_0_11 () Int)\n(declare-fun cell_0_12 () Int)\n(declare-fun cell_0_13 () Int)\n(declare-fun cell_0_14 () Int)\n(declare-fun cell_0_15 () Int)\n\n(declare-fun cell_1_0 () Int)\n(declare-fun cell_1_1 () Int)\n(declare-fun cell_1_2 () Int)\n(declare-fun cell_1_3 () Int)\n(declare-fun cell_1_4 () Int)\n(declare-fun cell_1_5 () Int)\n(declare-fun cell_1_6 () Int)\n(declare-fun cell_1_7 () Int)\n(declare-fun cell_1_8 () Int)\n(declare-fun cell_1_9 () Int)\n(declare-fun cell_1_10 () Int)\n(declare-fun cell_1_11 () Int)\n(declare-fun cell_1_12 () Int)\n(declare-fun cell_1_13 () Int)\n(declare-fun cell_1_14 () Int)\n(declare-fun cell_1_15 () Int)\n\n(declare-fun cell_2_0 () Int)\n(declare-fun cell_2_1 () Int)\n(declare-fun cell_2_2 () Int)\n(declare-fun cell_2_3 () Int)\n(declare-fun cell_2_4 () Int)\n(declare-fun cell_2_5 () Int)\n(declare-fun cell_2_6 () Int)\n(declare-fun cell_2_7 () Int)\n(declare-fun cell_2_8 () Int)\n(declare-fun cell_2_9 () Int)\n(declare-fun cell_2_10 () Int)\n(declare-fun cell_2_11 () Int)\n(declare-fun cell_2_12 () Int)\n(declare-fun cell_2_13 () Int)\n(declare-fun cell_2_14 () Int)\n(declare-fun cell_2_15 () Int)\n\n(declare-fun cell_3_0 () Int)\n(declare-fun cell_3_1 () Int)\n(declare-fun cell_3_2 () Int)\n(declare-fun cell_3_3 () Int)\n(declare-fun cell_3_4 () Int)\n(declare-fun cell_3_5 () Int)\n(declare-fun cell_3_6 () Int)\n(declare-fun cell_3_7 () Int)\n(declare-fun cell_3_8 () Int)\n(declare-fun cell_3_9 () Int)\n(declare-fun cell_3_10 () Int)\n(declare-fun cell_3_11 () Int)\n(declare-fun cell_3_12 () Int)\n(declare-fun cell_3_13 () Int)\n(declare-fun cell_3_14 () Int)\n(declare-fun cell_3_15 () Int)\n\n(declare-fun cell_4_0 () Int)\n(declare-fun cell_4_1 () Int)\n(declare-fun cell_4_2 () Int)\n(declare-fun cell_4_3 () Int)\n(declare-fun cell_4_4 () Int)\n(declare-fun cell_4_5 () Int)\n(declare-fun cell_4_6 () Int)\n(declare-fun cell_4_7 () Int)\n(declare-fun cell_4_8 () Int)\n(declare-fun cell_4_9 () Int)\n(declare-fun cell_4_10 () Int)\n(declare-fun cell_4_11 () Int)\n(declare-fun cell_4_12 () Int)\n(declare-fun cell_4_13 () Int)\n(declare-fun cell_4_14 () Int)\n(declare-fun cell_4_15 () Int)\n\n(declare-fun cell_5_0 () Int)\n(declare-fun cell_5_1 () Int)\n(declare-fun cell_5_2 () Int)\n(declare-fun cell_5_3 () Int)\n(declare-fun cell_5_4 () Int)\n(declare-fun cell_5_5 () Int)\n(declare-fun cell_5_6 () Int)\n(declare-fun cell_5_7 () Int)\n(declare-fun cell_5_8 () Int)\n(declare-fun cell_5_9 () Int)\n(declare-fun cell_5_10 () Int)\n(declare-fun cell_5_11 () Int)\n(declare-fun cell_5_12 () Int)\n(declare-fun cell_5_13 () Int)\n(declare-fun cell_5_14 () Int)\n(declare-fun cell_5_15 () Int)\n\n(declare-fun cell_6_0 () Int)\n(declare-fun cell_6_1 () Int)\n(declare-fun cell_6_2 () Int)\n(declare-fun cell_6_3 () Int)\n(declare-fun cell_6_4 () Int)\n(declare-fun cell_6_5 () Int)\n(declare-fun cell_6_6 () Int)\n(declare-fun cell_6_7 () Int)\n(declare-fun cell_6_8 () Int)\n(declare-fun cell_6_9 () Int)\n(declare-fun cell_6_10 () Int)\n(declare-fun cell_6_11 () Int)\n(declare-fun cell_6_12 () Int)\n(declare-fun cell_6_13 () Int)\n(declare-fun cell_6_14 () Int)\n(declare-fun cell_6_15 () Int)\n\n(declare-fun cell_7_0 () Int)\n(declare-fun cell_7_1 () Int)\n(declare-fun cell_7_2 () Int)\n(declare-fun cell_7_3 () Int)\n(declare-fun cell_7_4 () Int)\n(declare-fun cell_7_5 () Int)\n(declare-fun cell_7_6 () Int)\n(declare-fun cell_7_7 () Int)\n(declare-fun cell_7_8 () Int)\n(declare-fun cell_7_9 () Int)\n(declare-fun cell_7_10 () Int)\n(declare-fun cell_7_11 () Int)\n(declare-fun cell_7_12 () Int)\n(declare-fun cell_7_13 () Int)\n(declare-fun cell_7_14 () Int)\n(declare-fun cell_7_15 () Int)\n\n(declare-fun cell_8_0 () Int)\n(declare-fun cell_8_1 () Int)\n(declare-fun cell_8_2 () Int)\n(declare-fun cell_8_3 () Int)\n(declare-fun cell_8_4 () Int)\n(declare-fun cell_8_5 () Int)\n(declare-fun cell_8_6 () Int)\n(declare-fun cell_8_7 () Int)\n(declare-fun cell_8_8 () Int)\n(declare-fun cell_8_9 () Int)\n(declare-fun cell_8_10 () Int)\n(declare-fun cell_8_11 () Int)\n(declare-fun cell_8_12 () Int)\n(declare-fun cell_8_13 () Int)\n(declare-fun cell_8_14 () Int)\n(declare-fun cell_8_15 () Int)\n\n(declare-fun cell_9_0 () Int)\n(declare-fun cell_9_1 () Int)\n(declare-fun cell_9_2 () Int)\n(declare-fun cell_9_3 () Int)\n(declare-fun cell_9_4 () Int)\n(declare-fun cell_9_5 () Int)\n(declare-fun cell_9_6 () Int)\n(declare-fun cell_9_7 () Int)\n(declare-fun cell_9_8 () Int)\n(declare-fun cell_9_9 () Int)\n(declare-fun cell_9_10 () Int)\n(declare-fun cell_9_11 () Int)\n(declare-fun cell_9_12 () Int)\n(declare-fun cell_9_13 () Int)\n(declare-fun cell_9_14 () Int)\n(declare-fun cell_9_15 () Int)\n\n(declare-fun cell_10_0 () Int)\n(declare-fun cell_10_1 () Int)\n(declare-fun cell_10_2 () Int)\n(declare-fun cell_10_3 () Int)\n(declare-fun cell_10_4 () Int)\n(declare-fun cell_10_5 () Int)\n(declare-fun cell_10_6 () Int)\n(declare-fun cell_10_7 () Int)\n(declare-fun cell_10_8 () Int)\n(declare-fun cell_10_9 () Int)\n(declare-fun cell_10_10 () Int)\n(declare-fun cell_10_11 () Int)\n(declare-fun cell_10_12 () Int)\n(declare-fun cell_10_13 () Int)\n(declare-fun cell_10_14 () Int)\n(declare-fun cell_10_15 () Int)\n\n(declare-fun cell_11_0 () Int)\n(declare-fun cell_11_1 () Int)\n(declare-fun cell_11_2 () Int)\n(declare-fun cell_11_3 () Int)\n(declare-fun cell_11_4 () Int)\n(declare-fun cell_11_5 () Int)\n(declare-fun cell_11_6 () Int)\n(declare-fun cell_11_7 () Int)\n(declare-fun cell_11_8 () Int)\n(declare-fun cell_11_9 () Int)\n(declare-fun cell_11_10 () Int)\n(declare-fun cell_11_11 () Int)\n(declare-fun cell_11_12 () Int)\n(declare-fun cell_11_13 () Int)\n(declare-fun cell_11_14 () Int)\n(declare-fun cell_11_15 () Int)\n\n(declare-fun cell_12_0 () Int)\n(declare-fun cell_12_1 () Int)\n(declare-fun cell_12_2 () Int)\n(declare-fun cell_12_3 () Int)\n(declare-fun cell_12_4 () Int)\n(declare-fun cell_12_5 () Int)\n(declare-fun cell_12_6 () Int)\n(declare-fun cell_12_7 () Int)\n(declare-fun cell_12_8 () Int)\n(declare-fun cell_12_9 () Int)\n(declare-fun cell_12_10 () Int)\n(declare-fun cell_12_11 () Int)\n(declare-fun cell_12_12 () Int)\n(declare-fun cell_12_13 () Int)\n(declare-fun cell_12_14 () Int)\n(declare-fun cell_12_15 () Int)\n\n(declare-fun cell_13_0 () Int)\n(declare-fun cell_13_1 () Int)\n(declare-fun cell_13_2 () Int)\n(declare-fun cell_13_3 () Int)\n(declare-fun cell_13_4 () Int)\n(declare-fun cell_13_5 () Int)\n(declare-fun cell_13_6 () Int)\n(declare-fun cell_13_7 () Int)\n(declare-fun cell_13_8 () Int)\n(declare-fun cell_13_9 () Int)\n(declare-fun cell_13_10 () Int)\n(declare-fun cell_13_11 () Int)\n(declare-fun cell_13_12 () Int)\n(declare-fun cell_13_13 () Int)\n(declare-fun cell_13_14 () Int)\n(declare-fun cell_13_15 () Int)\n\n(declare-fun cell_14_0 () Int)\n(declare-fun cell_14_1 () Int)\n(declare-fun cell_14_2 () Int)\n(declare-fun cell_14_3 () Int)\n(declare-fun cell_14_4 () Int)\n(declare-fun cell_14_5 () Int)\n(declare-fun cell_14_6 () Int)\n(declare-fun cell_14_7 () Int)\n(declare-fun cell_14_8 () Int)\n(declare-fun cell_14_9 () Int)\n(declare-fun cell_14_10 () Int)\n(declare-fun cell_14_11 () Int)\n(declare-fun cell_14_12 () Int)\n(declare-fun cell_14_13 () Int)\n(declare-fun cell_14_14 () Int)\n(declare-fun cell_14_15 () Int)\n\n(declare-fun cell_15_0 () Int)\n(declare-fun cell_15_1 () Int)\n(declare-fun cell_15_2 () Int)\n(declare-fun cell_15_3 () Int)\n(declare-fun cell_15_4 () Int)\n(declare-fun cell_15_5 () Int)\n(declare-fun cell_15_6 () Int)\n(declare-fun cell_15_7 () Int)\n(declare-fun cell_15_8 () Int)\n(declare-fun cell_15_9 () Int)\n(declare-fun cell_15_10 () Int)\n(declare-fun cell_15_11 () Int)\n(declare-fun cell_15_12 () Int)\n(declare-fun cell_15_13 () Int)\n(declare-fun cell_15_14 () Int)\n(declare-fun cell_15_15 () Int)\n\n; Constrain each cell to be either 0 (free) or 1 (wall)\n(assert (or (= cell_0_0 0) (= cell_0_0 1)))\n(assert (or (= cell_0_1 0) (= cell_0_1 1)))\n(assert (or (= cell_0_2 0) (= cell_0_2 1)))\n(assert (or (= cell_0_3 0) (= cell_0_3 1)))\n(assert (or (= cell_0_4 0) (= cell_0_4 1)))\n(assert (or (= cell_0_5 0) (= cell_0_5 1)))\n(assert (or (= cell_0_6 0) (= cell_0_6 1)))\n(assert (or (= cell_0_7 0) (= cell_0_7 1)))\n(assert (or (= cell_0_8 0) (= cell_0_8 1)))\n(assert (or (= cell_0_9 0) (= cell_0_9 1)))\n(assert (or (= cell_0_10 0) (= cell_0_10 1)))\n(assert (or (= cell_0_11 0) (= cell_0_11 1)))\n(assert (or (= cell_0_12 0) (= cell_0_12 1)))\n(assert (or (= cell_0_13 0) (= cell_0_13 1)))\n(assert (or (= cell_0_14 0) (= cell_0_14 1)))\n(assert (or (= cell_0_15 0) (= cell_0_15 1)))\n\n(assert (or (= cell_1_0 0) (= cell_1_0 1)))\n(assert (or (= cell_1_1 0) (= cell_1_1 1)))\n(assert (or (= cell_1_2 0) (= cell_1_2 1)))\n(assert (or (= cell_1_3 0) (= cell_1_3 1)))\n(assert (or (= cell_1_4 0) (= cell_1_4 1)))\n(assert (or (= cell_1_5 0) (= cell_1_5 1)))\n(assert (or (= cell_1_6 0) (= cell_1_6 1)))\n(assert (or (= cell_1_7 0) (= cell_1_7 1)))\n(assert (or (= cell_1_8 0) (= cell_1_8 1)))\n(assert (or (= cell_1_9 0) (= cell_1_9 1)))\n(assert (or (= cell_1_10 0) (= cell_1_10 1)))\n(assert (or (= cell_1_11 0) (= cell_1_11 1)))\n(assert (or (= cell_1_12 0) (= cell_1_12 1)))\n(assert (or (= cell_1_13 0) (= cell_1_13 1)))\n(assert (or (= cell_1_14 0) (= cell_1_14 1)))\n(assert (or (= cell_1_15 0) (= cell_1_15 1)))\n\n(assert (or (= cell_2_0 0) (= cell_2_0 1)))\n(assert (or (= cell_2_1 0) (= cell_2_1 1)))\n(assert (or (= cell_2_2 0) (= cell_2_2 1)))\n(assert (or (= cell_2_3 0) (= cell_2_3 1)))\n(assert (or (= cell_2_4 0) (= cell_2_4 1)))\n(assert (or (= cell_2_5 0) (= cell_2_5 1)))\n(assert (or (= cell_2_6 0) (= cell_2_6 1)))\n(assert (or (= cell_2_7 0) (= cell_2_7 1)))\n(assert (or (= cell_2_8 0) (= cell_2_8 1)))\n(assert (or (= cell_2_9 0) (= cell_2_9 1)))\n(assert (or (= cell_2_10 0) (= cell_2_10 1)))\n(assert (or (= cell_2_11 0) (= cell_2_11 1)))\n(assert (or (= cell_2_12 0) (= cell_2_12 1)))\n(assert (or (= cell_2_13 0) (= cell_2_13 1)))\n(assert (or (= cell_2_14 0) (= cell_2_14 1)))\n(assert (or (= cell_2_15 0) (= cell_2_15 1)))\n\n(assert (or (= cell_3_0 0) (= cell_3_0 1)))\n(assert (or (= cell_3_1 0) (= cell_3_1 1)))\n(assert (or (= cell_3_2 0) (= cell_3_2 1)))\n(assert (or (= cell_3_3 0) (= cell_3_3 1)))\n(assert (or (= cell_3_4 0) (= cell_3_4 1)))\n(assert (or (= cell_3_5 0) (= cell_3_5 1)))\n(assert (or (= cell_3_6 0) (= cell_3_6 1)))\n(assert (or (= cell_3_7 0) (= cell_3_7 1)))\n(assert (or (= cell_3_8 0) (= cell_3_8 1)))\n(assert (or (= cell_3_9 0) (= cell_3_9 1)))\n(assert (or (= cell_3_10 0) (= cell_3_10 1)))\n(assert (or (= cell_3_11 0) (= cell_3_11 1)))\n(assert (or (= cell_3_12 0) (= cell_3_12 1)))\n(assert (or (= cell_3_13 0) (= cell_3_13 1)))\n(assert (or (= cell_3_14 0) (= cell_3_14 1)))\n(assert (or (= cell_3_15 0) (= cell_3_15 1)))\n\n(assert (or (= cell_4_0 0) (= cell_4_0 1)))\n(assert (or (= cell_4_1 0) (= cell_4_1 1)))\n(assert (or (= cell_4_2 0) (= cell_4_2 1)))\n(assert (or (= cell_4_3 0) (= cell_4_3 1)))\n(assert (or (= cell_4_4 0) (= cell_4_4 1)))\n(assert (or (= cell_4_5 0) (= cell_4_5 1)))\n(assert (or (= cell_4_6 0) (= cell_4_6 1)))\n(assert (or (= cell_4_7 0) (= cell_4_7 1)))\n(assert (or (= cell_4_8 0) (= cell_4_8 1)))\n(assert (or (= cell_4_9 0) (= cell_4_9 1)))\n(assert (or (= cell_4_10 0) (= cell_4_10 1)))\n(assert (or (= cell_4_11 0) (= cell_4_11 1)))\n(assert (or (= cell_4_12 0) (= cell_4_12 1)))\n(assert (or (= cell_4_13 0) (= cell_4_13 1)))\n(assert (or (= cell_4_14 0) (= cell_4_14 1)))\n(assert (or (= cell_4_15 0) (= cell_4_15 1)))\n\n(assert (or (= cell_5_0 0) (= cell_5_0 1)))\n(assert (or (= cell_5_1 0) (= cell_5_1 1)))\n(assert (or (= cell_5_2 0) (= cell_5_2 1)))\n(assert (or (= cell_5_3 0) (= cell_5_3 1)))\n(assert (or (= cell_5_4 0) (= cell_5_4 1)))\n(assert (or (= cell_5_5 0) (= cell_5_5 1)))\n(assert (or (= cell_5_6 0) (= cell_5_6 1)))\n(assert (or (= cell_5_7 0) (= cell_5_7 1)))\n(assert (or (= cell_5_8 0) (= cell_5_8 1)))\n(assert (or (= cell_5_9 0) (= cell_5_9 1)))\n(assert (or (= cell_5_10 0) (= cell_5_10 1)))\n(assert (or (= cell_5_11 0) (= cell_5_11 1)))\n(assert (or (= cell_5_12 0) (= cell_5_12 1)))\n(assert (or (= cell_5_13 0) (= cell_5_13 1)))\n(assert (or (= cell_5_14 0) (= cell_5_14 1)))\n(assert (or (= cell_5_15 0) (= cell_5_15 1)))\n\n(assert (or (= cell_6_0 0) (= cell_6_0 1)))\n(assert (or (= cell_6_1 0) (= cell_6_1 1)))\n(assert (or (= cell_6_2 0) (= cell_6_2 1)))\n(assert (or (= cell_6_3 0) (= cell_6_3 1)))\n(assert (or (= cell_6_4 0) (= cell_6_4 1)))\n(assert (or (= cell_6_5 0) (= cell_6_5 1)))\n(assert (or (= cell_6_6 0) (= cell_6_6 1)))\n(assert (or (= cell_6_7 0) (= cell_6_7 1)))\n(assert (or (= cell_6_8 0) (= cell_6_8 1)))\n(assert (or (= cell_6_9 0) (= cell_6_9 1)))\n(assert (or (= cell_6_10 0) (= cell_6_10 1)))\n(assert (or (= cell_6_11 0) (= cell_6_11 1)))\n(assert (or (= cell_6_12 0) (= cell_6_12 1)))\n(assert (or (= cell_6_13 0) (= cell_6_13 1)))\n(assert (or (= cell_6_14 0) (= cell_6_14 1)))\n(assert (or (= cell_6_15 0) (= cell_6_15 1)))\n\n(assert (or (= cell_7_0 0) (= cell_7_0 1)))\n(assert (or (= cell_7_1 0) (= cell_7_1 1)))\n(assert (or (= cell_7_2 0) (= cell_7_2 1)))\n(assert (or (= cell_7_3 0) (= cell_7_3 1)))\n(assert (or (= cell_7_4 0) (= cell_7_4 1)))\n(assert (or (= cell_7_5 0) (= cell_7_5 1)))\n(assert (or (= cell_7_6 0) (= cell_7_6 1)))\n(assert (or (= cell_7_7 0) (= cell_7_7 1)))\n(assert (or (= cell_7_8 0) (= cell_7_8 1)))\n(assert (or (= cell_7_9 0) (= cell_7_9 1)))\n(assert (or (= cell_7_10 0) (= cell_7_10 1)))\n(assert (or (= cell_7_11 0) (= cell_7_11 1)))\n(assert (or (= cell_7_12 0) (= cell_7_12 1)))\n(assert (or (= cell_7_13 0) (= cell_7_13 1)))\n(assert (or (= cell_7_14 0) (= cell_7_14 1)))\n(assert (or (= cell_7_15 0) (= cell_7_15 1)))\n\n(assert (or (= cell_8_0 0) (= cell_8_0 1)))\n(assert (or (= cell_8_1 0) (= cell_8_1 1)))\n(assert (or (= cell_8_2 0) (= cell_8_2 1)))\n(assert (or (= cell_8_3 0) (= cell_8_3 1)))\n(assert (or (= cell_8_4 0) (= cell_8_4 1)))\n(assert (or (= cell_8_5 0) (= cell_8_5 1)))\n(assert (or (= cell_8_6 0) (= cell_8_6 1)))\n(assert (or (= cell_8_7 0) (= cell_8_7 1)))\n(assert (or (= cell_8_8 0) (= cell_8_8 1)))\n(assert (or (= cell_8_9 0) (= cell_8_9 1)))\n(assert (or (= cell_8_10 0) (= cell_8_10 1)))\n(assert (or (= cell_8_11 0) (= cell_8_11 1)))\n(assert (or (= cell_8_12 0) (= cell_8_12 1)))\n(assert (or (= cell_8_13 0) (= cell_8_13 1)))\n(assert (or (= cell_8_14 0) (= cell_8_14 1)))\n(assert (or (= cell_8_15 0) (= cell_8_15 1)))\n\n(assert (or (= cell_9_0 0) (= cell_9_0 1)))\n(assert (or (= cell_9_1 0) (= cell_9_1 1)))\n(assert (or (= cell_9_2 0) (= cell_9_2 1)))\n(assert (or (= cell_9_3 0) (= cell_9_3 1)))\n(assert (or (= cell_9_4 0) (= cell_9_4 1)))\n(assert (or (= cell_9_5 0) (= cell_9_5 1)))\n(assert (or (= cell_9_6 0) (= cell_9_6 1)))\n(assert (or (= cell_9_7 0) (= cell_9_7 1)))\n(assert (or (= cell_9_8 0) (= cell_9_8 1)))\n(assert (or (= cell_9_9 0) (= cell_9_9 1)))\n(assert (or (= cell_9_10 0) (= cell_9_10 1)))\n(assert (or (= cell_9_11 0) (= cell_9_11 1)))\n(assert (or (= cell_9_12 0) (= cell_9_12 1)))\n(assert (or (= cell_9_13 0) (= cell_9_13 1)))\n(assert (or (= cell_9_14 0) (= cell_9_14 1)))\n(assert (or (= cell_9_15 0) (= cell_9_15 1)))\n\n(assert (or (= cell_10_0 0) (= cell_10_0 1)))\n(assert (or (= cell_10_1 0) (= cell_10_1 1)))\n(assert (or (= cell_10_2 0) (= cell_10_2 1)))\n(assert (or (= cell_10_3 0) (= cell_10_3 1)))\n(assert (or (= cell_10_4 0) (= cell_10_4 1)))\n(assert (or (= cell_10_5 0) (= cell_10_5 1)))\n(assert (or (= cell_10_6 0) (= cell_10_6 1)))\n(assert (or (= cell_10_7 0) (= cell_10_7 1)))\n(assert (or (= cell_10_8 0) (= cell_10_8 1)))\n(assert (or (= cell_10_9 0) (= cell_10_9 1)))\n(assert (or (= cell_10_10 0) (= cell_10_10 1)))\n(assert (or (= cell_10_11 0) (= cell_10_11 1)))\n(assert (or (= cell_10_12 0) (= cell_10_12 1)))\n(assert (or (= cell_10_13 0) (= cell_10_13 1)))\n(assert (or (= cell_10_14 0) (= cell_10_14 1)))\n(assert (or (= cell_10_15 0) (= cell_10_15 1)))\n\n(assert (or (= cell_11_0 0) (= cell_11_0 1)))\n(assert (or (= cell_11_1 0) (= cell_11_1 1)))\n(assert (or (= cell_11_2 0) (= cell_11_2 1)))\n(assert (or (= cell_11_3 0) (= cell_11_3 1)))\n(assert (or (= cell_11_4 0) (= cell_11_4 1)))\n(assert (or (= cell_11_5 0) (= cell_11_5 1)))\n(assert (or (= cell_11_6 0) (= cell_11_6 1)))\n(assert (or (= cell_11_7 0) (= cell_11_7 1)))\n(assert (or (= cell_11_8 0) (= cell_11_8 1)))\n(assert (or (= cell_11_9 0) (= cell_11_9 1)))\n(assert (or (= cell_11_10 0) (= cell_11_10 1)))\n(assert (or (= cell_11_11 0) (= cell_11_11 1)))\n(assert (or (= cell_11_12 0) (= cell_11_12 1)))\n(assert (or (= cell_11_13 0) (= cell_11_13 1)))\n(assert (or (= cell_11_14 0) (= cell_11_14 1)))\n(assert (or (= cell_11_15 0) (= cell_11_15 1)))\n\n(assert (or (= cell_12_0 0) (= cell_12_0 1)))\n(assert (or (= cell_12_1 0) (= cell_12_1 1)))\n(assert (or (= cell_12_2 0) (= cell_12_2 1)))\n(assert (or (= cell_12_3 0) (= cell_12_3 1)))\n(assert (or (= cell_12_4 0) (= cell_12_4 1)))\n(assert (or (= cell_12_5 0) (= cell_12_5 1)))\n(assert (or (= cell_12_6 0) (= cell_12_6 1)))\n(assert (or (= cell_12_7 0) (= cell_12_7 1)))\n(assert (or (= cell_12_8 0) (= cell_12_8 1)))\n(assert (or (= cell_12_9 0) (= cell_12_9 1)))\n(assert (or (= cell_12_10 0) (= cell_12_10 1)))\n(assert (or (= cell_12_11 0) (= cell_12_11 1)))\n(assert (or (= cell_12_12 0) (= cell_12_12 1)))\n(assert (or (= cell_12_13 0) (= cell_12_13 1)))\n(assert (or (= cell_12_14 0) (= cell_12_14 1)))\n(assert (or (= cell_12_15 0) (= cell_12_15 1)))\n\n(assert (or (= cell_13_0 0) (= cell_13_0 1)))\n(assert (or (= cell_13_1 0) (= cell_13_1 1)))\n(assert (or (= cell_13_2 0) (= cell_13_2 1)))\n(assert (or (= cell_13_3 0) (= cell_13_3 1)))\n(assert (or (= cell_13_4 0) (= cell_13_4 1)))\n(assert (or (= cell_13_5 0) (= cell_13_5 1)))\n(assert (or (= cell_13_6 0) (= cell_13_6 1)))\n(assert (or (= cell_13_7 0) (= cell_13_7 1)))\n(assert (or (= cell_13_8 0) (= cell_13_8 1)))\n(assert (or (= cell_13_9 0) (= cell_13_9 1)))\n(assert (or (= cell_13_10 0) (= cell_13_10 1)))\n(assert (or (= cell_13_11 0) (= cell_13_11 1)))\n(assert (or (= cell_13_12 0) (= cell_13_12 1)))\n(assert (or (= cell_13_13 0) (= cell_13_13 1)))\n(assert (or (= cell_13_14 0) (= cell_13_14 1)))\n(assert (or (= cell_13_15 0) (= cell_13_15 1)))\n\n(assert (or (= cell_14_0 0) (= cell_14_0 1)))\n(assert (or (= cell_14_1 0) (= cell_14_1 1)))\n(assert (or (= cell_14_2 0) (= cell_14_2 1)))\n(assert (or (= cell_14_3 0) (= cell_14_3 1)))\n(assert (or (= cell_14_4 0) (= cell_14_4 1)))\n(assert (or (= cell_14_5 0) (= cell_14_5 1)))\n(assert (or (= cell_14_6 0) (= cell_14_6 1)))\n(assert (or (= cell_14_7 0) (= cell_14_7 1)))\n(assert (or (= cell_14_8 0) (= cell_14_8 1)))\n(assert (or (= cell_14_9 0) (= cell_14_9 1)))\n(assert (or (= cell_14_10 0) (= cell_14_10 1)))\n(assert (or (= cell_14_11 0) (= cell_14_11 1)))\n(assert (or (= cell_14_12 0) (= cell_14_12 1)))\n(assert (or (= cell_14_13 0) (= cell_14_13 1)))\n(assert (or (= cell_14_14 0) (= cell_14_14 1)))\n(assert (or (= cell_14_15 0) (= cell_14_15 1)))\n\n(assert (or (= cell_15_0 0) (= cell_15_0 1)))\n(assert (or (= cell_15_1 0) (= cell_15_1 1)))\n(assert (or (= cell_15_2 0) (= cell_15_2 1)))\n(assert (or (= cell_15_3 0) (= cell_15_3 1)))\n(assert (or (= cell_15_4 0) (= cell_15_4 1)))\n(assert (or (= cell_15_5 0) (= cell_15_5 1)))\n(assert (or (= cell_15_6 0) (= cell_15_6 1)))\n(assert (or (= cell_15_7 0) (= cell_15_7 1)))\n(assert (or (= cell_15_8 0) (= cell_15_8 1)))\n(assert (or (= cell_15_9 0) (= cell_15_9 1)))\n(assert (or (= cell_15_10 0) (= cell_15_10 1)))\n(assert (or (= cell_15_11 0) (= cell_15_11 1)))\n(assert (or (= cell_15_12 0) (= cell_15_12 1)))\n(assert (or (= cell_15_13 0) (= cell_15_13 1)))\n(assert (or (= cell_15_14 0) (= cell_15_14 1)))\n(assert (or (= cell_15_15 0) (= cell_15_15 1)))\n\n; Force start and goal to be free\n(assert (= cell_0_0 0))\n(assert (= cell_15_15 0))\n\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const cell_0_0 Int)",
      "assertions": "(assert (and (not ( = cell_0_0 0)) (not ( = cell_0_0 1))))",
      "response": "Worst-case time complexity (for a concrete 2D grid of size n\u00d7n): O(n^2). The DFS with a visited set touches each cell at most once and considers a constant number of neighbors per cell.\n\nSpace complexity: O(n^2) (visited array plus recursion stack).\n\nAnswer:\n(set-logic QF_LIA)\n\n; Declarations for 8x8 grid cells\n(declare-fun cell_0_0 () Int)\n(declare-fun cell_0_1 () Int)\n(declare-fun cell_0_2 () Int)\n(declare-fun cell_0_3 () Int)\n(declare-fun cell_0_4 () Int)\n(declare-fun cell_0_5 () Int)\n(declare-fun cell_0_6 () Int)\n(declare-fun cell_0_7 () Int)\n\n(declare-fun cell_1_0 () Int)\n(declare-fun cell_1_1 () Int)\n(declare-fun cell_1_2 () Int)\n(declare-fun cell_1_3 () Int)\n(declare-fun cell_1_4 () Int)\n(declare-fun cell_1_5 () Int)\n(declare-fun cell_1_6 () Int)\n(declare-fun cell_1_7 () Int)\n\n(declare-fun cell_2_0 () Int)\n(declare-fun cell_2_1 () Int)\n(declare-fun cell_2_2 () Int)\n(declare-fun cell_2_3 () Int)\n(declare-fun cell_2_4 () Int)\n(declare-fun cell_2_5 () Int)\n(declare-fun cell_2_6 () Int)\n(declare-fun cell_2_7 () Int)\n\n(declare-fun cell_3_0 () Int)\n(declare-fun cell_3_1 () Int)\n(declare-fun cell_3_2 () Int)\n(declare-fun cell_3_3 () Int)\n(declare-fun cell_3_4 () Int)\n(declare-fun cell_3_5 () Int)\n(declare-fun cell_3_6 () Int)\n(declare-fun cell_3_7 () Int)\n\n(declare-fun cell_4_0 () Int)\n(declare-fun cell_4_1 () Int)\n(declare-fun cell_4_2 () Int)\n(declare-fun cell_4_3 () Int)\n(declare-fun cell_4_4 () Int)\n(declare-fun cell_4_5 () Int)\n(declare-fun cell_4_6 () Int)\n(declare-fun cell_4_7 () Int)\n\n(declare-fun cell_5_0 () Int)\n(declare-fun cell_5_1 () Int)\n(declare-fun cell_5_2 () Int)\n(declare-fun cell_5_3 () Int)\n(declare-fun cell_5_4 () Int)\n(declare-fun cell_5_5 () Int)\n(declare-fun cell_5_6 () Int)\n(declare-fun cell_5_7 () Int)\n\n(declare-fun cell_6_0 () Int)\n(declare-fun cell_6_1 () Int)\n(declare-fun cell_6_2 () Int)\n(declare-fun cell_6_3 () Int)\n(declare-fun cell_6_4 () Int)\n(declare-fun cell_6_5 () Int)\n(declare-fun cell_6_6 () Int)\n(declare-fun cell_6_7 () Int)\n\n(declare-fun cell_7_0 () Int)\n(declare-fun cell_7_1 () Int)\n(declare-fun cell_7_2 () Int)\n(declare-fun cell_7_3 () Int)\n(declare-fun cell_7_4 () Int)\n(declare-fun cell_7_5 () Int)\n(declare-fun cell_7_6 () Int)\n(declare-fun cell_7_7 () Int)\n\n; Each cell is either 0 (free) or 1 (wall)\n(assert (or (= cell_0_0 0) (= cell_0_0 1)))\n(assert (or (= cell_0_1 0) (= cell_0_1 1)))\n(assert (or (= cell_0_2 0) (= cell_0_2 1)))\n(assert (or (= cell_0_3 0) (= cell_0_3 1)))\n(assert (or (= cell_0_4 0) (= cell_0_4 1)))\n(assert (or (= cell_0_5 0) (= cell_0_5 1)))\n(assert (or (= cell_0_6 0) (= cell_0_6 1)))\n(assert (or (= cell_0_7 0) (= cell_0_7 1)))\n\n(assert (or (= cell_1_0 0) (= cell_1_0 1)))\n(assert (or (= cell_1_1 0) (= cell_1_1 1)))\n(assert (or (= cell_1_2 0) (= cell_1_2 1)))\n(assert (or (= cell_1_3 0) (= cell_1_3 1)))\n(assert (or (= cell_1_4 0) (= cell_1_4 1)))\n(assert (or (= cell_1_5 0) (= cell_1_5 1)))\n(assert (or (= cell_1_6 0) (= cell_1_6 1)))\n(assert (or (= cell_1_7 0) (= cell_1_7 1)))\n\n(assert (or (= cell_2_0 0) (= cell_2_0 1)))\n(assert (or (= cell_2_1 0) (= cell_2_1 1)))\n(assert (or (= cell_2_2 0) (= cell_2_2 1)))\n(assert (or (= cell_2_3 0) (= cell_2_3 1)))\n(assert (or (= cell_2_4 0) (= cell_2_4 1)))\n(assert (or (= cell_2_5 0) (= cell_2_5 1)))\n(assert (or (= cell_2_6 0) (= cell_2_6 1)))\n(assert (or (= cell_2_7 0) (= cell_2_7 1)))\n\n(assert (or (= cell_3_0 0) (= cell_3_0 1)))\n(assert (or (= cell_3_1 0) (= cell_3_1 1)))\n(assert (or (= cell_3_2 0) (= cell_3_2 1)))\n(assert (or (= cell_3_3 0) (= cell_3_3 1)))\n(assert (or (= cell_3_4 0) (= cell_3_4 1)))\n(assert (or (= cell_3_5 0) (= cell_3_5 1)))\n(assert (or (= cell_3_6 0) (= cell_3_6 1)))\n(assert (or (= cell_3_7 0) (= cell_3_7 1)))\n\n(assert (or (= cell_4_0 0) (= cell_4_0 1)))\n(assert (or (= cell_4_1 0) (= cell_4_1 1)))\n(assert (or (= cell_4_2 0) (= cell_4_2 1)))\n(assert (or (= cell_4_3 0) (= cell_4_3 1)))\n(assert (or (= cell_4_4 0) (= cell_4_4 1)))\n(assert (or (= cell_4_5 0) (= cell_4_5 1)))\n(assert (or (= cell_4_6 0) (= cell_4_6 1)))\n(assert (or (= cell_4_7 0) (= cell_4_7 1)))\n\n(assert (or (= cell_5_0 0) (= cell_5_0 1)))\n(assert (or (= cell_5_1 0) (= cell_5_1 1)))\n(assert (or (= cell_5_2 0) (= cell_5_2 1)))\n(assert (or (= cell_5_3 0) (= cell_5_3 1)))\n(assert (or (= cell_5_4 0) (= cell_5_4 1)))\n(assert (or (= cell_5_5 0) (= cell_5_5 1)))\n(assert (or (= cell_5_6 0) (= cell_5_6 1)))\n(assert (or (= cell_5_7 0) (= cell_5_7 1)))\n\n(assert (or (= cell_6_0 0) (= cell_6_0 1)))\n(assert (or (= cell_6_1 0) (= cell_6_1 1)))\n(assert (or (= cell_6_2 0) (= cell_6_2 1)))\n(assert (or (= cell_6_3 0) (= cell_6_3 1)))\n(assert (or (= cell_6_4 0) (= cell_6_4 1)))\n(assert (or (= cell_6_5 0) (= cell_6_5 1)))\n(assert (or (= cell_6_6 0) (= cell_6_6 1)))\n(assert (or (= cell_6_7 0) (= cell_6_7 1)))\n\n(assert (or (= cell_7_0 0) (= cell_7_0 1)))\n(assert (or (= cell_7_1 0) (= cell_7_1 1)))\n(assert (or (= cell_7_2 0) (= cell_7_2 1)))\n(assert (or (= cell_7_3 0) (= cell_7_3 1)))\n(assert (or (= cell_7_4 0) (= cell_7_4 1)))\n(assert (or (= cell_7_5 0) (= cell_7_5 1)))\n(assert (or (= cell_7_6 0) (= cell_7_6 1)))\n(assert (or (= cell_7_7 0) (= cell_7_7 1)))\n\n; Start and goal must be free\n(assert (= cell_0_0 0))\n(assert (= cell_7_7 0))"
    },
    "2": {
      "constants": "(declare-const cell_0_0 Int)",
      "assertions": "(assert (and (not ( = cell_0_0 0)) (not ( = cell_0_0 1))))",
      "response": "- Worst-case time complexity (for an N\u00d7N maze): O(N^2). Each cell is visited at most once due to the visited array, and exploring neighbors is constant per cell. Space complexity is O(N^2) for visited and worst-case recursion depth.\n\n- For input size n = 2 (a 2\u00d72 maze), the SMT2 constraints reflecting the program are:\n  - Each cell is either 0 (free) or 1 (wall).\n  - Start and goal are free: cell_0_0 = 0 and cell_1_1 = 0.\n  - A path exists from start to goal (in 2\u00d72 this requires at least one of the intermediate neighbors to be free): cell_0_1 = 0 or cell_1_0 = 0.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun cell_0_0 () Int)\n(declare-fun cell_0_1 () Int)\n(declare-fun cell_1_0 () Int)\n(declare-fun cell_1_1 () Int)\n\n; Each cell is 0 or 1\n(assert (or (= cell_0_0 0) (= cell_0_0 1)))\n(assert (or (= cell_0_1 0) (= cell_0_1 1)))\n(assert (or (= cell_1_0 0) (= cell_1_0 1)))\n(assert (or (= cell_1_1 0) (= cell_1_1 1)))\n\n; Start and goal are free\n(assert (= cell_0_0 0))\n(assert (= cell_1_1 0))\n\n; Existence of a path in a 2x2 grid\n(assert (or (= cell_0_1 0) (= cell_1_0 0)))\n\n(check-sat)\n(get-model)"
    },
    "30": {
      "constants": "(declare-const cell_0_0 Int)",
      "assertions": "(assert (and (not ( = cell_0_0 0)) (not ( = cell_0_0 1))))",
      "response": "Worst-case time complexity:\n- Treating N as variable (an N\u00d7N grid), the DFS with a visited matrix visits each cell at most once and explores at most 4 edges per cell. Time complexity: O(N^2). Space complexity: O(N^2) for visited plus recursion stack.\n- Note: Under symbolic execution, the search space over inputs is exponential (each of the N^2 cells is binary, with start/end fixed to 0), i.e., up to 2^(N^2\u22122) distinct input assignments.\n\nAnswer:\n(set-logic QF_LIA)\n\n; Declarations for a 30x30 grid: cell_i_j are Int\n(declare-fun cell_0_0 () Int)\n(declare-fun cell_0_1 () Int)\n(declare-fun cell_0_2 () Int)\n(declare-fun cell_0_3 () Int)\n(declare-fun cell_0_4 () Int)\n(declare-fun cell_0_5 () Int)\n(declare-fun cell_0_6 () Int)\n(declare-fun cell_0_7 () Int)\n(declare-fun cell_0_8 () Int)\n(declare-fun cell_0_9 () Int)\n(declare-fun cell_0_10 () Int)\n(declare-fun cell_0_11 () Int)\n(declare-fun cell_0_12 () Int)\n(declare-fun cell_0_13 () Int)\n(declare-fun cell_0_14 () Int)\n(declare-fun cell_0_15 () Int)\n(declare-fun cell_0_16 () Int)\n(declare-fun cell_0_17 () Int)\n(declare-fun cell_0_18 () Int)\n(declare-fun cell_0_19 () Int)\n(declare-fun cell_0_20 () Int)\n(declare-fun cell_0_21 () Int)\n(declare-fun cell_0_22 () Int)\n(declare-fun cell_0_23 () Int)\n(declare-fun cell_0_24 () Int)\n(declare-fun cell_0_25 () Int)\n(declare-fun cell_0_26 () Int)\n(declare-fun cell_0_27 () Int)\n(declare-fun cell_0_28 () Int)\n(declare-fun cell_0_29 () Int)\n\n(declare-fun cell_1_0 () Int)\n(declare-fun cell_1_1 () Int)\n(declare-fun cell_1_2 () Int)\n(declare-fun cell_1_3 () Int)\n(declare-fun cell_1_4 () Int)\n(declare-fun cell_1_5 () Int)\n(declare-fun cell_1_6 () Int)\n(declare-fun cell_1_7 () Int)\n(declare-fun cell_1_8 () Int)\n(declare-fun cell_1_9 () Int)\n(declare-fun cell_1_10 () Int)\n(declare-fun cell_1_11 () Int)\n(declare-fun cell_1_12 () Int)\n(declare-fun cell_1_13 () Int)\n(declare-fun cell_1_14 () Int)\n(declare-fun cell_1_15 () Int)\n(declare-fun cell_1_16 () Int)\n(declare-fun cell_1_17 () Int)\n(declare-fun cell_1_18 () Int)\n(declare-fun cell_1_19 () Int)\n(declare-fun cell_1_20 () Int)\n(declare-fun cell_1_21 () Int)\n(declare-fun cell_1_22 () Int)\n(declare-fun cell_1_23 () Int)\n(declare-fun cell_1_24 () Int)\n(declare-fun cell_1_25 () Int)\n(declare-fun cell_1_26 () Int)\n(declare-fun cell_1_27 () Int)\n(declare-fun cell_1_28 () Int)\n(declare-fun cell_1_29 () Int)\n\n(declare-fun cell_2_0 () Int)\n(declare-fun cell_2_1 () Int)\n(declare-fun cell_2_2 () Int)\n(declare-fun cell_2_3 () Int)\n(declare-fun cell_2_4 () Int)\n(declare-fun cell_2_5 () Int)\n(declare-fun cell_2_6 () Int)\n(declare-fun cell_2_7 () Int)\n(declare-fun cell_2_8 () Int)\n(declare-fun cell_2_9 () Int)\n(declare-fun cell_2_10 () Int)\n(declare-fun cell_2_11 () Int)\n(declare-fun cell_2_12 () Int)\n(declare-fun cell_2_13 () Int)\n(declare-fun cell_2_14 () Int)\n(declare-fun cell_2_15 () Int)\n(declare-fun cell_2_16 () Int)\n(declare-fun cell_2_17 () Int)\n(declare-fun cell_2_18 () Int)\n(declare-fun cell_2_19 () Int)\n(declare-fun cell_2_20 () Int)\n(declare-fun cell_2_21 () Int)\n(declare-fun cell_2_22 () Int)\n(declare-fun cell_2_23 () Int)\n(declare-fun cell_2_24 () Int)\n(declare-fun cell_2_25 () Int)\n(declare-fun cell_2_26 () Int)\n(declare-fun cell_2_27 () Int)\n(declare-fun cell_2_28 () Int)\n(declare-fun cell_2_29 () Int)\n\n(declare-fun cell_3_0 () Int)\n(declare-fun cell_3_1 () Int)\n(declare-fun cell_3_2 () Int)\n(declare-fun cell_3_3 () Int)\n(declare-fun cell_3_4 () Int)\n(declare-fun cell_3_5 () Int)\n(declare-fun cell_3_6 () Int)\n(declare-fun cell_3_7 () Int)\n(declare-fun cell_3_8 () Int)\n(declare-fun cell_3_9 () Int)\n(declare-fun cell_3_10 () Int)\n(declare-fun cell_3_11 () Int)\n(declare-fun cell_3_12 () Int)\n(declare-fun cell_3_13 () Int)\n(declare-fun cell_3_14 () Int)\n(declare-fun cell_3_15 () Int)\n(declare-fun cell_3_16 () Int)\n(declare-fun cell_3_17 () Int)\n(declare-fun cell_3_18 () Int)\n(declare-fun cell_3_19 () Int)\n(declare-fun cell_3_20 () Int)\n(declare-fun cell_3_21 () Int)\n(declare-fun cell_3_22 () Int)\n(declare-fun cell_3_23 () Int)\n(declare-fun cell_3_24 () Int)\n(declare-fun cell_3_25 () Int)\n(declare-fun cell_3_26 () Int)\n(declare-fun cell_3_27 () Int)\n(declare-fun cell_3_28 () Int)\n(declare-fun cell_3_29 () Int)\n\n(declare-fun cell_4_0 () Int)\n(declare-fun cell_4_1 () Int)\n(declare-fun cell_4_2 () Int)\n(declare-fun cell_4_3 () Int)\n(declare-fun cell_4_4 () Int)\n(declare-fun cell_4_5 () Int)\n(declare-fun cell_4_6 () Int)\n(declare-fun cell_4_7 () Int)\n(declare-fun cell_4_8 () Int)\n(declare-fun cell_4_9 () Int)\n(declare-fun cell_4_10 () Int)\n(declare-fun cell_4_11 () Int)\n(declare-fun cell_4_12 () Int)\n(declare-fun cell_4_13 () Int)\n(declare-fun cell_4_14 () Int)\n(declare-fun cell_4_15 () Int)\n(declare-fun cell_4_16 () Int)\n(declare-fun cell_4_17 () Int)\n(declare-fun cell_4_18 () Int)\n(declare-fun cell_4_19 () Int)\n(declare-fun cell_4_20 () Int)\n(declare-fun cell_4_21 () Int)\n(declare-fun cell_4_22 () Int)\n(declare-fun cell_4_23 () Int)\n(declare-fun cell_4_24 () Int)\n(declare-fun cell_4_25 () Int)\n(declare-fun cell_4_26 () Int)\n(declare-fun cell_4_27 () Int)\n(declare-fun cell_4_28 () Int)\n(declare-fun cell_4_29 () Int)\n\n(declare-fun cell_5_0 () Int)\n(declare-fun cell_5_1 () Int)\n(declare-fun cell_5_2 () Int)\n(declare-fun cell_5_3 () Int)\n(declare-fun cell_5_4 () Int)\n(declare-fun cell_5_5 () Int)\n(declare-fun cell_5_6 () Int)\n(declare-fun cell_5_7 () Int)\n(declare-fun cell_5_8 () Int)\n(declare-fun cell_5_9 () Int)\n(declare-fun cell_5_10 () Int)\n(declare-fun cell_5_11 () Int)\n(declare-fun cell_5_12 () Int)\n(declare-fun cell_5_13 () Int)\n(declare-fun cell_5_14 () Int)\n(declare-fun cell_5_15 () Int)\n(declare-fun cell_5_16 () Int)\n(declare-fun cell_5_17 () Int)\n(declare-fun cell_5_18 () Int)\n(declare-fun cell_5_19 () Int)\n(declare-fun cell_5_20 () Int)\n(declare-fun cell_5_21 () Int)\n(declare-fun cell_5_22 () Int)\n(declare-fun cell_5_23 () Int)\n(declare-fun cell_5_24 () Int)\n(declare-fun cell_5_25 () Int)\n(declare-fun cell_5_26 () Int)\n(declare-fun cell_5_27 () Int)\n(declare-fun cell_5_28 () Int)\n(declare-fun cell_5_29 () Int)\n\n(declare-fun cell_6_0 () Int)\n(declare-fun cell_6_1 () Int)\n(declare-fun cell_6_2 () Int)\n(declare-fun cell_6_3 () Int)\n(declare-fun cell_6_4 () Int)\n(declare-fun cell_6_5 () Int)\n(declare-fun cell_6_6 () Int)\n(declare-fun cell_6_7 () Int)\n(declare-fun cell_6_8 () Int)\n(declare-fun cell_6_9 () Int)\n(declare-fun cell_6_10 () Int)\n(declare-fun cell_6_11 () Int)\n(declare-fun cell_6_12 () Int)\n(declare-fun cell_6_13 () Int)\n(declare-fun cell_6_14 () Int)\n(declare-fun cell_6_15 () Int)\n(declare-fun cell_6_16 () Int)\n(declare-fun cell_6_17 () Int)\n(declare-fun cell_6_18 () Int)\n(declare-fun cell_6_19 () Int)\n(declare-fun cell_6_20 () Int)\n(declare-fun cell_6_21 () Int)\n(declare-fun cell_6_22 () Int)\n(declare-fun cell_6_23 () Int)\n(declare-fun cell_6_24 () Int)\n(declare-fun cell_6_25 () Int)\n(declare-fun cell_6_26 () Int)\n(declare-fun cell_6_27 () Int)\n(declare-fun cell_6_28 () Int)\n(declare-fun cell_6_29 () Int)\n\n(declare-fun cell_7_0 () Int)\n(declare-fun cell_7_1 () Int)\n(declare-fun cell_7_2 () Int)\n(declare-fun cell_7_3 () Int)\n(declare-fun cell_7_4 () Int)\n(declare-fun cell_7_5 () Int)\n(declare-fun cell_7_6 () Int)\n(declare-fun cell_7_7 () Int)\n(declare-fun cell_7_8 () Int)\n(declare-fun cell_7_9 () Int)\n(declare-fun cell_7_10 () Int)\n(declare-fun cell_7_11 () Int)\n(declare-fun cell_7_12 () Int)\n(declare-fun cell_7_13 () Int)\n(declare-fun cell_7_14 () Int)\n(declare-fun cell_7_15 () Int)\n(declare-fun cell_7_16 () Int)\n(declare-fun cell_7_17 () Int)\n(declare-fun cell_7_18 () Int)\n(declare-fun cell_7_19 () Int)\n(declare-fun cell_7_20 () Int)\n(declare-fun cell_7_21 () Int)\n(declare-fun cell_7_22 () Int)\n(declare-fun cell_7_23 () Int)\n(declare-fun cell_7_24 () Int)\n(declare-fun cell_7_25 () Int)\n(declare-fun cell_7_26 () Int)\n(declare-fun cell_7_27 () Int)\n(declare-fun cell_7_28 () Int)\n(declare-fun cell_7_29 () Int)\n\n(declare-fun cell_8_0 () Int)\n(declare-fun cell_8_1 () Int)\n(declare-fun cell_8_2 () Int)\n(declare-fun cell_8_3 () Int)\n(declare-fun cell_8_4 () Int)\n(declare-fun cell_8_5 () Int)\n(declare-fun cell_8_6 () Int)\n(declare-fun cell_8_7 () Int)\n(declare-fun cell_8_8 () Int)\n(declare-fun cell_8_9 () Int)\n(declare-fun cell_8_10 () Int)\n(declare-fun cell_8_11 () Int)\n(declare-fun cell_8_12 () Int)\n(declare-fun cell_8_13 () Int)\n(declare-fun cell_8_14 () Int)\n(declare-fun cell_8_15 () Int)\n(declare-fun cell_8_16 () Int)\n(declare-fun cell_8_17 () Int)\n(declare-fun cell_8_18 () Int)\n(declare-fun cell_8_19 () Int)\n(declare-fun cell_8_20 () Int)\n(declare-fun cell_8_21 () Int)\n(declare-fun cell_8_22 () Int)\n(declare-fun cell_8_23 () Int)\n(declare-fun cell_8_24 () Int)\n(declare-fun cell_8_25 () Int)\n(declare-fun cell_8_26 () Int)\n(declare-fun cell_8_27 () Int)\n(declare-fun cell_8_28 () Int)\n(declare-fun cell_8_29 () Int)\n\n(declare-fun cell_9_0 () Int)\n(declare-fun cell_9_1 () Int)\n(declare-fun cell_9_2 () Int)\n(declare-fun cell_9_3 () Int)\n(declare-fun cell_9_4 () Int)\n(declare-fun cell_9_5 () Int)\n(declare-fun cell_9_6 () Int)\n(declare-fun cell_9_7 () Int)\n(declare-fun cell_9_8 () Int)\n(declare-fun cell_9_9 () Int)\n(declare-fun cell_9_10 () Int)\n(declare-fun cell_9_11 () Int)\n(declare-fun cell_9_12 () Int)\n(declare-fun cell_9_13 () Int)\n(declare-fun cell_9_14 () Int)\n(declare-fun cell_9_15 () Int)\n(declare-fun cell_9_16 () Int)\n(declare-fun cell_9_17 () Int)\n(declare-fun cell_9_18 () Int)\n(declare-fun cell_9_19 () Int)\n(declare-fun cell_9_20 () Int)\n(declare-fun cell_9_21 () Int)\n(declare-fun cell_9_22 () Int)\n(declare-fun cell_9_23 () Int)\n(declare-fun cell_9_24 () Int)\n(declare-fun cell_9_25 () Int)\n(declare-fun cell_9_26 () Int)\n(declare-fun cell_9_27 () Int)\n(declare-fun cell_9_28 () Int)\n(declare-fun cell_9_29 () Int)\n\n(declare-fun cell_10_0 () Int)\n(declare-fun cell_10_1 () Int)\n(declare-fun cell_10_2 () Int)\n(declare-fun cell_10_3 () Int)\n(declare-fun cell_10_4 () Int)\n(declare-fun cell_10_5 () Int)\n(declare-fun cell_10_6 () Int)\n(declare-fun cell_10_7 () Int)\n(declare-fun cell_10_8 () Int)\n(declare-fun cell_10_9 () Int)\n(declare-fun cell_10_10 () Int)\n(declare-fun cell_10_11 () Int)\n(declare-fun cell_10_12 () Int)\n(declare-fun cell_10_13 () Int)\n(declare-fun cell_10_14 () Int)\n(declare-fun cell_10_15 () Int)\n(declare-fun cell_10_16 () Int)\n(declare-fun cell_10_17 () Int)\n(declare-fun cell_10_18 () Int)\n(declare-fun cell_10_19 () Int)\n(declare-fun cell_10_20 () Int)\n(declare-fun cell_10_21 () Int)\n(declare-fun cell_10_22 () Int)\n(declare-fun cell_10_23 () Int)\n(declare-fun cell_10_24 () Int)\n(declare-fun cell_10_25 () Int)\n(declare-fun cell_10_26 () Int)\n(declare-fun cell_10_27 () Int)\n(declare-fun cell_10_28 () Int)\n(declare-fun cell_10_29 () Int)\n\n(declare-fun cell_11_0 () Int)\n(declare-fun cell_11_1 () Int)\n(declare-fun cell_11_2 () Int)\n(declare-fun cell_11_3 () Int)\n(declare-fun cell_11_4 () Int)\n(declare-fun cell_11_5 () Int)\n(declare-fun cell_11_6 () Int)\n(declare-fun cell_11_7 () Int)\n(declare-fun cell_11_8 () Int)\n(declare-fun cell_11_9 () Int)\n(declare-fun cell_11_10 () Int)\n(declare-fun cell_11_11 () Int)\n(declare-fun cell_11_12 () Int)\n(declare-fun cell_11_13 () Int)\n(declare-fun cell_11_14 () Int)\n(declare-fun cell_11_15 () Int)\n(declare-fun cell_11_16 () Int)\n(declare-fun cell_11_17 () Int)\n(declare-fun cell_11_18 () Int)\n(declare-fun cell_11_19 () Int)\n(declare-fun cell_11_20 () Int)\n(declare-fun cell_11_21 () Int)\n(declare-fun cell_11_22 () Int)\n(declare-fun cell_11_23 () Int)\n(declare-fun cell_11_24 () Int)\n(declare-fun cell_11_25 () Int)\n(declare-fun cell_11_26 () Int)\n(declare-fun cell_11_27 () Int)\n(declare-fun cell_11_28 () Int)\n(declare-fun cell_11_29 () Int)\n\n(declare-fun cell_12_0 () Int)\n(declare-fun cell_12_1 () Int)\n(declare-fun cell_12_2 () Int)\n(declare-fun cell_12_3 () Int)\n(declare-fun cell_12_4 () Int)\n(declare-fun cell_12_5 () Int)\n(declare-fun cell_12_6 () Int)\n(declare-fun cell_12_7 () Int)\n(declare-fun cell_12_8 () Int)\n(declare-fun cell_12_9 () Int)\n(declare-fun cell_12_10 () Int)\n(declare-fun cell_12_11 () Int)\n(declare-fun cell_12_12 () Int)\n(declare-fun cell_12_13 () Int)\n(declare-fun cell_12_14 () Int)\n(declare-fun cell_12_15 () Int)\n(declare-fun cell_12_16 () Int)\n(declare-fun cell_12_17 () Int)\n(declare-fun cell_12_18 () Int)\n(declare-fun cell_12_19 () Int)\n(declare-fun cell_12_20 () Int)\n(declare-fun cell_12_21 () Int)\n(declare-fun cell_12_22 () Int)\n(declare-fun cell_12_23 () Int)\n(declare-fun cell_12_24 () Int)\n(declare-fun cell_12_25 () Int)\n(declare-fun cell_12_26 () Int)\n(declare-fun cell_12_27 () Int)\n(declare-fun cell_12_28 () Int)\n(declare-fun cell_12_29 () Int)\n\n(declare-fun cell_13_0 () Int)\n(declare-fun cell_13_1 () Int)\n(declare-fun cell_13_2 () Int)\n(declare-fun cell_13_3 () Int)\n(declare-fun cell_13_4 () Int)\n(declare-fun cell_13_5 () Int)\n(declare-fun cell_13_6 () Int)\n(declare-fun cell_13_7 () Int)\n(declare-fun cell_13_8 () Int)\n(declare-fun cell_13_9 () Int)\n(declare-fun cell_13_10 () Int)\n(declare-fun cell_13_11 () Int)\n(declare-fun cell_13_12 () Int)\n(declare-fun cell_13_13 () Int)\n(declare-fun cell_13_14 () Int)\n(declare-fun cell_13_15 () Int)\n(declare-fun cell_13_16 () Int)\n(declare-fun cell_13_17 () Int)\n(declare-fun cell_13_18 () Int)\n(declare-fun cell_13_19 () Int)\n(declare-fun cell_13_20 () Int)\n(declare-fun cell_13_21 () Int)\n(declare-fun cell_13_22 () Int)\n(declare-fun cell_13_23 () Int)\n(declare-fun cell_13_24 () Int)\n(declare-fun cell_13_25 () Int)\n(declare-fun cell_13_26 () Int)\n(declare-fun cell_13_27 () Int)\n(declare-fun cell_13_28 () Int)\n(declare-fun cell_13_29 () Int)\n\n(declare-fun cell_14_0 () Int)\n(declare-fun cell_14_1 () Int)\n(declare-fun cell_14_2 () Int)\n(declare-fun cell_14_3 () Int)\n(declare-fun cell_14_4 () Int)\n(declare-fun cell_14_5 () Int)\n(declare-fun cell_14_6 () Int)\n(declare-fun cell_14_7 () Int)\n(declare-fun cell_14_8 () Int)\n(declare-fun cell_14_9 () Int)\n(declare-fun cell_14_10 () Int)\n(declare-fun cell_14_11 () Int)\n(declare-fun cell_14_12 () Int)\n(declare-fun cell_14_13 () Int)\n(declare-fun cell_14_14 () Int)\n(declare-fun cell_14_15 () Int)\n(declare-fun cell_14_16 () Int)\n(declare-fun cell_14_17 () Int)\n(declare-fun cell_14_18 () Int)\n(declare-fun cell_14_19 () Int)\n(declare-fun cell_14_20 () Int)\n(declare-fun cell_14_21 () Int)\n(declare-fun cell_14_22 () Int)\n(declare-fun cell_14_23 () Int)\n(declare-fun cell_14_24 () Int)\n(declare-fun cell_14_25 () Int)\n(declare-fun cell_14_26 () Int)\n(declare-fun cell_14_27 () Int)\n(declare-fun cell_14_28 () Int)\n(declare-fun cell_14_29 () Int)\n\n(declare-fun cell_15_0 () Int)\n(declare-fun cell_15_1 () Int)\n(declare-fun cell_15_2 () Int)\n(declare-fun cell_15_3 () Int)\n(declare-fun cell_15_4 () Int)\n(declare-fun cell_15_5 () Int)\n(declare-fun cell_15_6 () Int)\n(declare-fun cell_15_7 () Int)\n(declare-fun cell_15_8 () Int)\n(declare-fun cell_15_9 () Int)\n(declare-fun cell_15_10 () Int)\n(declare-fun cell_15_11 () Int)\n(declare-fun cell_15_12 () Int)\n(declare-fun cell_15_13 () Int)\n(declare-fun cell_15_14 () Int)\n(declare-fun cell_15_15 () Int)\n(declare-fun cell_15_16 () Int)\n(declare-fun cell_15_17 () Int)\n(declare-fun cell_15_18 () Int)\n(declare-fun cell_15_19 () Int)\n(declare-fun cell_15_20 () Int)\n(declare-fun cell_15_21 () Int)\n(declare-fun cell_15_22 () Int)\n(declare-fun cell_15_23 () Int)\n(declare-fun cell_15_24 () Int)\n(declare-fun cell_15_25 () Int)\n(declare-fun cell_15_26 () Int)\n(declare-fun cell_15_27 () Int)\n(declare-fun cell_15_28 () Int)\n(declare-fun cell_15_29 () Int)\n\n(declare-fun cell_16_0 () Int)\n(declare-fun cell_16_1 () Int)\n(declare-fun cell_16_2 () Int)\n(declare-fun cell_16_3 () Int)\n(declare-fun cell_16_4 () Int)\n(declare-fun cell_16_5 () Int)\n(declare-fun cell_16_6 () Int)\n(declare-fun cell_16_7 () Int)\n(declare-fun cell_16_8 () Int)\n(declare-fun cell_16_9 () Int)\n(declare-fun cell_16_10 () Int)\n(declare-fun cell_16_11 () Int)\n(declare-fun cell_16_12 () Int)\n(declare-fun cell_16_13 () Int)\n(declare-fun cell_16_14 () Int)\n(declare-fun cell_16_15 () Int)\n(declare-fun cell_16_16 () Int)\n(declare-fun cell_16_17 () Int)\n(declare-fun cell_16_18 () Int)\n(declare-fun cell_16_19 () Int)\n(declare-fun cell_16_20 () Int)\n(declare-fun cell_16_21 () Int)\n(declare-fun cell_16_22 () Int)\n(declare-fun cell_16_23 () Int)\n(declare-fun cell_16_24 () Int)\n(declare-fun cell_16_25 () Int)\n(declare-fun cell_16_26 () Int)\n(declare-fun cell_16_27 () Int)\n(declare-fun cell_16_28 () Int)\n(declare-fun cell_16_29 () Int)\n\n(declare-fun cell_17_0 () Int)\n(declare-fun cell_17_1 () Int)\n(declare-fun cell_17_2 () Int)\n(declare-fun cell_17_3 () Int)\n(declare-fun cell_17_4 () Int)\n(declare-fun cell_17_5 () Int)\n(declare-fun cell_17_6 () Int)\n(declare-fun cell_17_7 () Int)\n(declare-fun cell_17_8 () Int)\n(declare-fun cell_17_9 () Int)\n(declare-fun cell_17_10 () Int)\n(declare-fun cell_17_11 () Int)\n(declare-fun cell_17_12 () Int)\n(declare-fun cell_17_13 () Int)\n(declare-fun cell_17_14 () Int)\n(declare-fun cell_17_15 () Int)\n(declare-fun cell_17_16 () Int)\n(declare-fun cell_17_17 () Int)\n(declare-fun cell_17_18 () Int)\n(declare-fun cell_17_19 () Int)\n(declare-fun cell_17_20 () Int)\n(declare-fun cell_17_21 () Int)\n(declare-fun cell_17_22 () Int)\n(declare-fun cell_17_23 () Int)\n(declare-fun cell_17_24 () Int)\n(declare-fun cell_17_25 () Int)\n(declare-fun cell_17_26 () Int)\n(declare-fun cell_17_27 () Int)\n(declare-fun cell_17_28 () Int)\n(declare-fun cell_17_29 () Int)\n\n(declare-fun cell_18_0 () Int)\n(declare-fun cell_18_1 () Int)\n(declare-fun cell_18_2 () Int)\n(declare-fun cell_18_3 () Int)\n(declare-fun cell_18_4 () Int)\n(declare-fun cell_18_5 () Int)\n(declare-fun cell_18_6 () Int)\n(declare-fun cell_18_7 () Int)\n(declare-fun cell_18_8 () Int)\n(declare-fun cell_18_9 () Int)\n(declare-fun cell_18_10 () Int)\n(declare-fun cell_18_11 () Int)\n(declare-fun cell_18_12 () Int)\n(declare-fun cell_18_13 () Int)\n(declare-fun cell_18_14 () Int)\n(declare-fun cell_18_15 () Int)\n(declare-fun cell_18_16 () Int)\n(declare-fun cell_18_17 () Int)\n(declare-fun cell_18_18 () Int)\n(declare-fun cell_18_19 () Int)\n(declare-fun cell_18_20 () Int)\n(declare-fun cell_18_21 () Int)\n(declare-fun cell_18_22 () Int)\n(declare-fun cell_18_23 () Int)\n(declare-fun cell_18_24 () Int)\n(declare-fun cell_18_25 () Int)\n(declare-fun cell_18_26 () Int)\n(declare-fun cell_18_27 () Int)\n(declare-fun cell_18_28 () Int)\n(declare-fun cell_18_29 () Int)\n\n(declare-fun cell_19_0 () Int)\n(declare-fun cell_19_1 () Int)\n(declare-fun cell_19_2 () Int)\n(declare-fun cell_19_3 () Int)\n(declare-fun cell_19_4 () Int)\n(declare-fun cell_19_5 () Int)\n(declare-fun cell_19_6 () Int)\n(declare-fun cell_19_7 () Int)\n(declare-fun cell_19_8 () Int)\n(declare-fun cell_19_9 () Int)\n(declare-fun cell_19_10 () Int)\n(declare-fun cell_19_11 () Int)\n(declare-fun cell_19_12 () Int)\n(declare-fun cell_19_13 () Int)\n(declare-fun cell_19_14 () Int)\n(declare-fun cell_19_15 () Int)\n(declare-fun cell_19_16 () Int)\n(declare-fun cell_19_17 () Int)\n(declare-fun cell_19_18 () Int)\n(declare-fun cell_19_19 () Int)\n(declare-fun cell_19_20 () Int)\n(declare-fun cell_19_21 () Int)\n(declare-fun cell_19_22 () Int)\n(declare-fun cell_19_23 () Int)\n(declare-fun cell_19_24 () Int)\n(declare-fun cell_19_25 () Int)\n(declare-fun cell_19_26 () Int)\n(declare-fun cell_19_27 () Int)\n(declare-fun cell_19_28 () Int)\n(declare-fun cell_19_29 () Int)\n\n(declare-fun cell_20_0 () Int)\n(declare-fun cell_20_1 () Int)\n(declare-fun cell_20_2 () Int)\n(declare-fun cell_20_3 () Int)\n(declare-fun cell_20_4 () Int)\n(declare-fun cell_20_5 () Int)\n(declare-fun cell_20_6 () Int)\n(declare-fun cell_20_7 () Int)\n(declare-fun cell_20_8 () Int)\n(declare-fun cell_20_9 () Int)\n(declare-fun cell_20_10 () Int)\n(declare-fun cell_20_11 () Int)\n(declare-fun cell_20_12 () Int)\n(declare-fun cell_20_13 () Int)\n(declare-fun cell_20_14 () Int)\n(declare-fun cell_20_15 () Int)\n(declare-fun cell_20_16 () Int)\n(declare-fun cell_20_17 () Int)\n(declare-fun cell_20_18 () Int)\n(declare-fun cell_20_19 () Int)\n(declare-fun cell_20_20 () Int)\n(declare-fun cell_20_21 () Int)\n(declare-fun cell_20_22 () Int)\n(declare-fun cell_20_23 () Int)\n(declare-fun cell_20_24 () Int)\n(declare-fun cell_20_25 () Int)\n(declare-fun cell_20_26 () Int)\n(declare-fun cell_20_27 () Int)\n(declare-fun cell_20_28 () Int)\n(declare-fun cell_20_29 () Int)\n\n(declare-fun cell_21_0 () Int)\n(declare-fun cell_21_1 () Int)\n(declare-fun cell_21_2 () Int)\n(declare-fun cell_21_3 () Int)\n(declare-fun cell_21_4 () Int)\n(declare-fun cell_21_5 () Int)\n(declare-fun cell_21_6 () Int)\n(declare-fun cell_21_7 () Int)\n(declare-fun cell_21_8 () Int)\n(declare-fun cell_21_9 () Int)\n(declare-fun cell_21_10 () Int)\n(declare-fun cell_21_11 () Int)\n(declare-fun cell_21_12 () Int)\n(declare-fun cell_21_13 () Int)\n(declare-fun cell_21_14 () Int)\n(declare-fun cell_21_15 () Int)\n(declare-fun cell_21_16 () Int)\n(declare-fun cell_21_17 () Int)\n(declare-fun cell_21_18 () Int)\n(declare-fun cell_21_19 () Int)\n(declare-fun cell_21_20 () Int)\n(declare-fun cell_21_21 () Int)\n(declare-fun cell_21_22 () Int)\n(declare-fun cell_21_23 () Int)\n(declare-fun cell_21_24 () Int)\n(declare-fun cell_21_25 () Int)\n(declare-fun cell_21_26 () Int)\n(declare-fun cell_21_27 () Int)\n(declare-fun cell_21_28 () Int)\n(declare-fun cell_21_29 () Int)\n\n(declare-fun cell_22_0 () Int)\n(declare-fun cell_22_1 () Int)\n(declare-fun cell_22_2 () Int)\n(declare-fun cell_22_3 () Int)\n(declare-fun cell_22_4 () Int)\n(declare-fun cell_22_5 () Int)\n(declare-fun cell_22_6 () Int)\n(declare-fun cell_22_7 () Int)\n(declare-fun cell_22_8 () Int)\n(declare-fun cell_22_9 () Int)\n(declare-fun cell_22_10 () Int)\n(declare-fun cell_22_11 () Int)\n(declare-fun cell_22_12 () Int)\n(declare-fun cell_22_13 () Int)\n(declare-fun cell_22_14 () Int)\n(declare-fun cell_22_15 () Int)\n(declare-fun cell_22_16 () Int)\n(declare-fun cell_22_17 () Int)\n(declare-fun cell_22_18 () Int)\n(declare-fun cell_22_19 () Int)\n(declare-fun cell_22_20 () Int)\n(declare-fun cell_22_21 () Int)\n(declare-fun cell_22_22 () Int)\n(declare-fun cell_22_23 () Int)\n(declare-fun cell_22_24 () Int)\n(declare-fun cell_22_25 () Int)\n(declare-fun cell_22_26 () Int)\n(declare-fun cell_22_27 () Int)\n(declare-fun cell_22_28 () Int)\n(declare-fun cell_22_29 () Int)\n\n(declare-fun cell_23_0 () Int)\n(declare-fun cell_23_1 () Int)\n(declare-fun cell_23_2 () Int)\n(declare-fun cell_23_3 () Int)\n(declare-fun cell_23_4 () Int)\n(declare-fun cell_23_5 () Int)\n(declare-fun cell_23_6 () Int)\n(declare-fun cell_23_7 () Int)\n(declare-fun cell_23_8 () Int)\n(declare-fun cell_23_9 () Int)\n(declare-fun cell_23_10 () Int)\n(declare-fun cell_23_11 () Int)\n(declare-fun cell_23_12 () Int)\n(declare-fun cell_23_13 () Int)\n(declare-fun cell_23_14 () Int)\n(declare-fun cell_23_15 () Int)\n(declare-fun cell_23_16 () Int)\n(declare-fun cell_23_17 () Int)\n(declare-fun cell_23_18 () Int)\n(declare-fun cell_23_19 () Int)\n(declare-fun cell_23_20 () Int)\n(declare-fun cell_23_21 () Int)\n(declare-fun cell_23_22 () Int)\n(declare-fun cell_23_23 () Int)\n(declare-fun cell_23_24 () Int)\n(declare-fun cell_23_25 () Int)\n(declare-fun cell_23_26 () Int)\n(declare-fun cell_23_27 () Int)\n(declare-fun cell_23_28 () Int)\n(declare-fun cell_23_29 () Int)\n\n(declare-fun cell_24_0 () Int)\n(declare-fun cell_24_1 () Int)\n(declare-fun cell_24_2 () Int)\n(declare-fun cell_24_3 () Int)\n(declare-fun cell_24_4 () Int)\n(declare-fun cell_24_5 () Int)\n(declare-fun cell_24_6 () Int)\n(declare-fun cell_24_7 () Int)\n(declare-fun cell_24_8 () Int)\n(declare-fun cell_24_9 () Int)\n(declare-fun cell_24_10 () Int)\n(declare-fun cell_24_11 () Int)\n(declare-fun cell_24_12 () Int)\n(declare-fun cell_24_13 () Int)\n(declare-fun cell_24_14 () Int)\n(declare-fun cell_24_15 () Int)\n(declare-fun cell_24_16 () Int)\n(declare-fun cell_24_17 () Int)\n(declare-fun cell_24_18 () Int)\n(declare-fun cell_24_19 () Int)\n(declare-fun cell_24_20 () Int)\n(declare-fun cell_24_21 () Int)\n(declare-fun cell_24_22 () Int)\n(declare-fun cell_24_23 () Int)\n(declare-fun cell_24_24 () Int)\n(declare-fun cell_24_25 () Int)\n(declare-fun cell_24_26 () Int)\n(declare-fun cell_24_27 () Int)\n(declare-fun cell_24_28 () Int)\n(declare-fun cell_24_29 () Int)\n\n(declare-fun cell_25_0 () Int)\n(declare-fun cell_25_1 () Int)\n(declare-fun cell_25_2 () Int)\n(declare-fun cell_25_3 () Int)\n(declare-fun cell_25_4 () Int)\n(declare-fun cell_25_5 () Int)\n(declare-fun cell_25_6 () Int)\n(declare-fun cell_25_7 () Int)\n(declare-fun cell_25_8 () Int)\n(declare-fun cell_25_9 () Int)\n(declare-fun cell_25_10 () Int)\n(declare-fun cell_25_11 () Int)\n(declare-fun cell_25_12 () Int)\n(declare-fun cell_25_13 () Int)\n(declare-fun cell_25_14 () Int)\n(declare-fun cell_25_15 () Int)\n(declare-fun cell_25_16 () Int)\n(declare-fun cell_25_17 () Int)\n(declare-fun cell_25_18 () Int)\n(declare-fun cell_25_19 () Int)\n(declare-fun cell_25_20 () Int)\n(declare-fun cell_25_21 () Int)\n(declare-fun cell_25_22 () Int)\n(declare-fun cell_25_23 () Int)\n(declare-fun cell_25_24 () Int)\n(declare-fun cell_25_25 () Int)\n(declare-fun cell_25_26 () Int)\n(declare-fun cell_25_27 () Int)\n(declare-fun cell_25_28 () Int)\n(declare-fun cell_25_29 () Int)\n\n(declare-fun cell_26_0 () Int)\n(declare-fun cell_26_1 () Int)\n(declare-fun cell_26_2 () Int)\n(declare-fun cell_26_3 () Int)\n(declare-fun cell_26_4 () Int)\n(declare-fun cell_26_5 () Int)\n(declare-fun cell_26_6 () Int)\n(declare-fun cell_26_7 () Int)\n(declare-fun cell_26_8 () Int)\n(declare-fun cell_26_9 () Int)\n(declare-fun cell_26_10 () Int)\n(declare-fun cell_26_11 () Int)\n(declare-fun cell_26_12 () Int)\n(declare-fun cell_26_13 () Int)\n(declare-fun cell_26_14 () Int)\n(declare-fun cell_26_15 () Int)\n(declare-fun cell_26_16 () Int)\n(declare-fun cell_26_17 () Int)\n(declare-fun cell_26_18 () Int)\n(declare-fun cell_26_19 () Int)\n(declare-fun cell_26_20 () Int)\n(declare-fun cell_26_21 () Int)\n(declare-fun cell_26_22 () Int)\n(declare-fun cell_26_23 () Int)\n(declare-fun cell_26_24 () Int)\n(declare-fun cell_26_25 () Int)\n(declare-fun cell_26_26 () Int)\n(declare-fun cell_26_27 () Int)\n(declare-fun cell_26_28 () Int)\n(declare-fun cell_26_29 () Int)\n\n(declare-fun cell_27_0 () Int)\n(declare-fun cell_27_1 () Int)\n(declare-fun cell_27_2 () Int)\n(declare-fun cell_27_3 () Int)\n(declare-fun cell_27_4 () Int)\n(declare-fun cell_27_5 () Int)\n(declare-fun cell_27_6 () Int)\n(declare-fun cell_27_7 () Int)\n(declare-fun cell_27_8 () Int)\n(declare-fun cell_27_9 () Int)\n(declare-fun cell_27_10 () Int)\n(declare-fun cell_27_11 () Int)\n(declare-fun cell_27_12 () Int)\n(declare-fun cell_27_13 () Int)\n(declare-fun cell_27_14 () Int)\n(declare-fun cell_27_15 () Int)\n(declare-fun cell_27_16 () Int)\n(declare-fun cell_27_17 () Int)\n(declare-fun cell_27_18 () Int)\n(declare-fun cell_27_19 () Int)\n(declare-fun cell_27_20 () Int)\n(declare-fun cell_27_21 () Int)\n(declare-fun cell_27_22 () Int)\n(declare-fun cell_27_23 () Int)\n(declare-fun cell_27_24 () Int)\n(declare-fun cell_27_25 () Int)\n(declare-fun cell_27_26 () Int)\n(declare-fun cell_27_27 () Int)\n(declare-fun cell_27_28 () Int)\n(declare-fun cell_27_29 () Int)\n\n(declare-fun cell_28_0 () Int)\n(declare-fun cell_28_1 () Int)\n(declare-fun cell_28_2 () Int)\n(declare-fun cell_28_3 () Int)\n(declare-fun cell_28_4 () Int)\n(declare-fun cell_28_5 () Int)\n(declare-fun cell_28_6 () Int)\n(declare-fun cell_28_7 () Int)\n(declare-fun cell_28_8 () Int)\n(declare-fun cell_28_9 () Int)\n(declare-fun cell_28_10 () Int)\n(declare-fun cell_28_11 () Int)\n(declare-fun cell_28_12 () Int)\n(declare-fun cell_28_13 () Int)\n(declare-fun cell_28_14 () Int)\n(declare-fun cell_28_15 () Int)\n(declare-fun cell_28_16 () Int)\n(declare-fun cell_28_17 () Int)\n(declare-fun cell_28_18 () Int)\n(declare-fun cell_28_19 () Int)\n(declare-fun cell_28_20 () Int)\n(declare-fun cell_28_21 () Int)\n(declare-fun cell_28_22 () Int)\n(declare-fun cell_28_23 () Int)\n(declare-fun cell_28_24 () Int)\n(declare-fun cell_28_25 () Int)\n(declare-fun cell_28_26 () Int)\n(declare-fun cell_28_27 () Int)\n(declare-fun cell_28_28 () Int)\n(declare-fun cell_28_29 () Int)\n\n(declare-fun cell_29_0 () Int)\n(declare-fun cell_29_1 () Int)\n(declare-fun cell_29_2 () Int)\n(declare-fun cell_29_3 () Int)\n(declare-fun cell_29_4 () Int)\n(declare-fun cell_29_5 () Int)\n(declare-fun cell_29_6 () Int)\n(declare-fun cell_29_7 () Int)\n(declare-fun cell_29_8 () Int)\n(declare-fun cell_29_9 () Int)\n(declare-fun cell_29_10 () Int)\n(declare-fun cell_29_11 () Int)\n(declare-fun cell_29_12 () Int)\n(declare-fun cell_29_13 () Int)\n(declare-fun cell_29_14 () Int)\n(declare-fun cell_29_15 () Int)\n(declare-fun cell_29_16 () Int)\n(declare-fun cell_29_17 () Int)\n(declare-fun cell_29_18 () Int)\n(declare-fun cell_29_19 () Int)\n(declare-fun cell_29_20 () Int)\n(declare-fun cell_29_21 () Int)\n(declare-fun cell_29_22 () Int)\n(declare-fun cell_29_23 () Int)\n(declare-fun cell_29_24 () Int)\n(declare-fun cell_29_25 () Int)\n(declare-fun cell_29_26 () Int)\n(declare-fun cell_29_27 () Int)\n(declare-fun cell_29_28 () Int)\n(declare-fun cell_29_29 () Int)\n\n; Each cell is either 0 or 1\n(assert (or (= cell_0_0 0) (= cell_0_0 1)))\n(assert (or (= cell_0_1 0) (= cell_0_1 1)))\n(assert (or (= cell_0_2 0) (= cell_0_2 1)))\n(assert (or (= cell_0_3 0) (= cell_0_3 1)))\n(assert (or (= cell_0_4 0) (= cell_0_4 1)))\n(assert (or (= cell_0_5 0) (= cell_0_5 1)))\n(assert (or (= cell_0_6 0) (= cell_0_6 1)))\n(assert (or (= cell_0_7 0) (= cell_0_7 1)))\n(assert (or (= cell_0_8 0) (= cell_0_8 1)))\n(assert (or (= cell_0_9 0) (= cell_0_9 1)))\n(assert (or (= cell_0_10 0) (= cell_0_10 1)))\n(assert (or (= cell_0_11 0) (= cell_0_11 1)))\n(assert (or (= cell_0_12 0) (= cell_0_12 1)))\n(assert (or (= cell_0_13 0) (= cell_0_13 1)))\n(assert (or (= cell_0_14 0) (= cell_0_14 1)))\n(assert (or (= cell_0_15 0) (= cell_0_15 1)))\n(assert (or (= cell_0_16 0) (= cell_0_16 1)))\n(assert (or (= cell_0_17 0) (= cell_0_17 1)))\n(assert (or (= cell_0_18 0) (= cell_0_18 1)))\n(assert (or (= cell_0_19 0) (= cell_0_19 1)))\n(assert (or (= cell_0_20 0) (= cell_0_20 1)))\n(assert (or (= cell_0_21 0) (= cell_0_21 1)))\n(assert (or (= cell_0_22 0) (= cell_0_22 1)))\n(assert (or (= cell_0_23 0) (= cell_0_23 1)))\n(assert (or (= cell_0_24 0) (= cell_0_24 1)))\n(assert (or (= cell_0_25 0) (= cell_0_25 1)))\n(assert (or (= cell_0_26 0) (= cell_0_26 1)))\n(assert (or (= cell_0_27 0) (= cell_0_27 1)))\n(assert (or (= cell_0_28 0) (= cell_0_28 1)))\n(assert (or (= cell_0_29 0) (= cell_0_29 1)))\n\n(assert (or (= cell_1_0 0) (= cell_1_0 1)))\n(assert (or (= cell_1_1 0) (= cell_1_1 1)))\n(assert (or (= cell_1_2 0) (= cell_1_2 1)))\n(assert (or (= cell_1_3 0) (= cell_1_3 1)))\n(assert (or (= cell_1_4 0) (= cell_1_4 1)))\n(assert (or (= cell_1_5 0) (= cell_1_5 1)))\n(assert (or (= cell_1_6 0) (= cell_1_6 1)))\n(assert (or (= cell_1_7 0) (= cell_1_7 1)))\n(assert (or (= cell_1_8 0) (= cell_1_8 1)))\n(assert (or (= cell_1_9 0) (= cell_1_9 1)))\n(assert (or (= cell_1_10 0) (= cell_1_10 1)))\n(assert (or (= cell_1_11 0) (= cell_1_11 1)))\n(assert (or (= cell_1_12 0) (= cell_1_12 1)))\n(assert (or (= cell_1_13 0) (= cell_1_13 1)))\n(assert (or (= cell_1_14 0) (= cell_1_14 1)))\n(assert (or (= cell_1_15 0) (= cell_1_15 1)))\n(assert (or (= cell_1_16 0) (= cell_1_16 1)))\n(assert (or (= cell_1_17 0) (= cell_1_17 1)))\n(assert (or (= cell_1_18 0) (= cell_1_18 1)))\n(assert (or (= cell_1_19 0) (= cell_1_19 1)))\n(assert (or (= cell_1_20 0) (= cell_1_20 1)))\n(assert (or (= cell_1_21 0) (= cell_1_21 1)))\n(assert (or (= cell_1_22 0) (= cell_1_22 1)))\n(assert (or (= cell_1_23 0) (= cell_1_23 1)))\n(assert (or (= cell_1_24 0) (= cell_1_24 1)))\n(assert (or (= cell_1_25 0) (= cell_1_25 1)))\n(assert (or (= cell_1_26 0) (= cell_1_26 1)))\n(assert (or (= cell_1_27 0) (= cell_1_27 1)))\n(assert (or (= cell_1_28 0) (= cell_1_28 1)))\n(assert (or (= cell_1_29 0) (= cell_1_29 1)))\n\n(assert (or (= cell_2_0 0) (= cell_2_0 1)))\n(assert (or (= cell_2_1 0) (= cell_2_1 1)))\n(assert (or (= cell_2_2 0) (= cell_2_2 1)))\n(assert (or (= cell_2_3 0) (= cell_2_3 1)))\n(assert (or (= cell_2_4 0) (= cell_2_4 1)))\n(assert (or (= cell_2_5 0) (= cell_2_5 1)))\n(assert (or (= cell_2_6 0) (= cell_2_6 1)))\n(assert (or (= cell_2_7 0) (= cell_2_7 1)))\n(assert (or (= cell_2_8 0) (= cell_2_8 1)))\n(assert (or (= cell_2_9 0) (= cell_2_9 1)))\n(assert (or (= cell_2_10 0) (= cell_2_10 1)))\n(assert (or (= cell_2_11 0) (= cell_2_11 1)))\n(assert (or (= cell_2_12 0) (= cell_2_12 1)))\n(assert (or (= cell_2_13 0) (= cell_2_13 1)))\n(assert (or (= cell_2_14 0) (= cell_2_14 1)))\n(assert (or (= cell_2_15 0) (= cell_2_15 1)))\n(assert (or (= cell_2_16 0) (= cell_2_16 1)))\n(assert (or (= cell_2_17 0) (= cell_2_17 1)))\n(assert (or (= cell_2_18 0) (= cell_2_18 1)))\n(assert (or (= cell_2_19 0) (= cell_2_19 1)))\n(assert (or (= cell_2_20 0) (= cell_2_20 1)))\n(assert (or (= cell_2_21 0) (= cell_2_21 1)))\n(assert (or (= cell_2_22 0) (= cell_2_22 1)))\n(assert (or (= cell_2_23 0) (= cell_2_23 1)))\n(assert (or (= cell_2_24 0) (= cell_2_24 1)))\n(assert (or (= cell_2_25 0) (= cell_2_25 1)))\n(assert (or (= cell_2_26 0) (= cell_2_26 1)))\n(assert (or (= cell_2_27 0) (= cell_2_27 1)))\n(assert (or (= cell_2_28 0) (= cell_2_28 1)))\n(assert (or (= cell_2_29 0) (= cell_2_29 1)))\n\n(assert (or (= cell_3_0 0) (= cell_3_0 1)))\n(assert (or (= cell_3_1 0) (= cell_3_1 1)))\n(assert (or (= cell_3_2 0) (= cell_3_2 1)))\n(assert (or (= cell_3_3 0) (= cell_3_3 1)))\n(assert (or (= cell_3_4 0) (= cell_3_4 1)))\n(assert (or (= cell_3_5 0) (= cell_3_5 1)))\n(assert (or (= cell_3_6 0) (= cell_3_6 1)))\n(assert (or (= cell_3_7 0) (= cell_3_7 1)))\n(assert (or (= cell_3_8 0) (= cell_3_8 1)))\n(assert (or (= cell_3_9 0) (= cell_3_9 1)))\n(assert (or (= cell_3_10 0) (= cell_3_10 1)))\n(assert (or (= cell_3_11 0) (= cell_3_11 1)))\n(assert (or (= cell_3_12 0) (= cell_3_12 1)))\n(assert (or (= cell_3_13 0) (= cell_3_13 1)))\n(assert (or (= cell_3_14 0) (= cell_3_14 1)))\n(assert (or (= cell_3_15 0) (= cell_3_15 1)))\n(assert (or (= cell_3_16 0) (= cell_3_16 1)))\n(assert (or (= cell_3_17 0) (= cell_3_17 1)))\n(assert (or (= cell_3_18 0) (= cell_3_18 1)))\n(assert (or (= cell_3_19 0) (= cell_3_19 1)))\n(assert (or (= cell_3_20 0) (= cell_3_20 1)))\n(assert (or (= cell_3_21 0) (= cell_3_21 1)))\n(assert (or (= cell_3_22 0) (= cell_3_22 1)))\n(assert (or (= cell_3_23 0) (= cell_3_23 1)))\n(assert (or (= cell_3_24 0) (= cell_3_24 1)))\n(assert (or (= cell_3_25 0) (= cell_3_25 1)))\n(assert (or (= cell_3_26 0) (= cell_3_26 1)))\n(assert (or (= cell_3_27 0) (= cell_3_27 1)))\n(assert (or (= cell_3_28 0) (= cell_3_28 1)))\n(assert (or (= cell_3_29 0) (= cell_3_29 1)))\n\n(assert (or (= cell_4_0 0) (= cell_4_0 1)))\n(assert (or (= cell_4_1 0) (= cell_4_1 1)))\n(assert (or (= cell_4_2 0) (= cell_4_2 1)))\n(assert (or (= cell_4_3 0) (= cell_4_3 1)))\n(assert (or (= cell_4_4 0) (= cell_4_4 1)))\n(assert (or (= cell_4_5 0) (= cell_4_5 1)))\n(assert (or (= cell_4_6 0) (= cell_4_6 1)))\n(assert (or (= cell_4_7 0) (= cell_4_7 1)))\n(assert (or (= cell_4_8 0) (= cell_4_8 1)))\n(assert (or (= cell_4_9 0) (= cell_4_9 1)))\n(assert (or (= cell_4_10 0) (= cell_4_10 1)))\n(assert (or (= cell_4_11 0) (= cell_4_11 1)))\n(assert (or (= cell_4_12 0) (= cell_4_12 1)))\n(assert (or (= cell_4_13 0) (= cell_4_13 1)))\n(assert (or (= cell_4_14 0) (= cell_4_14 1)))\n(assert (or (= cell_4_15 0) (= cell_4_15 1)))\n(assert (or (= cell_4_16 0) (= cell_4_16 1)))\n(assert (or (= cell_4_17 0) (= cell_4_17 1)))\n(assert (or (= cell_4_18 0) (= cell_4_18 1)))\n(assert (or (= cell_4_19 0) (= cell_4_19 1)))\n(assert (or (= cell_4_20 0) (= cell_4_20 1)))\n(assert (or (= cell_4_21 0) (= cell_4_21 1)))\n(assert (or (= cell_4_22 0) (= cell_4_22 1)))\n(assert (or (= cell_4_23 0) (= cell_4_23 1)))\n(assert (or (= cell_4_24 0) (= cell_4_24 1)))\n(assert (or (= cell_4_25 0) (= cell_4_25 1)))\n(assert (or (= cell_4_26 0) (= cell_4_26 1)))\n(assert (or (= cell_4_27 0) (= cell_4_27 1)))\n(assert (or (= cell_4_28 0) (= cell_4_28 1)))\n(assert (or (= cell_4_29 0) (= cell_4_29 1)))\n\n(assert (or (= cell_5_0 0) (= cell_5_0 1)))\n(assert (or (= cell_5_1 0) (= cell_5_1 1)))\n(assert (or (= cell_5_2 0) (= cell_5_2 1)))\n(assert (or (= cell_5_3 0) (= cell_5_3 1)))\n(assert (or (= cell_5_4 0) (= cell_5_4 1)))\n(assert (or (= cell_5_5 0) (= cell_5_5 1)))\n(assert (or (= cell_5_6 0) (= cell_5_6 1)))\n(assert (or (= cell_5_7 0) (= cell_5_7 1)))\n(assert (or (= cell_5_8 0) (= cell_5_8 1)))\n(assert (or (= cell_5_9 0) (= cell_5_9 1)))\n(assert (or (= cell_5_10 0) (= cell_5_10 1)))\n(assert (or (= cell_5_11 0) (= cell_5_11 1)))\n(assert (or (= cell_5_12 0) (= cell_5_12 1)))\n(assert (or (= cell_5_13 0) (= cell_5_13 1)))\n(assert (or (= cell_5_14 0) (= cell_5_14 1)))\n(assert (or (= cell_5_15 0) (= cell_5_15 1)))\n(assert (or (= cell_5_16 0) (= cell_5_16 1)))\n(assert (or (= cell_5_17 0) (= cell_5_17 1)))\n(assert (or (= cell_5_18 0) (= cell_5_18 1)))\n(assert (or (= cell_5_19 0) (= cell_5_19 1)))\n(assert (or (= cell_5_20 0) (= cell_5_20 1)))\n(assert (or (= cell_5_21 0) (= cell_5_21 1)))\n(assert (or (= cell_5_22 0) (= cell_5_22 1)))\n(assert (or (= cell_5_23 0) (= cell_5_23 1)))\n(assert (or (= cell_5_24 0) (= cell_5_24 1)))\n(assert (or (= cell_5_25 0) (= cell_5_25 1)))\n(assert (or (= cell_5_26 0) (= cell_5_26 1)))\n(assert (or (= cell_5_27 0) (= cell_5_27 1)))\n(assert (or (= cell_5_28 0) (= cell_5_28 1)))\n(assert (or (= cell_5_29 0) (= cell_5_29 1)))\n\n(assert (or (= cell_6_0 0) (= cell_6_0 1)))\n(assert (or (= cell_6_1 0) (= cell_6_1 1)))\n(assert (or (= cell_6_2 0) (= cell_6_2 1)))\n(assert (or (= cell_6_3 0) (= cell_6_3 1)))\n(assert (or (= cell_6_4 0) (= cell_6_4 1)))\n(assert (or (= cell_6_5 0) (= cell_6_5 1)))\n(assert (or (= cell_6_6 0) (= cell_6_6 1)))\n(assert (or (= cell_6_7 0) (= cell_6_7 1)))\n(assert (or (= cell_6_8 0) (= cell_6_8 1)))\n(assert (or (= cell_6_9 0) (= cell_6_9 1)))\n(assert (or (= cell_6_10 0) (= cell_6_10 1)))\n(assert (or (= cell_6_11 0) (= cell_6_11 1)))\n(assert (or (= cell_6_12 0) (= cell_6_12 1)))\n(assert (or (= cell_6_13 0) (= cell_6_13 1)))\n(assert (or (= cell_6_14 0) (= cell_6_14 1)))\n(assert (or (= cell_6_15 0) (= cell_6_15 1)))\n(assert (or (= cell_6_16 0) (= cell_6_16 1)))\n(assert (or (= cell_6_17 0) (= cell_6_17 1)))\n(assert (or (= cell_6_18 0) (= cell_6_18 1)))\n(assert (or (= cell_6_19 0) (= cell_6_19 1)))\n(assert (or (= cell_6_20 0) (= cell_6_20 1)))\n(assert (or (= cell_6_21 0) (= cell_6_21 1)))\n(assert (or (= cell_6_22 0) (= cell_6_22 1)))\n(assert (or (= cell_6_23 0) (= cell_6_23 1)))\n(assert (or (= cell_6_24 0) (= cell_6_24 1)))\n(assert (or (= cell_6_25 0) (= cell_6_25 1)))\n(assert (or (= cell_6_26 0) (= cell_6_26 1)))\n(assert (or (= cell_6_27 0) (= cell_6_27 1)))\n(assert (or (= cell_6_28 0) (= cell_6_28 1)))\n(assert (or (= cell_6_29 0) (= cell_6_29 1)))\n\n(assert (or (= cell_7_0 0) (= cell_7_0 1)))\n(assert (or (= cell_7_1 0) (= cell_7_1 1)))\n(assert (or (= cell_7_2 0) (= cell_7_2 1)))\n(assert (or (= cell_7_3 0) (= cell_7_3 1)))\n(assert (or (= cell_7_4 0) (= cell_7_4 1)))\n(assert (or (= cell_7_5 0) (= cell_7_5 1)))\n(assert (or (= cell_7_6 0) (= cell_7_6 1)))\n(assert (or (= cell_7_7 0) (= cell_7_7 1)))\n(assert (or (= cell_7_8 0) (= cell_7_8 1)))\n(assert (or (= cell_7_9 0) (= cell_7_9 1)))\n(assert (or (= cell_7_10 0) (= cell_7_10 1)))\n(assert (or (= cell_7_11 0) (= cell_7_11 1)))\n(assert (or (= cell_7_12 0) (= cell_7_12 1)))\n(assert (or (= cell_7_13 0) (= cell_7_13 1)))\n(assert (or (= cell_7_14 0) (= cell_7_14 1)))\n(assert (or (= cell_7_15 0) (= cell_7_15 1)))\n(assert (or (= cell_7_16 0) (= cell_7_16 1)))\n(assert (or (= cell_7_17 0) (= cell_7_17 1)))\n(assert (or (= cell_7_18 0) (= cell_7_18 1)))\n(assert (or (= cell_7_19 0) (= cell_7_19 1)))\n(assert (or (= cell_7_20 0) (= cell_7_20 1)))\n(assert (or (= cell_7_21 0) (= cell_7_21 1)))\n(assert (or (= cell_7_22 0) (= cell_7_22 1)))\n(assert (or (= cell_7_23 0) (= cell_7_23 1)))\n(assert (or (= cell_7_24 0) (= cell_7_24 1)))\n(assert (or (= cell_7_25 0) (= cell_7_25 1)))\n(assert (or (= cell_7_26 0) (= cell_7_26 1)))\n(assert (or (= cell_7_27 0) (= cell_7_27 1)))\n(assert (or (= cell_7_28 0) (= cell_7_28 1)))\n(assert (or (= cell_7_29 0) (= cell_7_29 1)))\n\n(assert (or (= cell_8_0 0) (= cell_8_0 1)))\n(assert (or (= cell_8_1 0) (= cell_8_1 1)))\n(assert (or (= cell_8_2 0) (= cell_8_2 1)))\n(assert (or (= cell_8_3 0) (= cell_8_3 1)))\n(assert (or (= cell_8_4 0) (= cell_8_4 1)))\n(assert (or (= cell_8_5 0) (= cell_8_5 1)))\n(assert (or (= cell_8_6 0) (= cell_8_6 1)))\n(assert (or (= cell_8_7 0) (= cell_8_7 1)))\n(assert (or (= cell_8_8 0) (= cell_8_8 1)))\n(assert (or (= cell_8_9 0) (= cell_8_9 1)))\n(assert (or (= cell_8_10 0) (= cell_8_10 1)))\n(assert (or (= cell_8_11 0) (= cell_8_11 1)))\n(assert (or (= cell_8_12 0) (= cell_8_12 1)))\n(assert (or (= cell_8_13 0) (= cell_8_13 1)))\n(assert (or (= cell_8_14 0) (= cell_8_14 1)))\n(assert (or (= cell_8_15 0) (= cell_8_15 1)))\n(assert (or (= cell_8_16 0) (= cell_8_16 1)))\n(assert (or (= cell_8_17 0) (= cell_8_17 1)))\n(assert (or (= cell_8_18 0) (= cell_8_18 1)))\n(assert (or (= cell_8_19 0) (= cell_8_19 1)))\n(assert (or (= cell_8_20 0) (= cell_8_20 1)))\n(assert (or (= cell_8_21 0) (= cell_8_21 1)))\n(assert (or (= cell_8_22 0) (= cell_8_22 1)))\n(assert (or (= cell_8_23 0) (= cell_8_23 1)))\n(assert (or (= cell_8_24 0) (= cell_8_24 1)))\n(assert (or (= cell_8_25 0) (= cell_8_25 1)))\n(assert (or (= cell_8_26 0) (= cell_8_26 1)))\n(assert (or (= cell_8_27 0) (= cell_8_27 1)))\n(assert (or (= cell_8_28 0) (= cell_8_28 1)))\n(assert (or (= cell_8_29 0) (= cell_8_29 1)))\n\n(assert (or (= cell_9_0 0) (= cell_9_0 1)))\n(assert (or (= cell_9_1 0) (= cell_9_1 1)))\n(assert (or (= cell_9_2 0) (= cell_9_2 1)))\n(assert (or (= cell_9_3 0) (= cell_9_3 1)))\n(assert (or (= cell_9_4 0) (= cell_9_4 1)))\n(assert (or (= cell_9_5 0) (= cell_9_5 1)))\n(assert (or (= cell_9_6 0) (= cell_9_6 1)))\n(assert (or (= cell_9_7 0) (= cell_9_7 1)))\n(assert (or (= cell_9_8 0) (= cell_9_8 1)))\n(assert (or (= cell_9_9 0) (= cell_9_9 1)))\n(assert (or (= cell_9_10 0) (= cell_9_10 1)))\n(assert (or (= cell_9_11 0) (= cell_9_11 1)))\n(assert (or (= cell_9_12 0) (= cell_9_12 1)))\n(assert (or (= cell_9_13 0) (= cell_9_13 1)))\n(assert (or (= cell_9_14 0) (= cell_9_14 1)))\n(assert (or (= cell_9_15 0) (= cell_9_15 1)))\n(assert (or (= cell_9_16 0) (= cell_9_16 1)))\n(assert (or (= cell_9_17 0) (= cell_9_17 1)))\n(assert (or (= cell_9_18 0) (= cell_9_18 1)))\n(assert (or (= cell_9_19 0) (= cell_9_19 1)))\n(assert (or (= cell_9_20 0) (= cell_9_20 1)))\n(assert (or (= cell_9_21 0) (= cell_9_21 1)))\n(assert (or (= cell_9_22 0) (= cell_9_22 1)))\n(assert (or (= cell_9_23 0) (= cell_9_23 1)))\n(assert (or (= cell_9_24 0) (= cell_9_24 1)))\n(assert (or (= cell_9_25 0) (= cell_9_25 1)))\n(assert (or (= cell_9_26 0) (= cell_9_26 1)))\n(assert (or (= cell_9_27 0) (= cell_9_27 1)))\n(assert (or (= cell_9_28 0) (= cell_9_28 1)))\n(assert (or (= cell_9_29 0) (= cell_9_29 1)))\n\n(assert (or (= cell_10_0 0) (= cell_10_0 1)))\n(assert (or (= cell_10_1 0) (= cell_10_1 1)))\n(assert (or (= cell_10_2 0) (= cell_10_2 1)))\n(assert (or (= cell_10_3 0) (= cell_10_3 1)))\n(assert (or (= cell_10_4 0) (= cell_10_4 1)))\n(assert (or (= cell_10_5 0) (= cell_10_5 1)))\n(assert (or (= cell_10_6 0) (= cell_10_6 1)))\n(assert (or (= cell_10_7 0) (= cell_10_7 1)))\n(assert (or (= cell_10_8 0) (= cell_10_8 1)))\n(assert (or (= cell_10_9 0) (= cell_10_9 1)))\n(assert (or (= cell_10_10 0) (= cell_10_10 1)))\n(assert (or (= cell_10_11 0) (= cell_10_11 1)))\n(assert (or (= cell_10_12 0) (= cell_10_12 1)))\n(assert (or (= cell_10_13 0) (= cell_10_13 1)))\n(assert (or (= cell_10_14 0) (= cell_10_14 1)))\n(assert (or (= cell_10_15 0) (= cell_10_15 1)))\n(assert (or (= cell_10_16 0) (= cell_10_16 1)))\n(assert (or (= cell_10_17 0) (= cell_10_17 1)))\n(assert (or (= cell_10_18 0) (= cell_10_18 1)))\n(assert (or (= cell_10_19 0) (= cell_10_19 1)))\n(assert (or (= cell_10_20 0) (= cell_10_20 1)))\n(assert (or (= cell_10_21 0) (= cell_10_21 1)))\n(assert (or (= cell_10_22 0) (= cell_10_22 1)))\n(assert (or (= cell_10_23 0) (= cell_10_23 1)))\n(assert (or (= cell_10_24 0) (= cell_10_24 1)))\n(assert (or (= cell_10_25 0) (= cell_10_25 1)))\n(assert (or (= cell_10_26 0) (= cell_10_26 1)))\n(assert (or (= cell_10_27 0) (= cell_10_27 1)))\n(assert (or (= cell_10_28 0) (= cell_10_28 1)))\n(assert (or (= cell_10_29 0) (= cell_10_29 1)))\n\n(assert (or (= cell_11_0 0) (= cell_11_0 1)))\n(assert (or (= cell_11_1 0) (= cell_11_1 1)))\n(assert (or (= cell_11_2 0) (= cell_11_2 1)))\n(assert (or (= cell_11_3 0) (= cell_11_3 1)))\n(assert (or (= cell_11_4 0) (= cell_11_4 1)))\n(assert (or (= cell_11_5 0) (= cell_11_5 1)))\n(assert (or (= cell_11_6 0) (= cell_11_6 1)))\n(assert (or (= cell_11_7 0) (= cell_11_7 1)))\n(assert (or (= cell_11_8 0) (= cell_11_8 1)))\n(assert (or (= cell_11_9 0) (= cell_11_9 1)))\n(assert (or (= cell_11_10 0) (= cell_11_10 1)))\n(assert (or (= cell_11_11 0) (= cell_11_11 1)))\n(assert (or (= cell_11_12 0) (= cell_11_12 1)))\n(assert (or (= cell_11_13 0) (= cell_11_13 1)))\n(assert (or (= cell_11_14 0) (= cell_11_14 1)))\n(assert (or (= cell_11_15 0) (= cell_11_15 1)))\n(assert (or (= cell_11_16 0) (= cell_11_16 1)))\n(assert (or (= cell_11_17 0) (= cell_11_17 1)))\n(assert (or (= cell_11_18 0) (= cell_11_18 1)))\n(assert (or (= cell_11_19 0) (= cell_11_19 1)))\n(assert (or (= cell_11_20 0) (= cell_11_20 1)))\n(assert (or (= cell_11_21 0) (= cell_11_21 1)))\n(assert (or (= cell_11_22 0) (= cell_11_22 1)))\n(assert (or (= cell_11_23 0) (= cell_11_23 1)))\n(assert (or (= cell_11_24 0) (= cell_11_24 1)))\n(assert (or (= cell_11_25 0) (= cell_11_25 1)))\n(assert (or (= cell_11_26 0) (= cell_11_26 1)))\n(assert (or (= cell_11_27 0) (= cell_11_27 1)))\n(assert (or (= cell_11_28 0) (= cell_11_28 1)))\n(assert (or (= cell_11_29 0) (= cell_11_29 1)))\n\n(assert (or (= cell_12_0 0) (= cell_12_0 1)))\n(assert (or (= cell_12_1 0) (= cell_12_1 1)))\n(assert (or (= cell_12_2 0) (= cell_12_2 1)))\n(assert (or (= cell_12_3 0) (= cell_12_3 1)))\n(assert (or (= cell_12_4 0) (= cell_12_4 1)))\n(assert (or (= cell_12_5 0) (= cell_12_5 1)))\n(assert (or (= cell_12_6 0) (= cell_12_6 1)))\n(assert (or (= cell_12_7 0) (= cell_12_7 1)))\n(assert (or (= cell_12_8 0) (= cell_12_8 1)))\n(assert (or (= cell_12_9 0) (= cell_12_9 1)))\n(assert (or (= cell_12_10 0) (= cell_12_10 1)))\n(assert (or (= cell_12_11 0) (= cell_12_11 1)))\n(assert (or (= cell_12_12 0) (= cell_12_12 1)))\n(assert (or (= cell_12_13 0) (= cell_12_13 1)))\n(assert (or (= cell_12_14 0) (= cell_12_14 1)))\n(assert (or (= cell_12_15 0) (= cell_12_15 1)))\n(assert (or (= cell_12_16 0) (= cell_12_16 1)))\n(assert (or (= cell_12_17 0) (= cell_12_17 1)))\n(assert (or (= cell_12_18 0) (= cell_12_18 1)))\n(assert (or (= cell_12_19 0) (= cell_12_19 1)))\n(assert (or (= cell_12_20 0) (= cell_12_20 1)))\n(assert (or (= cell_12_21 0) (= cell_12_21 1)))\n(assert (or (= cell_12_22 0) (= cell_12_22 1)))\n(assert (or (= cell_12_23 0) (= cell_12_23 1)))\n(assert (or (= cell_12_24 0) (= cell_12_24 1)))\n(assert (or (= cell_12_25 0) (= cell_12_25 1)))\n(assert (or (= cell_12_26 0) (= cell_12_26 1)))\n(assert (or (= cell_12_27 0) (= cell_12_27 1)))\n(assert (or (= cell_12_28 0) (= cell_12_28 1)))\n(assert (or (= cell_12_29 0) (= cell_12_29 1)))\n\n(assert (or (= cell_13_0 0) (= cell_13_0 1)))\n(assert (or (= cell_13_1 0) (= cell_13_1 1)))\n(assert (or (= cell_13_2 0) (= cell_13_2 1)))\n(assert (or (= cell_13_3 0) (= cell_13_3 1)))\n(assert (or (= cell_13_4 0) (= cell_13_4 1)))\n(assert (or (= cell_13_5 0) (= cell_13_5 1)))\n(assert (or (= cell_13_6 0) (= cell_13_6 1)))\n(assert (or (= cell_13_7 0) (= cell_13_7 1)))\n(assert (or (= cell_13_8 0) (= cell_13_8 1)))\n(assert (or (= cell_13_9 0) (= cell_13_9 1)))\n(assert (or (= cell_13_10 0) (= cell_13_10 1)))\n(assert (or (= cell_13_11 0) (= cell_13_11 1)))\n(assert (or (= cell_13_12 0) (= cell_13_12 1)))\n(assert (or (= cell_13_13 0) (= cell_13_13 1)))\n(assert (or (= cell_13_14 0) (= cell_13_14 1)))\n(assert (or (= cell_13_15 0) (= cell_13_15 1)))\n(assert (or (= cell_13_16 0) (= cell_13_16 1)))\n(assert (or (= cell_13_17 0) (= cell_13_17 1)))\n(assert (or (= cell_13_18 0) (= cell_13_18 1)))\n(assert (or (= cell_13_19 0) (= cell_13_19 1)))\n(assert (or (= cell_13_20 0) (= cell_13_20 1)))\n(assert (or (= cell_13_21 0) (= cell_13_21 1)))\n(assert (or (= cell_13_22 0) (= cell_13_22 1)))\n(assert (or (= cell_13_23 0) (= cell_13_23 1)))\n(assert (or (= cell_13_24 0) (= cell_13_24 1)))\n(assert (or (= cell_13_25 0) (= cell_13_25 1)))\n(assert (or (= cell_13_26 0) (= cell_13_26 1)))\n(assert (or (= cell_13_27 0) (= cell_13_27 1)))\n(assert (or (= cell_13_28 0) (= cell_13_28 1)))\n(assert (or (= cell_13_29 0) (= cell_13_29 1)))\n\n(assert (or (= cell_14_0 0) (= cell_14_0 1)))\n(assert (or (= cell_14_1 0) (= cell_14_1 1)))\n(assert (or (= cell_14_2 0) (= cell_14_2 1)))\n(assert (or (= cell_14_3 0) (= cell_14_3 1)))\n(assert (or (= cell_14_4 0) (= cell_14_4 1)))\n(assert (or (= cell_14_5 0) (= cell_14_5 1)))\n(assert (or (= cell_14_6 0) (= cell_14_6 1)))\n(assert (or (= cell_14_7 0) (= cell_14_7 1)))\n(assert (or (= cell_14_8 0) (= cell_14_8 1)))\n(assert (or (= cell_14_9 0) (= cell_14_9 1)))\n(assert (or (= cell_14_10 0) (= cell_14_10 1)))\n(assert (or (= cell_14_11 0) (= cell_14_11 1)))\n(assert (or (= cell_14_12 0) (= cell_14_12 1)))\n(assert (or (= cell_14_13 0) (= cell_14_13 1)))\n(assert (or (= cell_14_14 0) (= cell_14_14 1)))\n(assert (or (= cell_14_15 0) (= cell_14_15 1)))\n(assert (or (= cell_14_16 0) (= cell_14_16 1)))\n(assert (or (= cell_14_17 0) (= cell_14_17 1)))\n(assert (or (= cell_14_18 0) (= cell_14_18 1)))\n(assert (or (= cell_14_19 0) (= cell_14_19 1)))\n(assert (or (= cell_14_20 0) (= cell_14_20 1)))\n(assert (or (= cell_14_21 0) (= cell_14_21 1)))\n(assert (or (= cell_14_22 0) (= cell_14_22 1)))\n(assert (or (= cell_14_23 0) (= cell_14_23 1)))\n(assert (or (= cell_14_24 0) (= cell_14_24 1)))\n(assert (or (= cell_14_25 0) (= cell_14_25 1)))\n(assert (or (= cell_14_26 0) (= cell_14_26 1)))\n(assert (or (= cell_14_27 0) (= cell_14_27 1)))\n(assert (or (= cell_14_28 0) (= cell_14_28 1)))\n(assert (or (= cell_14_29 0) (= cell_14_29 1)))\n\n(assert (or (= cell_15_0 0) (= cell_15_0 1)))\n(assert (or (= cell_15_1 0) (= cell_15_1 1)))\n(assert (or (= cell_15_2 0) (= cell_15_2 1)))\n(assert (or (= cell_15_3 0) (= cell_15_3 1)))\n(assert (or (= cell_15_4 0) (= cell_15_4 1)))\n(assert (or (= cell_15_5 0) (= cell_15_5 1)))\n(assert (or (= cell_15_6 0) (= cell_15_6 1)))\n(assert (or (= cell_15_7 0) (= cell_15_7 1)))\n(assert (or (= cell_15_8 0) (= cell_15_8 1)))\n(assert (or (= cell_15_9 0) (= cell_15_9 1)))\n(assert (or (= cell_15_10 0) (= cell_15_10 1)))\n(assert (or (= cell_15_11 0) (= cell_15_11 1)))\n(assert (or (= cell_15_12 0) (= cell_15_12 1)))\n(assert (or (= cell_15_13 0) (= cell_15_13 1)))\n(assert (or (= cell_15_14 0) (= cell_15_14 1)))\n(assert (or (= cell_15_15 0) (= cell_15_15 1)))\n(assert (or (= cell_15_16 0) (= cell_15_16 1)))\n(assert (or (= cell_15_17 0) (= cell_15_17 1)))\n(assert (or (= cell_15_18 0) (= cell_15_18 1)))\n(assert (or (= cell_15_19 0) (= cell_15_19 1)))\n(assert (or (= cell_15_20 0) (= cell_15_20 1)))\n(assert (or (= cell_15_21 0) (= cell_15_21 1)))\n(assert (or (= cell_15_22 0) (= cell_15_22 1)))\n(assert (or (= cell_15_23 0) (= cell_15_23 1)))\n(assert (or (= cell_15_24 0) (= cell_15_24 1)))\n(assert (or (= cell_15_25 0) (= cell_15_25 1)))\n(assert (or (= cell_15_26 0) (= cell_15_26 1)))\n(assert (or (= cell_15_27 0) (= cell_15_27 1)))\n(assert (or (= cell_15_28 0) (= cell_15_28 1)))\n(assert (or (= cell_15_29 0) (= cell_15_29 1)))\n\n(assert (or (= cell_16_0 0) (= cell_16_0 1)))\n(assert (or (= cell_16_1 0) (= cell_16_1 1)))\n(assert (or (= cell_16_2 0) (= cell_16_2 1)))\n(assert (or (= cell_16_3 0) (= cell_16_3 1)))\n(assert (or (= cell_16_4 0) (= cell_16_4 1)))\n(assert (or (= cell_16_5 0) (= cell_16_5 1)))\n(assert (or (= cell_16_6 0) (= cell_16_6 1)))\n(assert (or (= cell_16_7 0) (= cell_16_7 1)))\n(assert (or (= cell_16_8 0) (= cell_16_8 1)))\n(assert (or (= cell_16_9 0) (= cell_16_9 1)))\n(assert (or (= cell_16_10 0) (= cell_16_10 1)))\n(assert (or (= cell_16_11 0) (= cell_16_11 1)))\n(assert (or (= cell_16_12 0) (= cell_16_12 1)))\n(assert (or (= cell_16_13 0) (= cell_16_13 1)))\n(assert (or (= cell_16_14 0) (= cell_16_14 1)))\n(assert (or (= cell_16_15 0) (= cell_16_15 1)))\n(assert (or (= cell_16_16 0) (= cell_16_16 1)))\n(assert (or (= cell_16_17 0) (= cell_16_17 1)))\n(assert (or (= cell_16_18 0) (= cell_16_18 1)))\n(assert (or (= cell_16_19 0) (= cell_16_19 1)))\n(assert (or (= cell_16_20 0) (= cell_16_20 1)))\n(assert (or (= cell_16_21 0) (= cell_16_21 1)))\n(assert (or (= cell_16_22 0) (= cell_16_22 1)))\n(assert (or (= cell_16_23 0) (= cell_16_23 1)))\n(assert (or (= cell_16_24 0) (= cell_16_24 1)))\n(assert (or (= cell_16_25 0) (= cell_16_25 1)))\n(assert (or (= cell_16_26 0) (= cell_16_26 1)))\n(assert (or (= cell_16_27 0) (= cell_16_27 1)))\n(assert (or (= cell_16_28 0) (= cell_16_28 1)))\n(assert (or (= cell_16_29 0) (= cell_16_29 1)))\n\n(assert (or (= cell_17_0 0) (= cell_17_0 1)))\n(assert (or (= cell_17_1 0) (= cell_17_1 1)))\n(assert (or (= cell_17_2 0) (= cell_17_2 1)))\n(assert (or (= cell_17_3 0) (= cell_17_3 1)))\n(assert (or (= cell_17_4 0) (= cell_17_4 1)))\n(assert (or (= cell_17_5 0) (= cell_17_5 1)))\n(assert (or (= cell_17_6 0) (= cell_17_6 1)))\n(assert (or (= cell_17_7 0) (= cell_17_7 1)))\n(assert (or (= cell_17_8 0) (= cell_17_8 1)))\n(assert (or (= cell_17_9 0) (= cell_17_9 1)))\n(assert (or (= cell_17_10 0) (= cell_17_10 1)))\n(assert (or (= cell_17_11 0) (= cell_17_11 1)))\n(assert (or (= cell_17_12 0) (= cell_17_12 1)))\n(assert (or (= cell_17_13 0) (= cell_17_13 1)))\n(assert (or (= cell_17_14 0) (= cell_17_14 1)))\n(assert (or (= cell_17_15 0) (= cell_17_15 1)))\n(assert (or (= cell_17_16 0) (= cell_17_16 1)))\n(assert (or (= cell_17_17 0) (= cell_17_17 1)))\n(assert (or (= cell_17_18 0) (= cell_17_18 1)))\n(assert (or (= cell_17_19 0) (= cell_17_19 1)))\n(assert (or (= cell_17_20 0) (= cell_17_20 1)))\n(assert (or (= cell_17_21 0) (= cell_17_21 1)))\n(assert (or (= cell_17_22 0) (= cell_17_22 1)))\n(assert (or (= cell_17_23 0) (= cell_17_23 1)))\n(assert (or (= cell_17_24 0) (= cell_17_24 1)))\n(assert (or (= cell_17_25 0) (= cell_17_25 1)))\n(assert (or (= cell_17_26 0) (= cell_17_26 1)))\n(assert (or (= cell_17_27 0) (= cell_17_27 1)))\n(assert (or (= cell_17_28 0) (= cell_17_28 1)))\n(assert (or (= cell_17_29 0) (= cell_17_29 1)))\n\n(assert (or (= cell_18_0 0) (= cell_18_0 1)))\n(assert (or (= cell_18_1 0) (= cell_18_1 1)))\n(assert (or (= cell_18_2 0) (= cell_18_2 1)))\n(assert (or (= cell_18_3 0) (= cell_18_3 1)))\n(assert (or (= cell_18_4 0) (= cell_18_4 1)))\n(assert (or (= cell_18_5 0) (= cell_18_5 1)))\n(assert (or (= cell_18_6 0) (= cell_18_6 1)))\n(assert (or (= cell_18_7 0) (= cell_18_7 1)))\n(assert (or (= cell_18_8 0) (= cell_18_8 1)))\n(assert (or (= cell_18_9 0) (= cell_18_9 1)))\n(assert (or (= cell_18_10 0) (= cell_18_10 1)))\n(assert (or (= cell_18_11 0) (= cell_18_11 1)))\n(assert (or (= cell_18_12 0) (= cell_18_12 1)))\n(assert (or (= cell_18_13 0) (= cell_18_13 1)))\n(assert (or (= cell_18_14 0) (= cell_18_14 1)))\n(assert (or (= cell_18_15 0) (= cell_18_15 1)))\n(assert (or (= cell_18_16 0) (= cell_18_16 1)))\n(assert (or (= cell_18_17 0) (= cell_18_17 1)))\n(assert (or (= cell_18_18 0) (= cell_18_18 1)))\n(assert (or (= cell_18_19 0) (= cell_18_19 1)))\n(assert (or (= cell_18_20 0) (= cell_18_20 1)))\n(assert (or (= cell_18_21 0) (= cell_18_21 1)))\n(assert (or (= cell_18_22 0) (= cell_18_22 1)))\n(assert (or (= cell_18_23 0) (= cell_18_23 1)))\n(assert (or (= cell_18_24 0) (= cell_18_24 1)))\n(assert (or (= cell_18_25 0) (= cell_18_25 1)))\n(assert (or (= cell_18_26 0) (= cell_18_26 1)))\n(assert (or (= cell_18_27 0) (= cell_18_27 1)))\n(assert (or (= cell_18_28 0) (= cell_18_28 1)))\n(assert (or (= cell_18_29 0) (= cell_18_29 1)))\n\n(assert (or (= cell_19_0 0) (= cell_19_0 1)))\n(assert (or (= cell_19_1 0) (= cell_19_1 1)))\n(assert (or (= cell_19_2 0) (= cell_19_2 1)))\n(assert (or (= cell_19_3 0) (= cell_19_3 1)))\n(assert (or (= cell_19_4 0) (= cell_19_4 1)))\n(assert (or (= cell_19_5 0) (= cell_19_5 1)))\n(assert (or (= cell_19_6 0) (= cell_19_6 1)))\n(assert (or (= cell_19_7 0) (= cell_19_7 1)))\n(assert (or (= cell_19_8 0) (= cell_19_8 1)))\n(assert (or (= cell_19_9 0) (= cell_19_9 1)))\n(assert (or (= cell_19_10 0) (= cell_19_10 1)))\n(assert (or (= cell_19_11 0) (= cell_19_11 1)))\n(assert (or (= cell_19_12 0) (= cell_19_12 1)))\n(assert (or (= cell_19_13 0) (= cell_19_13 1)))\n(assert (or (= cell_19_14 0) (= cell_19_14 1)))\n(assert (or (= cell_19_15 0) (= cell_19_15 1)))\n(assert (or (= cell_19_16 0) (= cell_19_16 1)))\n(assert (or (= cell_19_17 0) (= cell_19_17 1)))\n(assert (or (= cell_19_18 0) (= cell_19_18 1)))\n(assert (or (= cell_19_19 0) (= cell_19_19 1)))\n(assert (or (= cell_19_20 0) (= cell_19_20 1)))\n(assert (or (= cell_19_21 0) (= cell_19_21 1)))\n(assert (or (= cell_19_22 0) (= cell_19_22 1)))\n(assert (or (= cell_19_23 0) (= cell_19_23 1)))\n(assert (or (= cell_19_24 0) (= cell_19_24 1)))\n(assert (or (= cell_19_25 0) (= cell_19_25 1)))\n(assert (or (= cell_19_26 0) (= cell_19_26 1)))\n(assert (or (= cell_19_27 0) (= cell_19_27 1)))\n(assert (or (= cell_19_28 0) (= cell_19_28 1)))\n(assert (or (= cell_19_29 0) (= cell_19_29 1)))\n\n(assert (or (= cell_20_0 0) (= cell_20_0 1)))\n(assert (or (= cell_20_1 0) (= cell_20_1 1)))\n(assert (or (= cell_20_2 0) (= cell_20_2 1)))\n(assert (or (= cell_20_3 0) (= cell_20_3 1)))\n(assert (or (= cell_20_4 0) (= cell_20_4 1)))\n(assert (or (= cell_20_5 0) (= cell_20_5 1)))\n(assert (or (= cell_20_6 0) (= cell_20_6 1)))\n(assert (or (= cell_20_7 0) (= cell_20_7 1)))\n(assert (or (= cell_20_8 0) (= cell_20_8 1)))\n(assert (or (= cell_20_9 0) (= cell_20_9 1)))\n(assert (or (= cell_20_10 0) (= cell_20_10 1)))\n(assert (or (= cell_20_11 0) (= cell_20_11 1)))\n(assert (or (= cell_20_12 0) (= cell_20_12 1)))\n(assert (or (= cell_20_13 0) (= cell_20_13 1)))\n(assert (or (= cell_20_14 0) (= cell_20_14 1)))\n(assert (or (= cell_20_15 0) (= cell_20_15 1)))\n(assert (or (= cell_20_16 0) (= cell_20_16 1)))\n(assert (or (= cell_20_17 0) (= cell_20_17 1)))\n(assert (or (= cell_20_18 0) (= cell_20_18 1)))\n(assert (or (= cell_20_19 0) (= cell_20_19 1)))\n(assert (or (= cell_20_20 0) (= cell_20_20 1)))\n(assert (or (= cell_20_21 0) (= cell_20_21 1)))\n(assert (or (= cell_20_22 0) (= cell_20_22 1)))\n(assert (or (= cell_20_23 0) (= cell_20_23 1)))\n(assert (or (= cell_20_24 0) (= cell_20_24 1)))\n(assert (or (= cell_20_25 0) (= cell_20_25 1)))\n(assert (or (= cell_20_26 0) (= cell_20_26 1)))\n(assert (or (= cell_20_27 0) (= cell_20_27 1)))\n(assert (or (= cell_20_28 0) (= cell_20_28 1)))\n(assert (or (= cell_20_29 0) (= cell_20_29 1)))\n\n(assert (or (= cell_21_0 0) (= cell_21_0 1)))\n(assert (or (= cell_21_1 0) (= cell_21_1 1)))\n(assert (or (= cell_21_2 0) (= cell_21_2 1)))\n(assert (or (= cell_21_3 0) (= cell_21_3 1)))\n(assert (or (= cell_21_4 0) (= cell_21_4 1)))\n(assert (or (= cell_21_5 0) (= cell_21_5 1)))\n(assert (or (= cell_21_6 0) (= cell_21_6 1)))\n(assert (or (= cell_21_7 0) (= cell_21_7 1)))\n(assert (or (= cell_21_8 0) (= cell_21_8 1)))\n(assert (or (= cell_21_9 0) (= cell_21_9 1)))\n(assert (or (= cell_21_10 0) (= cell_21_10 1)))\n(assert (or (= cell_21_11 0) (= cell_21_11 1)))\n(assert (or (= cell_21_12 0) (= cell_21_12 1)))\n(assert (or (= cell_21_13 0) (= cell_21_13 1)))\n(assert (or (= cell_21_14 0) (= cell_21_14 1)))\n(assert (or (= cell_21_15 0) (= cell_21_15 1)))\n(assert (or (= cell_21_16 0) (= cell_21_16 1)))\n(assert (or (= cell_21_17 0) (= cell_21_17 1)))\n(assert (or (= cell_21_18 0) (= cell_21_18 1)))\n(assert (or (= cell_21_19 0) (= cell_21_19 1)))\n(assert (or (= cell_21_20 0) (= cell_21_20 1)))\n(assert (or (= cell_21_21 0) (= cell_21_21 1)))\n(assert (or (= cell_21_22 0) (= cell_21_22 1)))\n(assert (or (= cell_21_23 0) (= cell_21_23 1)))\n(assert (or (= cell_21_24 0) (= cell_21_24 1)))\n(assert (or (= cell_21_25 0) (= cell_21_25 1)))\n(assert (or (= cell_21_26 0) (= cell_21_26 1)))\n(assert (or (= cell_21_27 0) (= cell_21_27 1)))\n(assert (or (= cell_21_28 0) (= cell_21_28 1)))\n(assert (or (= cell_21_29 0) (= cell_21_29 1)))\n\n(assert (or (= cell_22_0 0) (= cell_22_0 1)))\n(assert (or (= cell_22_1 0) (= cell_22_1 1)))\n(assert (or (= cell_22_2 0) (= cell_22_2 1)))\n(assert (or (= cell_22_3 0) (= cell_22_3 1)))\n(assert (or (= cell_22_4 0) (= cell_22_4 1)))\n(assert (or (= cell_22_5 0) (= cell_22_5 1)))\n(assert (or (= cell_22_6 0) (= cell_22_6 1)))\n(assert (or (= cell_22_7 0) (= cell_22_7 1)))\n(assert (or (= cell_22_8 0) (= cell_22_8 1)))\n(assert (or (= cell_22_9 0) (= cell_22_9 1)))\n(assert (or (= cell_22_10 0) (= cell_22_10 1)))\n(assert (or (= cell_22_11 0) (= cell_22_11 1)))\n(assert (or (= cell_22_12 0) (= cell_22_12 1)))\n(assert (or (= cell_22_13 0) (= cell_22_13 1)))\n(assert (or (= cell_22_14 0) (= cell_22_14 1)))\n(assert (or (= cell_22_15 0) (= cell_22_15 1)))\n(assert (or (= cell_22_16 0) (= cell_22_16 1)))\n(assert (or (= cell_22_17 0) (= cell_22_17 1)))\n(assert (or (= cell_22_18 0) (= cell_22_18 1)))\n(assert (or (= cell_22_19 0) (= cell_22_19 1)))\n(assert (or (= cell_22_20 0) (= cell_22_20 1)))\n(assert (or (= cell_22_21 0) (= cell_22_21 1)))\n(assert (or (= cell_22_22 0) (= cell_22_22 1)))\n(assert (or (= cell_22_23 0) (= cell_22_23 1)))\n(assert (or (= cell_22_24 0) (= cell_22_24 1)))\n(assert (or (= cell_22_25 0) (= cell_22_25 1)))\n(assert (or (= cell_22_26 0) (= cell_22_26 1)))\n(assert (or (= cell_22_27 0) (= cell_22_27 1)))\n(assert (or (= cell_22_28 0) (= cell_22_28 1)))\n(assert (or (= cell_22_29 0) (= cell_22_29 1)))\n\n(assert (or (= cell_23_0 0) (= cell_23_0 1)))\n(assert (or (= cell_23_1 0) (= cell_23_1 1)))\n(assert (or (= cell_23_2 0) (= cell_23_2 1)))\n(assert (or (= cell_23_3 0) (= cell_23_3 1)))\n(assert (or (= cell_23_4 0) (= cell_23_4 1)))\n(assert (or (= cell_23_5 0) (= cell_23_5 1)))\n(assert (or (= cell_23_6 0) (= cell_23_6 1)))\n(assert (or (= cell_23_7 0) (= cell_23_7 1)))\n(assert (or (= cell_23_8 0) (= cell_23_8 1)))\n(assert (or (= cell_23_9 0) (= cell_23_9 1)))\n(assert (or (= cell_23_10 0) (= cell_23_10 1)))\n(assert (or (= cell_23_11 0) (= cell_23_11 1)))\n(assert (or (= cell_23_12 0) (= cell_23_12 1)))\n(assert (or (= cell_23_13 0) (= cell_23_13 1)))\n(assert (or (= cell_23_14 0) (= cell_23_14 1)))\n(assert (or (= cell_23_15 0) (= cell_23_15 1)))\n(assert (or (= cell_23_16 0) (= cell_23_16 1)))\n(assert (or (= cell_23_17 0) (= cell_23_17 1)))\n(assert (or (= cell_23_18 0) (= cell_23_18 1)))\n(assert (or (= cell_23_19 0) (= cell_23_19 1)))\n(assert (or (= cell_23_20 0) (= cell_23_20 1)))\n(assert (or (= cell_23_21 0) (= cell_23_21 1)))\n(assert (or (= cell_23_22 0) (= cell_23_22 1)))\n(assert (or (= cell_23_23 0) (= cell_23_23 1)))\n(assert (or (= cell_23_24 0) (= cell_23_24 1)))\n(assert (or (= cell_23_25 0) (= cell_23_25 1)))\n(assert (or (= cell_23_26 0) (= cell_23_26 1)))\n(assert (or (= cell_23_27 0) (= cell_23_27 1)))\n(assert (or (= cell_23_28 0) (= cell_23_28 1)))\n(assert (or (= cell_23_29 0) (= cell_23_29 1)))\n\n(assert (or (= cell_24_0 0) (= cell_24_0 1)))\n(assert (or (= cell_24_1 0) (= cell_24_1 1)))\n(assert (or (= cell_24_2 0) (= cell_24_2 1)))\n(assert (or (= cell_24_3 0) (= cell_24_3 1)))\n(assert (or (= cell_24_4 0) (= cell_24_4 1)))\n(assert (or (= cell_24_5 0) (= cell_24_5 1)))\n(assert (or (= cell_24_6 0) (= cell_24_6 1)))\n(assert (or (= cell_24_7 0) (= cell_24_7 1)))\n(assert (or (= cell_24_8 0) (= cell_24_8 1)))\n(assert (or (= cell_24_9 0) (= cell_24_9 1)))\n(assert (or (= cell_24_10 0) (= cell_24_10 1)))\n(assert (or (= cell_24_11 0) (= cell_24_11 1)))\n(assert (or (= cell_24_12 0) (= cell_24_12 1)))\n(assert (or (= cell_24_13 0) (= cell_24_13 1)))\n(assert (or (= cell_24_14 0) (= cell_24_14 1)))\n(assert (or (= cell_24_15 0) (= cell_24_15 1)))\n(assert (or (= cell_24_16 0) (= cell_24_16 1)))\n(assert (or (= cell_24_17 0) (= cell_24_17 1)))\n(assert (or (= cell_24_18 0) (= cell_24_18 1)))\n(assert (or (= cell_24_19 0) (= cell_24_19 1)))\n(assert (or (= cell_24_20 0) (= cell_24_20 1)))\n(assert (or (= cell_24_21 0) (= cell_24_21 1)))\n(assert (or (= cell_24_22 0) (= cell_24_22 1)))\n(assert (or (= cell_24_23 0) (= cell_24_23 1)))\n(assert (or (= cell_24_24 0) (= cell_24_24 1)))\n(assert (or (= cell_24_25 0) (= cell_24_25 1)))\n(assert (or (= cell_24_26 0) (= cell_24_26 1)))\n(assert (or (= cell_24_27 0) (= cell_24_27 1)))\n(assert (or (= cell_24_28 0) (= cell_24_28 1)))\n(assert (or (= cell_24_29 0) (= cell_24_29 1)))\n\n(assert (or (= cell_25_0 0) (= cell_25_0 1)))\n(assert (or (= cell_25_1 0) (= cell_25_1 1)))\n(assert (or (= cell_25_2 0) (= cell_25_2 1)))\n(assert (or (= cell_25_3 0) (= cell_25_3 1)))\n(assert (or (= cell_25_4 0) (= cell_25_4 1)))\n(assert (or (= cell_25_5 0) (= cell_25_5 1)))\n(assert (or (= cell_25_6 0) (= cell_25_6 1)))\n(assert (or (= cell_25_7 0) (= cell_25_7 1)))\n(assert (or (= cell_25_8 0) (= cell_25_8 1)))\n(assert (or (= cell_25_9 0) (= cell_25_9 1)))\n(assert (or (= cell_25_10 0) (= cell_25_10 1)))\n(assert (or (= cell_25_11 0) (= cell_25_11 1)))\n(assert (or (= cell_25_12 0) (= cell_25_12 1)))\n(assert (or (= cell_25_13 0) (= cell_25_13 1)))\n(assert (or (= cell_25_14 0) (= cell_25_14 1)))\n(assert (or (= cell_25_15 0) (= cell_25_15 1)))\n(assert (or (= cell_25_16 0) (= cell_25_16 1)))\n(assert (or (= cell_25_17 0) (= cell_25_17 1)))\n(assert (or (= cell_25_18 0) (= cell_25_18 1)))\n(assert (or (= cell_25_19 0) (= cell_25_19 1)))\n(assert (or (= cell_25_20 0) (= cell_25_20 1)))\n(assert (or (= cell_25_21 0) (= cell_25_21 1)))\n(assert (or (= cell_25_22 0) (= cell_25_22 1)))\n(assert (or (= cell_25_23 0) (= cell_25_23 1)))\n(assert (or (= cell_25_24 0) (= cell_25_24 1)))\n(assert (or (= cell_25_25 0) (= cell_25_25 1)))\n(assert (or (= cell_25_26 0) (= cell_25_26 1)))\n(assert (or (= cell_25_27 0) (= cell_25_27 1)))\n(assert (or (= cell_25_28 0) (= cell_25_28 1)))\n(assert (or (= cell_25_29 0) (= cell_25_29 1)))\n\n(assert (or (= cell_26_0 0) (= cell_26_0 1)))\n(assert (or (= cell_26_1 0) (= cell_26_1 1)))\n(assert (or (= cell_26_2 0) (= cell_26_2 1)))\n(assert (or (= cell_26_3 0) (= cell_26_3 1)))\n(assert (or (= cell_26_4 0) (= cell_26_4 1)))\n(assert (or (= cell_26_5 0) (= cell_26_5 1)))\n(assert (or (= cell_26_6 0) (= cell_26_6 1)))\n(assert (or (= cell_26_7 0) (= cell_26_7 1)))\n(assert (or (= cell_26_8 0) (= cell_26_8 1)))\n(assert (or (= cell_26_9 0) (= cell_26_9 1)))\n(assert (or (= cell_26_10 0) (= cell_26_10 1)))\n(assert (or (= cell_26_11 0) (= cell_26_11 1)))\n(assert (or (= cell_26_12 0) (= cell_26_12 1)))\n(assert (or (= cell_26_13 0) (= cell_26_13 1)))\n(assert (or (= cell_26_14 0) (= cell_26_14 1)))\n(assert (or (= cell_26_15 0) (= cell_26_15 1)))\n(assert (or (= cell_26_16 0) (= cell_26_16 1)))\n(assert (or (= cell_26_17 0) (= cell_26_17 1)))\n(assert (or (= cell_26_18 0) (= cell_26_18 1)))\n(assert (or (= cell_26_19 0) (= cell_26_19 1)))\n(assert (or (= cell_26_20 0) (= cell_26_20 1)))\n(assert (or (= cell_26_21 0) (= cell_26_21 1)))\n(assert (or (= cell_26_22 0) (= cell_26_22 1)))\n(assert (or (= cell_26_23 0) (= cell_26_23 1)))\n(assert (or (= cell_26_24 0) (= cell_26_24 1)))\n(assert (or (= cell_26_25 0) (= cell_26_25 1)))\n(assert (or (= cell_26_26 0) (= cell_26_26 1)))\n(assert (or (= cell_26_27 0) (= cell_26_27 1)))\n(assert (or (= cell_26_28 0) (= cell_26_28 1)))\n(assert (or (= cell_26_29 0) (= cell_26_29 1)))\n\n(assert (or (= cell_27_0 0) (= cell_27_0 1)))\n(assert (or (= cell_27_1 0) (= cell_27_1 1)))\n(assert (or (= cell_27_2 0) (= cell_27_2 1)))\n(assert (or (= cell_27_3 0) (= cell_27_3 1)))\n(assert (or (= cell_27_4 0) (= cell_27_4 1)))\n(assert (or (= cell_27_5 0) (= cell_27_5 1)))\n(assert (or (= cell_27_6 0) (= cell_27_6 1)))\n(assert (or (= cell_27_7 0) (= cell_27_7 1)))\n(assert (or (= cell_27_8 0) (= cell_27_8 1)))\n(assert (or (= cell_27_9 0) (= cell_27_9 1)))\n(assert (or (= cell_27_10 0) (= cell_27_10 1)))\n(assert (or (= cell_27_11 0) (= cell_27_11 1)))\n(assert (or (= cell_27_12 0) (= cell_27_12 1)))\n(assert (or (= cell_27_13 0) (= cell_27_13 1)))\n(assert (or (= cell_27_14 0) (= cell_27_14 1)))\n(assert (or (= cell_27_15 0) (= cell_27_15 1)))\n(assert (or (= cell_27_16 0) (= cell_27_16 1)))\n(assert (or (= cell_27_17 0) (= cell_27_17 1)))\n(assert (or (= cell_27_18 0) (= cell_27_18 1)))\n(assert (or (= cell_27_19 0) (= cell_27_19 1)))\n(assert (or (= cell_27_20 0) (= cell_27_20 1)))\n(assert (or (= cell_27_21 0) (= cell_27_21 1)))\n(assert (or (= cell_27_22 0) (= cell_27_22 1)))\n(assert (or (= cell_27_23 0) (= cell_27_23 1)))\n(assert (or (= cell_27_24 0) (= cell_27_24 1)))\n(assert (or (= cell_27_25 0) (= cell_27_25 1)))\n(assert (or (= cell_27_26 0) (= cell_27_26 1)))\n(assert (or (= cell_27_27 0) (= cell_27_27 1)))\n(assert (or (= cell_27_28 0) (= cell_27_28 1)))\n(assert (or (= cell_27_29 0) (= cell_27_29 1)))\n\n(assert (or (= cell_28_0 0) (= cell_28_0 1)))\n(assert (or (= cell_28_1 0) (= cell_28_1 1)))\n(assert (or (= cell_28_2 0) (= cell_28_2 1)))\n(assert (or (= cell_28_3 0) (= cell_28_3 1)))\n(assert (or (= cell_28_4 0) (= cell_28_4 1)))\n(assert (or (= cell_28_5 0) (= cell_28_5 1)))\n(assert (or (= cell_28_6 0) (= cell_28_6 1)))\n(assert (or (= cell_28_7 0) (= cell_28_7 1)))\n(assert (or (= cell_28_8 0) (= cell_28_8 1)))\n(assert (or (= cell_28_9 0) (= cell_28_9 1)))\n(assert (or (= cell_28_10 0) (= cell_28_10 1)))\n(assert (or (= cell_28_11 0) (= cell_28_11 1)))\n(assert (or (= cell_28_12 0) (= cell_28_12 1)))\n(assert (or (= cell_28_13 0) (= cell_28_13 1)))\n(assert (or (= cell_28_14 0) (= cell_28_14 1)))\n(assert (or (= cell_28_15 0) (= cell_28_15 1)))\n(assert (or (= cell_28_16 0) (= cell_28_16 1)))\n(assert (or (= cell_28_17 0) (= cell_28_17 1)))\n(assert (or (= cell_28_18 0) (= cell_28_18 1)))\n(assert (or (= cell_28_19 0) (= cell_28_19 1)))\n(assert (or (= cell_28_20 0) (= cell_28_20 1)))\n(assert (or (= cell_28_21 0) (= cell_28_21 1)))\n(assert (or (= cell_28_22 0) (= cell_28_22 1)))\n(assert (or (= cell_28_23 0) (= cell_28_23 1)))\n(assert (or (= cell_28_24 0) (= cell_28_24 1)))\n(assert (or (= cell_28_25 0) (= cell_28_25 1)))\n(assert (or (= cell_28_26 0) (= cell_28_26 1)))\n(assert (or (= cell_28_27 0) (= cell_28_27 1)))\n(assert (or (= cell_28_28 0) (= cell_28_28 1)))\n(assert (or (= cell_28_29 0) (= cell_28_29 1)))\n\n(assert (or (= cell_29_0 0) (= cell_29_0 1)))\n(assert (or (= cell_29_1 0) (= cell_29_1 1)))\n(assert (or (= cell_29_2 0) (= cell_29_2 1)))\n(assert (or (= cell_29_3 0) (= cell_29_3 1)))\n(assert (or (= cell_29_4 0) (= cell_29_4 1)))\n(assert (or (= cell_29_5 0) (= cell_29_5 1)))\n(assert (or (= cell_29_6 0) (= cell_29_6 1)))\n(assert (or (= cell_29_7 0) (= cell_29_7 1)))\n(assert (or (= cell_29_8 0) (= cell_29_8 1)))\n(assert (or (= cell_29_9 0) (= cell_29_9 1)))\n(assert (or (= cell_29_10 0) (= cell_29_10 1)))\n(assert (or (= cell_29_11 0) (= cell_29_11 1)))\n(assert (or (= cell_29_12 0) (= cell_29_12 1)))\n(assert (or (= cell_29_13 0) (= cell_29_13 1)))\n(assert (or (= cell_29_14 0) (= cell_29_14 1)))\n(assert (or (= cell_29_15 0) (= cell_29_15 1)))\n(assert (or (= cell_29_16 0) (= cell_29_16 1)))\n(assert (or (= cell_29_17 0) (= cell_29_17 1)))\n(assert (or (= cell_29_18 0) (= cell_29_18 1)))\n(assert (or (= cell_29_19 0) (= cell_29_19 1)))\n(assert (or (= cell_29_20 0) (= cell_29_20 1)))\n(assert (or (= cell_29_21 0) (= cell_29_21 1)))\n(assert (or (= cell_29_22 0) (= cell_29_22 1)))\n(assert (or (= cell_29_23 0) (= cell_29_23 1)))\n(assert (or (= cell_29_24 0) (= cell_29_24 1)))\n(assert (or (= cell_29_25 0) (= cell_29_25 1)))\n(assert (or (= cell_29_26 0) (= cell_29_26 1)))\n(assert (or (= cell_29_27 0) (= cell_29_27 1)))\n(assert (or (= cell_29_28 0) (= cell_29_28 1)))\n(assert (or (= cell_29_29 0) (= cell_29_29 1)))\n\n; Start and goal cells must be free (0)\n(assert (= cell_0_0 0))\n(assert (= cell_29_29 0))\n\n(check-sat)\n(get-model)\n(exit)"
    }
  },
  "SortedListInsert": {
    "program": "/**\n * Copyright (c) 2011, Regents of the University of California\n * All rights reserved.\n * <p/>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <p/>\n * 1. Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * <p/>\n * 2. Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution.\n * <p/>\n * 3. Neither the name of the University of California, Berkeley nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n * <p/>\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\n/**\n * @author Jacob Burnim <jburnim@cs.berkeley.edu>\n */\npublic class SortedListInsert {\n\n    private static class List {\n        private int x;\n        private List next;\n\n        private static final int SENTINEL = Integer.MAX_VALUE;\n\n        private List(int x, List next) {\n            this.x = x;\n            this.next = next;\n        }\n\n        public List() {\n            this(SENTINEL, null);\n        }\n        \n        public void insertMask(int data) {\n          if (data > this.x) {\n              next.insertMask(data);\n          } else {\n              next = new List(x, next);\n              x = data;\n          }\n      }\n\n        public void insert(int data) {\n            if (data > this.x) {\n                next.insert(data);\n            } else {\n                next = new List(x, next);\n                x = data;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        final int N = Integer.parseInt(args[0]);\n\n        List list = new List();\n        for (int i = 0; i < N; i++) {\n            list.insertMask(Debug.makeSymbolicInteger(\"in\"+i));//Concolic.input.Integer());\n        }\n\n        // We only measure the complexity (i.e. path length) of the\n        // final insert operation.  That is, we count branches only\n        // from this point forward in the execution.\n       // Concolic.ResetBranchCounting();\n\n        list.insert(Debug.makeSymbolicInteger(\"in\"));//Concolic.input.Integer());\n    }\n}\n",
    "2": {
      "constants": "(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and (and  ( >  in1 in0)  ( >  in in0))  ( >  in in1)))",
      "response": "- Worst-case time complexity:\n  - For the final insert operation (the part they measure): O(N), since the algorithm may traverse all N existing nodes before inserting just before the sentinel.\n  - For the entire program (building the list with N insertions, then one more): O(N^2) overall due to the N sorted insertions in the loop, plus an additional O(N) final insert.\n\n- Worst-case path condition for the final insert (so it traverses all N existing elements): the last inserted value must be strictly greater than every existing list element.\n\nFor input size n = 2, using the symbolic names in0, in1 for the first two inserts and in for the final insert, the SMT2 constraint is:\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in Int)\n(assert (and (> in in0) (> in in1)))"
    },
    "4": {
      "constants": "(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and  ( >  in1 in0)  ( >  in2 in0))  ( >  in2 in1))  ( >  in3 in0))  ( >  in3 in1))  ( >  in3 in2))  ( >  in in0))  ( >  in in1))  ( >  in in2))  ( >  in in3)))",
      "response": "- Worst-case time complexity:\n  - Final insert (what the code\u2019s comment says to measure): O(N), where N is the number of existing elements in the list (insert traverses all data nodes before the sentinel when the new key is larger than all existing keys).\n  - Note: Building the list with N prior insertions is O(N^2) overall, but that is not counted per the comment.\n\n- SMT2 constraints for input size n=4 (values in0, in1, in2, in3 inserted first, then in), ensuring the worst-case path for the final insert (new value is strictly greater than every existing element so all N branches are taken before stopping at the sentinel):\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in () Int)\n; Java int bounds; ensure initial elements are below MAX_VALUE so worst-case is feasible\n(assert (and (>= in0 -2147483648) (<= in0 2147483646)))\n(assert (and (>= in1 -2147483648) (<= in1 2147483646)))\n(assert (and (>= in2 -2147483648) (<= in2 2147483646)))\n(assert (and (>= in3 -2147483648) (<= in3 2147483646)))\n(assert (and (>= in  -2147483648) (<= in  2147483647)))\n; Worst-case path for final insert: new key greater than all existing keys\n(assert (> in in0))\n(assert (> in in1))\n(assert (> in in2))\n(assert (> in in3))\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >  in1 in0)  ( >  in2 in0))  ( >  in2 in1))  ( >  in3 in0))  ( >  in3 in1))  ( >  in3 in2))  ( >  in4 in0))  ( >  in4 in1))  ( >  in4 in2))  ( >  in4 in3))  ( >  in5 in0))  ( >  in5 in1))  ( >  in5 in2))  ( >  in5 in3))  ( >  in5 in4))  ( >  in6 in0))  ( >  in6 in1))  ( >  in6 in2))  ( >  in6 in3))  ( >  in6 in4))  ( >  in6 in5))  ( >  in7 in0))  ( >  in7 in1))  ( >  in7 in2))  ( >  in7 in3))  ( >  in7 in4))  ( >  in7 in5))  ( >  in7 in6))  ( >  in in0))  ( >  in in1))  ( >  in in2))  ( >  in in3))  ( >  in in4))  ( >  in in5))  ( >  in in6))  ( >  in in7)))",
      "response": "Worst-case time complexity:\n- Final insert (the part the program explicitly measures): O(n) comparisons, where n is the number of elements already in the list.\n- If you count building the list with the first n insertions as well, total program time is O(n^2) (since the i-th insertion can take O(i)).\n\nSMT2 constraint for n = 8 that forces the worst-case path for the final insert:\n- Ensure the final symbolic input in is larger than every previously inserted value.\n- Also ensure no previous value equals Integer.MAX_VALUE, so the traversal reaches the sentinel at the end.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(assert (and\n  (<= in0 2147483646)\n  (<= in1 2147483646)\n  (<= in2 2147483646)\n  (<= in3 2147483646)\n  (<= in4 2147483646)\n  (<= in5 2147483646)\n  (<= in6 2147483646)\n  (<= in7 2147483646)\n  (= in 2147483647)\n))"
    },
    "16": {
      "constants": "(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >  in1 in0)  ( >  in2 in0))  ( >  in2 in1))  ( >  in3 in0))  ( >  in3 in1))  ( >  in3 in2))  ( >  in4 in0))  ( >  in4 in1))  ( >  in4 in2))  ( >  in4 in3))  ( >  in5 in0))  ( >  in5 in1))  ( >  in5 in2))  ( >  in5 in3))  ( >  in5 in4))  ( >  in6 in0))  ( >  in6 in1))  ( >  in6 in2))  ( >  in6 in3))  ( >  in6 in4))  ( >  in6 in5))  ( >  in7 in0))  ( >  in7 in1))  ( >  in7 in2))  ( >  in7 in3))  ( >  in7 in4))  ( >  in7 in5))  ( >  in7 in6))  ( >  in8 in0))  ( >  in8 in1))  ( >  in8 in2))  ( >  in8 in3))  ( >  in8 in4))  ( >  in8 in5))  ( >  in8 in6))  ( >  in8 in7))  ( >  in9 in0))  ( >  in9 in1))  ( >  in9 in2))  ( >  in9 in3))  ( >  in9 in4))  ( >  in9 in5))  ( >  in9 in6))  ( >  in9 in7))  ( >  in9 in8))  ( >  in10 in0))  ( >  in10 in1))  ( >  in10 in2))  ( >  in10 in3))  ( >  in10 in4))  ( >  in10 in5))  ( >  in10 in6))  ( >  in10 in7))  ( >  in10 in8))  ( >  in10 in9))  ( >  in11 in0))  ( >  in11 in1))  ( >  in11 in2))  ( >  in11 in3))  ( >  in11 in4))  ( >  in11 in5))  ( >  in11 in6))  ( >  in11 in7))  ( >  in11 in8))  ( >  in11 in9))  ( >  in11 in10))  ( >  in12 in0))  ( >  in12 in1))  ( >  in12 in2))  ( >  in12 in3))  ( >  in12 in4))  ( >  in12 in5))  ( >  in12 in6))  ( >  in12 in7))  ( >  in12 in8))  ( >  in12 in9))  ( >  in12 in10))  ( >  in12 in11))  ( >  in13 in0))  ( >  in13 in1))  ( >  in13 in2))  ( >  in13 in3))  ( >  in13 in4))  ( >  in13 in5))  ( >  in13 in6))  ( >  in13 in7))  ( >  in13 in8))  ( >  in13 in9))  ( >  in13 in10))  ( >  in13 in11))  ( >  in13 in12))  ( >  in14 in0))  ( >  in14 in1))  ( >  in14 in2))  ( >  in14 in3))  ( >  in14 in4))  ( >  in14 in5))  ( >  in14 in6))  ( >  in14 in7))  ( >  in14 in8))  ( >  in14 in9))  ( >  in14 in10))  ( >  in14 in11))  ( >  in14 in12))  ( >  in14 in13))  ( >  in15 in0))  ( >  in15 in1))  ( >  in15 in2))  ( >  in15 in3))  ( >  in15 in4))  ( >  in15 in5))  ( >  in15 in6))  ( >  in15 in7))  ( >  in15 in8))  ( >  in15 in9))  ( >  in15 in10))  ( >  in15 in11))  ( >  in15 in12))  ( >  in15 in13))  ( >  in15 in14))  ( >  in in0))  ( >  in in1))  ( >  in in2))  ( >  in in3))  ( >  in in4))  ( >  in in5))  ( >  in in6))  ( >  in in7))  ( >  in in8))  ( >  in in9))  ( >  in in10))  ( >  in in11))  ( >  in in12))  ( >  in in13))  ( >  in in14))  ( >  in in15)))",
      "response": "- Worst-case time complexity:\n  - For the measured region (the final insert only): \u0398(n), because the inserted value may traverse all n existing list nodes before the sentinel.\n  - For the entire program execution (building the list with n inserts plus the final insert): \u0398(n^2) overall (sum of 1..n for the first n inserts) plus \u0398(n) for the last insert, i.e., \u0398(n^2).\n\n- SMT2 constraint for n = 16 to force the worst-case path in the final insert (make the last input greater than every previously inserted value):\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in () Int)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(assert (> in in0))\n(assert (> in in1))\n(assert (> in in2))\n(assert (> in in3))\n(assert (> in in4))\n(assert (> in in5))\n(assert (> in in6))\n(assert (> in in7))\n(assert (> in in8))\n(assert (> in in9))\n(assert (> in in10))\n(assert (> in in11))\n(assert (> in in12))\n(assert (> in in13))\n(assert (> in in14))\n(assert (> in in15))\n(check-sat)\n(get-model)"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >  in1 in0)  ( >  in2 in0))  ( >  in2 in1))  ( >  in3 in0))  ( >  in3 in1))  ( >  in3 in2))  ( >  in4 in0))  ( >  in4 in1))  ( >  in4 in2))  ( >  in4 in3))  ( >  in5 in0))  ( >  in5 in1))  ( >  in5 in2))  ( >  in5 in3))  ( >  in5 in4))  ( >  in6 in0))  ( >  in6 in1))  ( >  in6 in2))  ( >  in6 in3))  ( >  in6 in4))  ( >  in6 in5))  ( >  in7 in0))  ( >  in7 in1))  ( >  in7 in2))  ( >  in7 in3))  ( >  in7 in4))  ( >  in7 in5))  ( >  in7 in6))  ( >  in8 in0))  ( >  in8 in1))  ( >  in8 in2))  ( >  in8 in3))  ( >  in8 in4))  ( >  in8 in5))  ( >  in8 in6))  ( >  in8 in7))  ( >  in9 in0))  ( >  in9 in1))  ( >  in9 in2))  ( >  in9 in3))  ( >  in9 in4))  ( >  in9 in5))  ( >  in9 in6))  ( >  in9 in7))  ( >  in9 in8))  ( >  in10 in0))  ( >  in10 in1))  ( >  in10 in2))  ( >  in10 in3))  ( >  in10 in4))  ( >  in10 in5))  ( >  in10 in6))  ( >  in10 in7))  ( >  in10 in8))  ( >  in10 in9))  ( >  in11 in0))  ( >  in11 in1))  ( >  in11 in2))  ( >  in11 in3))  ( >  in11 in4))  ( >  in11 in5))  ( >  in11 in6))  ( >  in11 in7))  ( >  in11 in8))  ( >  in11 in9))  ( >  in11 in10))  ( >  in12 in0))  ( >  in12 in1))  ( >  in12 in2))  ( >  in12 in3))  ( >  in12 in4))  ( >  in12 in5))  ( >  in12 in6))  ( >  in12 in7))  ( >  in12 in8))  ( >  in12 in9))  ( >  in12 in10))  ( >  in12 in11))  ( >  in13 in0))  ( >  in13 in1))  ( >  in13 in2))  ( >  in13 in3))  ( >  in13 in4))  ( >  in13 in5))  ( >  in13 in6))  ( >  in13 in7))  ( >  in13 in8))  ( >  in13 in9))  ( >  in13 in10))  ( >  in13 in11))  ( >  in13 in12))  ( >  in14 in0))  ( >  in14 in1))  ( >  in14 in2))  ( >  in14 in3))  ( >  in14 in4))  ( >  in14 in5))  ( >  in14 in6))  ( >  in14 in7))  ( >  in14 in8))  ( >  in14 in9))  ( >  in14 in10))  ( >  in14 in11))  ( >  in14 in12))  ( >  in14 in13))  ( >  in15 in0))  ( >  in15 in1))  ( >  in15 in2))  ( >  in15 in3))  ( >  in15 in4))  ( >  in15 in5))  ( >  in15 in6))  ( >  in15 in7))  ( >  in15 in8))  ( >  in15 in9))  ( >  in15 in10))  ( >  in15 in11))  ( >  in15 in12))  ( >  in15 in13))  ( >  in15 in14))  ( >  in16 in0))  ( >  in16 in1))  ( >  in16 in2))  ( >  in16 in3))  ( >  in16 in4))  ( >  in16 in5))  ( >  in16 in6))  ( >  in16 in7))  ( >  in16 in8))  ( >  in16 in9))  ( >  in16 in10))  ( >  in16 in11))  ( >  in16 in12))  ( >  in16 in13))  ( >  in16 in14))  ( >  in16 in15))  ( >  in17 in0))  ( >  in17 in1))  ( >  in17 in2))  ( >  in17 in3))  ( >  in17 in4))  ( >  in17 in5))  ( >  in17 in6))  ( >  in17 in7))  ( >  in17 in8))  ( >  in17 in9))  ( >  in17 in10))  ( >  in17 in11))  ( >  in17 in12))  ( >  in17 in13))  ( >  in17 in14))  ( >  in17 in15))  ( >  in17 in16))  ( >  in18 in0))  ( >  in18 in1))  ( >  in18 in2))  ( >  in18 in3))  ( >  in18 in4))  ( >  in18 in5))  ( >  in18 in6))  ( >  in18 in7))  ( >  in18 in8))  ( >  in18 in9))  ( >  in18 in10))  ( >  in18 in11))  ( >  in18 in12))  ( >  in18 in13))  ( >  in18 in14))  ( >  in18 in15))  ( >  in18 in16))  ( >  in18 in17))  ( >  in19 in0))  ( >  in19 in1))  ( >  in19 in2))  ( >  in19 in3))  ( >  in19 in4))  ( >  in19 in5))  ( >  in19 in6))  ( >  in19 in7))  ( >  in19 in8))  ( >  in19 in9))  ( >  in19 in10))  ( >  in19 in11))  ( >  in19 in12))  ( >  in19 in13))  ( >  in19 in14))  ( >  in19 in15))  ( >  in19 in16))  ( >  in19 in17))  ( >  in19 in18))  ( >  in20 in0))  ( >  in20 in1))  ( >  in20 in2))  ( >  in20 in3))  ( >  in20 in4))  ( >  in20 in5))  ( >  in20 in6))  ( >  in20 in7))  ( >  in20 in8))  ( >  in20 in9))  ( >  in20 in10))  ( >  in20 in11))  ( >  in20 in12))  ( >  in20 in13))  ( >  in20 in14))  ( >  in20 in15))  ( >  in20 in16))  ( >  in20 in17))  ( >  in20 in18))  ( >  in20 in19))  ( >  in21 in0))  ( >  in21 in1))  ( >  in21 in2))  ( >  in21 in3))  ( >  in21 in4))  ( >  in21 in5))  ( >  in21 in6))  ( >  in21 in7))  ( >  in21 in8))  ( >  in21 in9))  ( >  in21 in10))  ( >  in21 in11))  ( >  in21 in12))  ( >  in21 in13))  ( >  in21 in14))  ( >  in21 in15))  ( >  in21 in16))  ( >  in21 in17))  ( >  in21 in18))  ( >  in21 in19))  ( >  in21 in20))  ( >  in22 in0))  ( >  in22 in1))  ( >  in22 in2))  ( >  in22 in3))  ( >  in22 in4))  ( >  in22 in5))  ( >  in22 in6))  ( >  in22 in7))  ( >  in22 in8))  ( >  in22 in9))  ( >  in22 in10))  ( >  in22 in11))  ( >  in22 in12))  ( >  in22 in13))  ( >  in22 in14))  ( >  in22 in15))  ( >  in22 in16))  ( >  in22 in17))  ( >  in22 in18))  ( >  in22 in19))  ( >  in22 in20))  ( >  in22 in21))  ( >  in23 in0))  ( >  in23 in1))  ( >  in23 in2))  ( >  in23 in3))  ( >  in23 in4))  ( >  in23 in5))  ( >  in23 in6))  ( >  in23 in7))  ( >  in23 in8))  ( >  in23 in9))  ( >  in23 in10))  ( >  in23 in11))  ( >  in23 in12))  ( >  in23 in13))  ( >  in23 in14))  ( >  in23 in15))  ( >  in23 in16))  ( >  in23 in17))  ( >  in23 in18))  ( >  in23 in19))  ( >  in23 in20))  ( >  in23 in21))  ( >  in23 in22))  ( >  in24 in0))  ( >  in24 in1))  ( >  in24 in2))  ( >  in24 in3))  ( >  in24 in4))  ( >  in24 in5))  ( >  in24 in6))  ( >  in24 in7))  ( >  in24 in8))  ( >  in24 in9))  ( >  in24 in10))  ( >  in24 in11))  ( >  in24 in12))  ( >  in24 in13))  ( >  in24 in14))  ( >  in24 in15))  ( >  in24 in16))  ( >  in24 in17))  ( >  in24 in18))  ( >  in24 in19))  ( >  in24 in20))  ( >  in24 in21))  ( >  in24 in22))  ( >  in24 in23))  ( >  in25 in0))  ( >  in25 in1))  ( >  in25 in2))  ( >  in25 in3))  ( >  in25 in4))  ( >  in25 in5))  ( >  in25 in6))  ( >  in25 in7))  ( >  in25 in8))  ( >  in25 in9))  ( >  in25 in10))  ( >  in25 in11))  ( >  in25 in12))  ( >  in25 in13))  ( >  in25 in14))  ( >  in25 in15))  ( >  in25 in16))  ( >  in25 in17))  ( >  in25 in18))  ( >  in25 in19))  ( >  in25 in20))  ( >  in25 in21))  ( >  in25 in22))  ( >  in25 in23))  ( >  in25 in24))  ( >  in26 in0))  ( >  in26 in1))  ( >  in26 in2))  ( >  in26 in3))  ( >  in26 in4))  ( >  in26 in5))  ( >  in26 in6))  ( >  in26 in7))  ( >  in26 in8))  ( >  in26 in9))  ( >  in26 in10))  ( >  in26 in11))  ( >  in26 in12))  ( >  in26 in13))  ( >  in26 in14))  ( >  in26 in15))  ( >  in26 in16))  ( >  in26 in17))  ( >  in26 in18))  ( >  in26 in19))  ( >  in26 in20))  ( >  in26 in21))  ( >  in26 in22))  ( >  in26 in23))  ( >  in26 in24))  ( >  in26 in25))  ( >  in27 in0))  ( >  in27 in1))  ( >  in27 in2))  ( >  in27 in3))  ( >  in27 in4))  ( >  in27 in5))  ( >  in27 in6))  ( >  in27 in7))  ( >  in27 in8))  ( >  in27 in9))  ( >  in27 in10))  ( >  in27 in11))  ( >  in27 in12))  ( >  in27 in13))  ( >  in27 in14))  ( >  in27 in15))  ( >  in27 in16))  ( >  in27 in17))  ( >  in27 in18))  ( >  in27 in19))  ( >  in27 in20))  ( >  in27 in21))  ( >  in27 in22))  ( >  in27 in23))  ( >  in27 in24))  ( >  in27 in25))  ( >  in27 in26))  ( >  in28 in0))  ( >  in28 in1))  ( >  in28 in2))  ( >  in28 in3))  ( >  in28 in4))  ( >  in28 in5))  ( >  in28 in6))  ( >  in28 in7))  ( >  in28 in8))  ( >  in28 in9))  ( >  in28 in10))  ( >  in28 in11))  ( >  in28 in12))  ( >  in28 in13))  ( >  in28 in14))  ( >  in28 in15))  ( >  in28 in16))  ( >  in28 in17))  ( >  in28 in18))  ( >  in28 in19))  ( >  in28 in20))  ( >  in28 in21))  ( >  in28 in22))  ( >  in28 in23))  ( >  in28 in24))  ( >  in28 in25))  ( >  in28 in26))  ( >  in28 in27))  ( >  in29 in0))  ( >  in29 in1))  ( >  in29 in2))  ( >  in29 in3))  ( >  in29 in4))  ( >  in29 in5))  ( >  in29 in6))  ( >  in29 in7))  ( >  in29 in8))  ( >  in29 in9))  ( >  in29 in10))  ( >  in29 in11))  ( >  in29 in12))  ( >  in29 in13))  ( >  in29 in14))  ( >  in29 in15))  ( >  in29 in16))  ( >  in29 in17))  ( >  in29 in18))  ( >  in29 in19))  ( >  in29 in20))  ( >  in29 in21))  ( >  in29 in22))  ( >  in29 in23))  ( >  in29 in24))  ( >  in29 in25))  ( >  in29 in26))  ( >  in29 in27))  ( >  in29 in28))  ( >  in in0))  ( >  in in1))  ( >  in in2))  ( >  in in3))  ( >  in in4))  ( >  in in5))  ( >  in in6))  ( >  in in7))  ( >  in in8))  ( >  in in9))  ( >  in in10))  ( >  in in11))  ( >  in in12))  ( >  in in13))  ( >  in in14))  ( >  in in15))  ( >  in in16))  ( >  in in17))  ( >  in in18))  ( >  in in19))  ( >  in in20))  ( >  in in21))  ( >  in in22))  ( >  in in23))  ( >  in in24))  ( >  in in25))  ( >  in in26))  ( >  in in27))  ( >  in in28))  ( >  in in29)))",
      "response": "- Worst-case time complexity:\n  - For the final insert (as indicated by the comment in the code), the worst-case time complexity is O(N), where N is the number of elements already in the list (i.e., the value of args[0]). This worst case occurs when the element being inserted is greater than every element currently in the list, so the code traverses all N nodes before inserting just before the sentinel.\n  - If you consider the entire program including the N prior insertions, the total cost is O(N^2) for building the list plus O(N) for the final insert, i.e., O(N^2) overall. But per the code comment, the measured complexity is for the final insert only: O(N).\n\n- Worst-case SMT2 constraint for input size n = 30:\n  - Let the N = 30 inputs used to build the list be in0, in1, ..., in29, and the final input be in. The worst-case for the final insert is enforced by constraining in to be strictly greater than every previous input (so it traverses the whole list).\n  - Below is an SMT2 script using linear integer arithmetic and bounding the variables to 32-bit Java int range.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in () Int)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n(declare-fun in18 () Int)\n(declare-fun in19 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in22 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n(declare-fun in28 () Int)\n(declare-fun in29 () Int)\n\n; Java 32-bit int bounds\n(assert (and (<= (- 2147483648) in) (<= in 2147483647)))\n(assert (and (<= (- 2147483648) in0) (<= in0 2147483647)))\n(assert (and (<= (- 2147483648) in1) (<= in1 2147483647)))\n(assert (and (<= (- 2147483648) in2) (<= in2 2147483647)))\n(assert (and (<= (- 2147483648) in3) (<= in3 2147483647)))\n(assert (and (<= (- 2147483648) in4) (<= in4 2147483647)))\n(assert (and (<= (- 2147483648) in5) (<= in5 2147483647)))\n(assert (and (<= (- 2147483648) in6) (<= in6 2147483647)))\n(assert (and (<= (- 2147483648) in7) (<= in7 2147483647)))\n(assert (and (<= (- 2147483648) in8) (<= in8 2147483647)))\n(assert (and (<= (- 2147483648) in9) (<= in9 2147483647)))\n(assert (and (<= (- 2147483648) in10) (<= in10 2147483647)))\n(assert (and (<= (- 2147483648) in11) (<= in11 2147483647)))\n(assert (and (<= (- 2147483648) in12) (<= in12 2147483647)))\n(assert (and (<= (- 2147483648) in13) (<= in13 2147483647)))\n(assert (and (<= (- 2147483648) in14) (<= in14 2147483647)))\n(assert (and (<= (- 2147483648) in15) (<= in15 2147483647)))\n(assert (and (<= (- 2147483648) in16) (<= in16 2147483647)))\n(assert (and (<= (- 2147483648) in17) (<= in17 2147483647)))\n(assert (and (<= (- 2147483648) in18) (<= in18 2147483647)))\n(assert (and (<= (- 2147483648) in19) (<= in19 2147483647)))\n(assert (and (<= (- 2147483648) in20) (<= in20 2147483647)))\n(assert (and (<= (- 2147483648) in21) (<= in21 2147483647)))\n(assert (and (<= (- 2147483648) in22) (<= in22 2147483647)))\n(assert (and (<= (- 2147483648) in23) (<= in23 2147483647)))\n(assert (and (<= (- 2147483648) in24) (<= in24 2147483647)))\n(assert (and (<= (- 2147483648) in25) (<= in25 2147483647)))\n(assert (and (<= (- 2147483648) in26) (<= in26 2147483647)))\n(assert (and (<= (- 2147483648) in27) (<= in27 2147483647)))\n(assert (and (<= (- 2147483648) in28) (<= in28 2147483647)))\n(assert (and (<= (- 2147483648) in29) (<= in29 2147483647)))\n\n; Worst-case: final input greater than all prior inputs\n(assert (> in in0))\n(assert (> in in1))\n(assert (> in in2))\n(assert (> in in3))\n(assert (> in in4))\n(assert (> in in5))\n(assert (> in in6))\n(assert (> in in7))\n(assert (> in in8))\n(assert (> in in9))\n(assert (> in in10))\n(assert (> in in11))\n(assert (> in in12))\n(assert (> in in13))\n(assert (> in in14))\n(assert (> in in15))\n(assert (> in in16))\n(assert (> in in17))\n(assert (> in in18))\n(assert (> in in19))\n(assert (> in in20))\n(assert (> in in21))\n(assert (> in in22))\n(assert (> in in23))\n(assert (> in in24))\n(assert (> in in25))\n(assert (> in in26))\n(assert (> in in27))\n(assert (> in in28))\n(assert (> in in29))\n\n(check-sat)\n(get-model)"
    }
  },
  "CaseFlipper": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\n\npublic class CaseFlipper {\n    public static int flipCount(char[] chars) {\n        int flips = 0;\n        for (char c : chars) {\n            if (c >= 'a' && c <= 'z') {\n                flips++;\n            } else if (c >= 'A' && c <= 'Z') {\n                flips++;\n            }\n        }\n        return flips;\n    }\n\n    public static void main(String[] args) {\n        int N = Integer.parseInt(args[0]);\n        char[] input = new char[N];\n        for (int i = 0; i < N; i++) {\n            input[i] = Debug.makeSymbolicChar(\"ch\" + i);\n        }\n        flipCount(input);\n    }\n}\n",
    "2": {
      "constants": "(declare-const ch0 Int)\n(declare-const ch1 Int)",
      "assertions": "(assert (and (and (and (and (and  ( <  ch0 97)  ( >=  ch0 65))  ( <=  ch0 90))  ( <  ch1 97))  ( >=  ch1 65))  ( <=  ch1 90)))",
      "response": "- Worst-case time complexity: Theta(N) time, where N is the length of the input array. The program performs two linear passes: one to create N symbolic chars and one to scan them in flipCount, so overall linear time. Space is Theta(N) for the char array.\n\nAnswer:\n(set-logic QF_BV)\n; n = 2 (input size)\n(declare-const n (_ BitVec 32))\n(assert (= n #x00000002))\n\n; symbolic characters\n(declare-const ch0 (_ BitVec 16))\n(declare-const ch1 (_ BitVec 16))\n\n; a character is a letter if it is in ['a','z'] or ['A','Z']\n(define-fun isLetter ((c (_ BitVec 16))) Bool\n  (or (and (bvuge c #x0061) (bvule c #x007a))  ; 'a'..'z'\n      (and (bvuge c #x0041) (bvule c #x005a)))) ; 'A'..'Z'\n\n(assert (isLetter ch0))\n(assert (isLetter ch1))"
    },
    "4": {
      "constants": "(declare-const ch0 Int)\n(declare-const ch2 Int)\n(declare-const ch1 Int)\n(declare-const ch3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  ch0 97)  ( >=  ch0 65))  ( <=  ch0 90))  ( <  ch1 97))  ( >=  ch1 65))  ( <=  ch1 90))  ( <  ch2 97))  ( >=  ch2 65))  ( <=  ch2 90))  ( <  ch3 97))  ( >=  ch3 65))  ( <=  ch3 90)))",
      "response": "- Worst-case time complexity (concrete execution): O(N). The loop and the creation of N symbolic chars are both linear in N.\n- If you consider symbolic execution with JPF-symbc, the worst-case number of explored paths grows as 3^N (lowercase, uppercase, or other for each character).\n\nAnswer:\n(set-logic QF_LIA)\n; Java char is 16-bit unsigned, model as 0..65535\n(declare-fun ch0 () Int)\n(declare-fun ch1 () Int)\n(declare-fun ch2 () Int)\n(declare-fun ch3 () Int)\n\n(assert (and (>= ch0 0) (<= ch0 65535)))\n(assert (and (>= ch1 0) (<= ch1 65535)))\n(assert (and (>= ch2 0) (<= ch2 65535)))\n(assert (and (>= ch3 0) (<= ch3 65535)))\n\n; Worst-case branch behavior (each iteration takes either the if or the else-if):\n; each character is an ASCII letter: 'a'..'z' (97..122) or 'A'..'Z' (65..90)\n(assert (or (and (>= ch0 97) (<= ch0 122)) (and (>= ch0 65) (<= ch0 90))))\n(assert (or (and (>= ch1 97) (<= ch1 122)) (and (>= ch1 65) (<= ch1 90))))\n(assert (or (and (>= ch2 97) (<= ch2 122)) (and (>= ch2 65) (<= ch2 90))))\n(assert (or (and (>= ch3 97) (<= ch3 122)) (and (>= ch3 65) (<= ch3 90))))\n\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const ch6 Int)\n(declare-const ch5 Int)\n(declare-const ch7 Int)\n(declare-const ch0 Int)\n(declare-const ch2 Int)\n(declare-const ch1 Int)\n(declare-const ch4 Int)\n(declare-const ch3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  ch0 97)  ( >=  ch0 65))  ( <=  ch0 90))  ( <  ch1 97))  ( >=  ch1 65))  ( <=  ch1 90))  ( <  ch2 97))  ( >=  ch2 65))  ( <=  ch2 90))  ( <  ch3 97))  ( >=  ch3 65))  ( <=  ch3 90))  ( <  ch4 97))  ( >=  ch4 65))  ( <=  ch4 90))  ( <  ch5 97))  ( >=  ch5 65))  ( <=  ch5 90))  ( <  ch6 97))  ( >=  ch6 65))  ( <=  ch6 90))  ( <  ch7 97))  ( >=  ch7 65))  ( <=  ch7 90)))",
      "response": "- Worst-case time complexity: O(N). The program executes two linear passes of length N (creating N symbolic chars and then scanning them once in flipCount). Each iteration does a constant amount of work, so total time is linear in N.\n\n- SMT2 constraint for input size n = 8 that forces the worst per-iteration work (both sides of both short-circuited conditions are evaluated): choose each character > 'z' (0x007A). This makes (c >= 'a') true and (c <= 'z') false, so the else-if is evaluated, where (c >= 'A') is true and (c <= 'Z') is false.\n\nAnswer:\n(set-logic QF_BV)\n(declare-fun ch0 () (_ BitVec 16))\n(declare-fun ch1 () (_ BitVec 16))\n(declare-fun ch2 () (_ BitVec 16))\n(declare-fun ch3 () (_ BitVec 16))\n(declare-fun ch4 () (_ BitVec 16))\n(declare-fun ch5 () (_ BitVec 16))\n(declare-fun ch6 () (_ BitVec 16))\n(declare-fun ch7 () (_ BitVec 16))\n(assert (bvugt ch0 #x007A))\n(assert (bvugt ch1 #x007A))\n(assert (bvugt ch2 #x007A))\n(assert (bvugt ch3 #x007A))\n(assert (bvugt ch4 #x007A))\n(assert (bvugt ch5 #x007A))\n(assert (bvugt ch6 #x007A))\n(assert (bvugt ch7 #x007A))\n(check-sat)\n(get-model)"
    },
    "30": {
      "constants": "(declare-const ch29 Int)\n(declare-const ch27 Int)\n(declare-const ch28 Int)\n(declare-const ch25 Int)\n(declare-const ch26 Int)\n(declare-const ch23 Int)\n(declare-const ch24 Int)\n(declare-const ch21 Int)\n(declare-const ch22 Int)\n(declare-const ch20 Int)\n(declare-const ch18 Int)\n(declare-const ch19 Int)\n(declare-const ch16 Int)\n(declare-const ch17 Int)\n(declare-const ch14 Int)\n(declare-const ch15 Int)\n(declare-const ch12 Int)\n(declare-const ch13 Int)\n(declare-const ch10 Int)\n(declare-const ch0 Int)\n(declare-const ch11 Int)\n(declare-const ch2 Int)\n(declare-const ch1 Int)\n(declare-const ch4 Int)\n(declare-const ch3 Int)\n(declare-const ch6 Int)\n(declare-const ch5 Int)\n(declare-const ch8 Int)\n(declare-const ch7 Int)\n(declare-const ch9 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  ch0 97)  ( >=  ch0 65))  ( <=  ch0 90))  ( <  ch1 97))  ( >=  ch1 65))  ( <=  ch1 90))  ( <  ch2 97))  ( >=  ch2 65))  ( <=  ch2 90))  ( <  ch3 97))  ( >=  ch3 65))  ( <=  ch3 90))  ( <  ch4 97))  ( >=  ch4 65))  ( <=  ch4 90))  ( <  ch5 97))  ( >=  ch5 65))  ( <=  ch5 90))  ( <  ch6 97))  ( >=  ch6 65))  ( <=  ch6 90))  ( <  ch7 97))  ( >=  ch7 65))  ( <=  ch7 90))  ( <  ch8 97))  ( >=  ch8 65))  ( <=  ch8 90))  ( <  ch9 97))  ( >=  ch9 65))  ( <=  ch9 90))  ( <  ch10 97))  ( >=  ch10 65))  ( <=  ch10 90))  ( <  ch11 97))  ( >=  ch11 65))  ( <=  ch11 90))  ( <  ch12 97))  ( >=  ch12 65))  ( <=  ch12 90))  ( <  ch13 97))  ( >=  ch13 65))  ( <=  ch13 90))  ( <  ch14 97))  ( >=  ch14 65))  ( <=  ch14 90))  ( <  ch15 97))  ( >=  ch15 65))  ( <=  ch15 90))  ( <  ch16 97))  ( >=  ch16 65))  ( <=  ch16 90))  ( <  ch17 97))  ( >=  ch17 65))  ( <=  ch17 90))  ( <  ch18 97))  ( >=  ch18 65))  ( <=  ch18 90))  ( <  ch19 97))  ( >=  ch19 65))  ( <=  ch19 90))  ( <  ch20 97))  ( >=  ch20 65))  ( <=  ch20 90))  ( <  ch21 97))  ( >=  ch21 65))  ( <=  ch21 90))  ( <  ch22 97))  ( >=  ch22 65))  ( <=  ch22 90))  ( <  ch23 97))  ( >=  ch23 65))  ( <=  ch23 90))  ( <  ch24 97))  ( >=  ch24 65))  ( <=  ch24 90))  ( <  ch25 97))  ( >=  ch25 65))  ( <=  ch25 90))  ( <  ch26 97))  ( >=  ch26 65))  ( <=  ch26 90))  ( <  ch27 97))  ( >=  ch27 65))  ( <=  ch27 90))  ( <  ch28 97))  ( >=  ch28 65))  ( <=  ch28 90))  ( <  ch29 97))  ( >=  ch29 65))  ( <=  ch29 90)))",
      "response": "- Worst-case time complexity: O(N), where N is the length of the input array. The loop in main creates N symbolic characters (O(N)), and flipCount processes the array once (O(N)).\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun ch0 () Int)\n(declare-fun ch1 () Int)\n(declare-fun ch2 () Int)\n(declare-fun ch3 () Int)\n(declare-fun ch4 () Int)\n(declare-fun ch5 () Int)\n(declare-fun ch6 () Int)\n(declare-fun ch7 () Int)\n(declare-fun ch8 () Int)\n(declare-fun ch9 () Int)\n(declare-fun ch10 () Int)\n(declare-fun ch11 () Int)\n(declare-fun ch12 () Int)\n(declare-fun ch13 () Int)\n(declare-fun ch14 () Int)\n(declare-fun ch15 () Int)\n(declare-fun ch16 () Int)\n(declare-fun ch17 () Int)\n(declare-fun ch18 () Int)\n(declare-fun ch19 () Int)\n(declare-fun ch20 () Int)\n(declare-fun ch21 () Int)\n(declare-fun ch22 () Int)\n(declare-fun ch23 () Int)\n(declare-fun ch24 () Int)\n(declare-fun ch25 () Int)\n(declare-fun ch26 () Int)\n(declare-fun ch27 () Int)\n(declare-fun ch28 () Int)\n(declare-fun ch29 () Int)\n(assert (or (and (>= ch0 65) (<= ch0 90)) (and (>= ch0 97) (<= ch0 122))))\n(assert (or (and (>= ch1 65) (<= ch1 90)) (and (>= ch1 97) (<= ch1 122))))\n(assert (or (and (>= ch2 65) (<= ch2 90)) (and (>= ch2 97) (<= ch2 122))))\n(assert (or (and (>= ch3 65) (<= ch3 90)) (and (>= ch3 97) (<= ch3 122))))\n(assert (or (and (>= ch4 65) (<= ch4 90)) (and (>= ch4 97) (<= ch4 122))))\n(assert (or (and (>= ch5 65) (<= ch5 90)) (and (>= ch5 97) (<= ch5 122))))\n(assert (or (and (>= ch6 65) (<= ch6 90)) (and (>= ch6 97) (<= ch6 122))))\n(assert (or (and (>= ch7 65) (<= ch7 90)) (and (>= ch7 97) (<= ch7 122))))\n(assert (or (and (>= ch8 65) (<= ch8 90)) (and (>= ch8 97) (<= ch8 122))))\n(assert (or (and (>= ch9 65) (<= ch9 90)) (and (>= ch9 97) (<= ch9 122))))\n(assert (or (and (>= ch10 65) (<= ch10 90)) (and (>= ch10 97) (<= ch10 122))))\n(assert (or (and (>= ch11 65) (<= ch11 90)) (and (>= ch11 97) (<= ch11 122))))\n(assert (or (and (>= ch12 65) (<= ch12 90)) (and (>= ch12 97) (<= ch12 122))))\n(assert (or (and (>= ch13 65) (<= ch13 90)) (and (>= ch13 97) (<= ch13 122))))\n(assert (or (and (>= ch14 65) (<= ch14 90)) (and (>= ch14 97) (<= ch14 122))))\n(assert (or (and (>= ch15 65) (<= ch15 90)) (and (>= ch15 97) (<= ch15 122))))\n(assert (or (and (>= ch16 65) (<= ch16 90)) (and (>= ch16 97) (<= ch16 122))))\n(assert (or (and (>= ch17 65) (<= ch17 90)) (and (>= ch17 97) (<= ch17 122))))\n(assert (or (and (>= ch18 65) (<= ch18 90)) (and (>= ch18 97) (<= ch18 122))))\n(assert (or (and (>= ch19 65) (<= ch19 90)) (and (>= ch19 97) (<= ch19 122))))\n(assert (or (and (>= ch20 65) (<= ch20 90)) (and (>= ch20 97) (<= ch20 122))))\n(assert (or (and (>= ch21 65) (<= ch21 90)) (and (>= ch21 97) (<= ch21 122))))\n(assert (or (and (>= ch22 65) (<= ch22 90)) (and (>= ch22 97) (<= ch22 122))))\n(assert (or (and (>= ch23 65) (<= ch23 90)) (and (>= ch23 97) (<= ch23 122))))\n(assert (or (and (>= ch24 65) (<= ch24 90)) (and (>= ch24 97) (<= ch24 122))))\n(assert (or (and (>= ch25 65) (<= ch25 90)) (and (>= ch25 97) (<= ch25 122))))\n(assert (or (and (>= ch26 65) (<= ch26 90)) (and (>= ch26 97) (<= ch26 122))))\n(assert (or (and (>= ch27 65) (<= ch27 90)) (and (>= ch27 97) (<= ch27 122))))\n(assert (or (and (>= ch28 65) (<= ch28 90)) (and (>= ch28 97) (<= ch28 122))))\n(assert (or (and (>= ch29 65) (<= ch29 90)) (and (>= ch29 97) (<= ch29 122))))"
    },
    "16": {
      "constants": "(declare-const ch14 Int)\n(declare-const ch15 Int)\n(declare-const ch12 Int)\n(declare-const ch13 Int)\n(declare-const ch10 Int)\n(declare-const ch0 Int)\n(declare-const ch11 Int)\n(declare-const ch2 Int)\n(declare-const ch1 Int)\n(declare-const ch4 Int)\n(declare-const ch3 Int)\n(declare-const ch6 Int)\n(declare-const ch5 Int)\n(declare-const ch8 Int)\n(declare-const ch7 Int)\n(declare-const ch9 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  ch0 97)  ( >=  ch0 65))  ( <=  ch0 90))  ( <  ch1 97))  ( >=  ch1 65))  ( <=  ch1 90))  ( <  ch2 97))  ( >=  ch2 65))  ( <=  ch2 90))  ( <  ch3 97))  ( >=  ch3 65))  ( <=  ch3 90))  ( <  ch4 97))  ( >=  ch4 65))  ( <=  ch4 90))  ( <  ch5 97))  ( >=  ch5 65))  ( <=  ch5 90))  ( <  ch6 97))  ( >=  ch6 65))  ( <=  ch6 90))  ( <  ch7 97))  ( >=  ch7 65))  ( <=  ch7 90))  ( <  ch8 97))  ( >=  ch8 65))  ( <=  ch8 90))  ( <  ch9 97))  ( >=  ch9 65))  ( <=  ch9 90))  ( <  ch10 97))  ( >=  ch10 65))  ( <=  ch10 90))  ( <  ch11 97))  ( >=  ch11 65))  ( <=  ch11 90))  ( <  ch12 97))  ( >=  ch12 65))  ( <=  ch12 90))  ( <  ch13 97))  ( >=  ch13 65))  ( <=  ch13 90))  ( <  ch14 97))  ( >=  ch14 65))  ( <=  ch14 90))  ( <  ch15 97))  ( >=  ch15 65))  ( <=  ch15 90)))",
      "response": "- Worst-case time complexity: O(n), where n is the length of the input char array. The loop processes each character once and performs a constant amount of work per character.\n\nAnswer:\n(set-logic QF_LIA)\n; 16 symbolic Java char inputs ch0..ch15, modeled as Ints in [0,65535]\n(declare-fun ch0 () Int)\n(declare-fun ch1 () Int)\n(declare-fun ch2 () Int)\n(declare-fun ch3 () Int)\n(declare-fun ch4 () Int)\n(declare-fun ch5 () Int)\n(declare-fun ch6 () Int)\n(declare-fun ch7 () Int)\n(declare-fun ch8 () Int)\n(declare-fun ch9 () Int)\n(declare-fun ch10 () Int)\n(declare-fun ch11 () Int)\n(declare-fun ch12 () Int)\n(declare-fun ch13 () Int)\n(declare-fun ch14 () Int)\n(declare-fun ch15 () Int)\n\n; Worst-case per-iteration condition evaluation (forces both conjuncts in both tests to be evaluated):\n; For each i, pick ch_i > 'z' (122). Also constrain to Java char range [0,65535].\n(assert (and (<= 0 ch0) (<= ch0 65535) (>= ch0 97) (not (<= ch0 122)) (>= ch0 65) (not (<= ch0 90))))\n(assert (and (<= 0 ch1) (<= ch1 65535) (>= ch1 97) (not (<= ch1 122)) (>= ch1 65) (not (<= ch1 90))))\n(assert (and (<= 0 ch2) (<= ch2 65535) (>= ch2 97) (not (<= ch2 122)) (>= ch2 65) (not (<= ch2 90))))\n(assert (and (<= 0 ch3) (<= ch3 65535) (>= ch3 97) (not (<= ch3 122)) (>= ch3 65) (not (<= ch3 90))))\n(assert (and (<= 0 ch4) (<= ch4 65535) (>= ch4 97) (not (<= ch4 122)) (>= ch4 65) (not (<= ch4 90))))\n(assert (and (<= 0 ch5) (<= ch5 65535) (>= ch5 97) (not (<= ch5 122)) (>= ch5 65) (not (<= ch5 90))))\n(assert (and (<= 0 ch6) (<= ch6 65535) (>= ch6 97) (not (<= ch6 122)) (>= ch6 65) (not (<= ch6 90))))\n(assert (and (<= 0 ch7) (<= ch7 65535) (>= ch7 97) (not (<= ch7 122)) (>= ch7 65) (not (<= ch7 90))))\n(assert (and (<= 0 ch8) (<= ch8 65535) (>= ch8 97) (not (<= ch8 122)) (>= ch8 65) (not (<= ch8 90))))\n(assert (and (<= 0 ch9) (<= ch9 65535) (>= ch9 97) (not (<= ch9 122)) (>= ch9 65) (not (<= ch9 90))))\n(assert (and (<= 0 ch10) (<= ch10 65535) (>= ch10 97) (not (<= ch10 122)) (>= ch10 65) (not (<= ch10 90))))\n(assert (and (<= 0 ch11) (<= ch11 65535) (>= ch11 97) (not (<= ch11 122)) (>= ch11 65) (not (<= ch11 90))))\n(assert (and (<= 0 ch12) (<= ch12 65535) (>= ch12 97) (not (<= ch12 122)) (>= ch12 65) (not (<= ch12 90))))\n(assert (and (<= 0 ch13) (<= ch13 65535) (>= ch13 97) (not (<= ch13 122)) (>= ch13 65) (not (<= ch13 90))))\n(assert (and (<= 0 ch14) (<= ch14 65535) (>= ch14 97) (not (<= ch14 122)) (>= ch14 65) (not (<= ch14 90))))\n(assert (and (<= 0 ch15) (<= ch15 65535) (>= ch15 97) (not (<= ch15 122)) (>= ch15 65) (not (<= ch15 90))))\n\n(check-sat)"
    }
  },
  "Dijkstra": {
    "program": "/**\n * Copyright (c) 2011, Regents of the University of California\n * All rights reserved.\n * <p/>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <p/>\n * 1. Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * <p/>\n * 2. Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following\n * disclaimer in the documentation and/or other materials provided\n * with the distribution.\n * <p/>\n * 3. Neither the name of the University of California, Berkeley nor\n * the names of its contributors may be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n * <p/>\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\n//package edu.berkeley.cs.wise.benchmarks;\n\n//import edu.berkeley.cs.wise.concolic.Concolic;\n\n/**\n * @author jburnim@cs.berkeley.edu\n */\npublic class Dijkstra {\n\n    static final int INFINITY = Integer.MAX_VALUE;\n\n    static int[] runDijkstra(int N, int D[][], int src) {\n        // Initialize distances.\n        int dist[] = new int[N];\n        boolean fixed[] = new boolean[N];\n        for (int i = 0; i < N; i++) {  // V+1 branches\n            dist[i] = INFINITY;\n            fixed[i] = false;\n        }\n        dist[src] = 0;\n\n        for (int k = 0; k < N; k++) { // V+1 branches\n            // Find the minimum-distance, unfixed vertex.\n            int min = -1;\n            int minDist = INFINITY;\n            for (int i = 0; i < N; i++) { // V(V+1) branches\n                if (!fixed[i] && (dist[i] < minDist)) { // V^2 + V(V+1)/2\n                    min = i;\n                    minDist = dist[i];\n                }\n            }\n\n            // Fix the vertex.\n            fixed[min] = true;\n\n            // Process the vertex's outgoing edges.\n            for (int i = 0; i < N; i++) { // V(V+1) branches\n                // V^2 + V(V-1)/2 branches\n                if (!fixed[i] && (dist[min] + D[min][i] < dist[i])) {\n                    dist[i] = dist[min] + D[min][i];\n                }\n            }\n            \n        }\n\n        // Return the computed distances.\n        return dist;\n    }\n\n    public static void main(String[] args) {\n        final int V = Integer.parseInt(args[0]);\n\n        final int D[][] = new int[V][V];\n\n        for (int i = 0; i < V; i++) {\n            for (int j = 0; j < V; j++) {\n                if (i ==j) continue;\n                D[i][j] = Debug.makeSymbolicInteger(\"in\"+i+j);//Concolic.input.Integer(0, 1000);\n            }\n        }\n\n        // We only measure the complexity (i.e. path length) of the\n        // graph algorithm itself.  That is, we count branches only\n        // from this point forward in the execution.\n       // Concolic.ResetBranchCounting();\n\n        runDijkstra(V, D, 0);\n    }\n}\n",
    "16": {
      "constants": "(declare-const in128 Int)\n(declare-const in129 Int)\n(declare-const in126 Int)\n(declare-const in127 Int)\n(declare-const in121 Int)\n(declare-const in124 Int)\n(declare-const in21 Int)\n(declare-const in125 Int)\n(declare-const in122 Int)\n(declare-const in123 Int)\n(declare-const in117 Int)\n(declare-const in118 Int)\n(declare-const in115 Int)\n(declare-const in116 Int)\n(declare-const in119 Int)\n(declare-const in95 Int)\n(declare-const in94 Int)\n(declare-const in97 Int)\n(declare-const in96 Int)\n(declare-const in113 Int)\n(declare-const in98 Int)\n(declare-const in114 Int)\n(declare-const in111 Int)\n(declare-const in1311 Int)\n(declare-const in112 Int)\n(declare-const in1310 Int)\n(declare-const in1312 Int)\n(declare-const in106 Int)\n(declare-const in107 Int)\n(declare-const in104 Int)\n(declare-const in105 Int)\n(declare-const in108 Int)\n(declare-const in109 Int)\n(declare-const in42 Int)\n(declare-const in41 Int)\n(declare-const in102 Int)\n(declare-const in43 Int)\n(declare-const in103 Int)\n(declare-const in101 Int)\n(declare-const in31 Int)\n(declare-const in32 Int)\n(declare-const in1410 Int)\n(declare-const in1413 Int)\n(declare-const in1411 Int)\n(declare-const in1412 Int)\n(declare-const in71 Int)\n(declare-const in62 Int)\n(declare-const in61 Int)\n(declare-const in64 Int)\n(declare-const in63 Int)\n(declare-const in65 Int)\n(declare-const in159 Int)\n(declare-const in51 Int)\n(declare-const in153 Int)\n(declare-const in154 Int)\n(declare-const in53 Int)\n(declare-const in151 Int)\n(declare-const in52 Int)\n(declare-const in152 Int)\n(declare-const in157 Int)\n(declare-const in54 Int)\n(declare-const in1110 Int)\n(declare-const in158 Int)\n(declare-const in155 Int)\n(declare-const in156 Int)\n(declare-const in1512 Int)\n(declare-const in1513 Int)\n(declare-const in1510 Int)\n(declare-const in1511 Int)\n(declare-const in1514 Int)\n(declare-const in148 Int)\n(declare-const in149 Int)\n(declare-const in91 Int)\n(declare-const in93 Int)\n(declare-const in92 Int)\n(declare-const in84 Int)\n(declare-const in142 Int)\n(declare-const in83 Int)\n(declare-const in143 Int)\n(declare-const in86 Int)\n(declare-const in85 Int)\n(declare-const in141 Int)\n(declare-const in146 Int)\n(declare-const in87 Int)\n(declare-const in147 Int)\n(declare-const in144 Int)\n(declare-const in02 Int)\n(declare-const in145 Int)\n(declare-const in01 Int)\n(declare-const in04 Int)\n(declare-const in03 Int)\n(declare-const in06 Int)\n(declare-const in05 Int)\n(declare-const in08 Int)\n(declare-const in07 Int)\n(declare-const in09 Int)\n(declare-const in139 Int)\n(declare-const in137 Int)\n(declare-const in138 Int)\n(declare-const in82 Int)\n(declare-const in81 Int)\n(declare-const in73 Int)\n(declare-const in131 Int)\n(declare-const in010 Int)\n(declare-const in72 Int)\n(declare-const in132 Int)\n(declare-const in011 Int)\n(declare-const in75 Int)\n(declare-const in74 Int)\n(declare-const in1210 Int)\n(declare-const in135 Int)\n(declare-const in014 Int)\n(declare-const in76 Int)\n(declare-const in015 Int)\n(declare-const in136 Int)\n(declare-const in133 Int)\n(declare-const in012 Int)\n(declare-const in1211 Int)\n(declare-const in134 Int)\n(declare-const in013 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in02 in01)  ( <  in03 in02))  ( <  in04 in03))  ( <  in05 in04))  ( <  in06 in05))  ( <  in07 in06))  ( <  in08 in07))  ( <  in09 in08))  ( <  in010 in09))  ( <  in011 in010))  ( <  in012 in011))  ( <  in013 in012))  ( <  in014 in013))  ( <  in015 in014))  ( <  ( +  in151 in015) in01))  ( <  ( +  in152 in015) in02))  ( <  ( +  in153 in015) in03))  ( <  ( +  in154 in015) in04))  ( <  ( +  in155 in015) in05))  ( <  ( +  in156 in015) in06))  ( <  ( +  in157 in015) in07))  ( <  ( +  in158 in015) in08))  ( <  ( +  in159 in015) in09))  ( <  ( +  in1510 in015) in010))  ( <  ( +  in1511 in015) in011))  ( <  ( +  in1512 in015) in012))  ( <  ( +  in1513 in015) in013))  ( <  ( +  in1514 in015) in014))  ( <  ( +  in152 in015) ( +  in151 in015)))  ( <  ( +  in153 in015) ( +  in152 in015)))  ( <  ( +  in154 in015) ( +  in153 in015)))  ( <  ( +  in155 in015) ( +  in154 in015)))  ( <  ( +  in156 in015) ( +  in155 in015)))  ( <  ( +  in157 in015) ( +  in156 in015)))  ( <  ( +  in158 in015) ( +  in157 in015)))  ( <  ( +  in159 in015) ( +  in158 in015)))  ( <  ( +  in1510 in015) ( +  in159 in015)))  ( <  ( +  in1511 in015) ( +  in1510 in015)))  ( <  ( +  in1512 in015) ( +  in1511 in015)))  ( <  ( +  in1513 in015) ( +  in1512 in015)))  ( <  ( +  in1514 in015) ( +  in1513 in015)))  ( <  ( +  in141 ( +  in1514 in015)) ( +  in151 in015)))  ( <  ( +  in142 ( +  in1514 in015)) ( +  in152 in015)))  ( <  ( +  in143 ( +  in1514 in015)) ( +  in153 in015)))  ( <  ( +  in144 ( +  in1514 in015)) ( +  in154 in015)))  ( <  ( +  in145 ( +  in1514 in015)) ( +  in155 in015)))  ( <  ( +  in146 ( +  in1514 in015)) ( +  in156 in015)))  ( <  ( +  in147 ( +  in1514 in015)) ( +  in157 in015)))  ( <  ( +  in148 ( +  in1514 in015)) ( +  in158 in015)))  ( <  ( +  in149 ( +  in1514 in015)) ( +  in159 in015)))  ( <  ( +  in1410 ( +  in1514 in015)) ( +  in1510 in015)))  ( <  ( +  in1411 ( +  in1514 in015)) ( +  in1511 in015)))  ( <  ( +  in1412 ( +  in1514 in015)) ( +  in1512 in015)))  ( <  ( +  in1413 ( +  in1514 in015)) ( +  in1513 in015)))  ( <  ( +  in142 ( +  in1514 in015)) ( +  in141 ( +  in1514 in015))))  ( <  ( +  in143 ( +  in1514 in015)) ( +  in142 ( +  in1514 in015))))  ( <  ( +  in144 ( +  in1514 in015)) ( +  in143 ( +  in1514 in015))))  ( <  ( +  in145 ( +  in1514 in015)) ( +  in144 ( +  in1514 in015))))  ( <  ( +  in146 ( +  in1514 in015)) ( +  in145 ( +  in1514 in015))))  ( <  ( +  in147 ( +  in1514 in015)) ( +  in146 ( +  in1514 in015))))  ( <  ( +  in148 ( +  in1514 in015)) ( +  in147 ( +  in1514 in015))))  ( <  ( +  in149 ( +  in1514 in015)) ( +  in148 ( +  in1514 in015))))  ( <  ( +  in1410 ( +  in1514 in015)) ( +  in149 ( +  in1514 in015))))  ( <  ( +  in1411 ( +  in1514 in015)) ( +  in1410 ( +  in1514 in015))))  ( <  ( +  in1412 ( +  in1514 in015)) ( +  in1411 ( +  in1514 in015))))  ( <  ( +  in1413 ( +  in1514 in015)) ( +  in1412 ( +  in1514 in015))))  ( <  ( +  in131 ( +  in1413 ( +  in1514 in015))) ( +  in141 ( +  in1514 in015))))  ( <  ( +  in132 ( +  in1413 ( +  in1514 in015))) ( +  in142 ( +  in1514 in015))))  ( <  ( +  in133 ( +  in1413 ( +  in1514 in015))) ( +  in143 ( +  in1514 in015))))  ( <  ( +  in134 ( +  in1413 ( +  in1514 in015))) ( +  in144 ( +  in1514 in015))))  ( <  ( +  in135 ( +  in1413 ( +  in1514 in015))) ( +  in145 ( +  in1514 in015))))  ( <  ( +  in136 ( +  in1413 ( +  in1514 in015))) ( +  in146 ( +  in1514 in015))))  ( <  ( +  in137 ( +  in1413 ( +  in1514 in015))) ( +  in147 ( +  in1514 in015))))  ( <  ( +  in138 ( +  in1413 ( +  in1514 in015))) ( +  in148 ( +  in1514 in015))))  ( <  ( +  in139 ( +  in1413 ( +  in1514 in015))) ( +  in149 ( +  in1514 in015))))  ( <  ( +  in1310 ( +  in1413 ( +  in1514 in015))) ( +  in1410 ( +  in1514 in015))))  ( <  ( +  in1311 ( +  in1413 ( +  in1514 in015))) ( +  in1411 ( +  in1514 in015))))  ( <  ( +  in1312 ( +  in1413 ( +  in1514 in015))) ( +  in1412 ( +  in1514 in015))))  ( <  ( +  in132 ( +  in1413 ( +  in1514 in015))) ( +  in131 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in133 ( +  in1413 ( +  in1514 in015))) ( +  in132 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in134 ( +  in1413 ( +  in1514 in015))) ( +  in133 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in135 ( +  in1413 ( +  in1514 in015))) ( +  in134 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in136 ( +  in1413 ( +  in1514 in015))) ( +  in135 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in137 ( +  in1413 ( +  in1514 in015))) ( +  in136 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in138 ( +  in1413 ( +  in1514 in015))) ( +  in137 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in139 ( +  in1413 ( +  in1514 in015))) ( +  in138 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in1310 ( +  in1413 ( +  in1514 in015))) ( +  in139 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in1311 ( +  in1413 ( +  in1514 in015))) ( +  in1310 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in1312 ( +  in1413 ( +  in1514 in015))) ( +  in1311 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in121 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in131 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in122 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in132 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in123 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in133 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in124 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in134 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in125 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in135 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in126 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in136 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in127 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in137 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in128 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in138 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in129 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in139 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in1210 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in1310 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in1311 ( +  in1413 ( +  in1514 in015)))))  ( <  ( +  in122 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in121 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in123 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in122 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in124 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in123 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in125 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in124 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in126 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in125 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in127 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in126 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in128 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in127 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in129 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in128 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in1210 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in129 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))) ( +  in1210 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in111 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in121 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in112 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in122 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in113 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in123 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in114 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in124 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in115 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in125 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in116 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in126 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in117 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in127 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in118 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in128 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in119 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in129 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in1210 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))  ( <  ( +  in112 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in111 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in113 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in112 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in114 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in113 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in115 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in114 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in116 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in115 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in117 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in116 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in118 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in117 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in119 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in118 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))) ( +  in119 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in101 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in111 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in102 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in112 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in103 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in113 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in104 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in114 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in105 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in115 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in106 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in116 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in107 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in117 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in108 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in118 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in119 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))  ( <  ( +  in102 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in101 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in103 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in102 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in104 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in103 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in105 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in104 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in106 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in105 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in107 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in106 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in108 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in107 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))) ( +  in108 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in91 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in101 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in92 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in102 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in93 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in103 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in94 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in104 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in95 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in105 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in96 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in106 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in97 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in107 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in108 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))  ( <  ( +  in92 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in91 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in93 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in92 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in94 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in93 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in95 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in94 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in96 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in95 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in97 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in96 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))) ( +  in97 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in81 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in91 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in82 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in92 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in83 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in93 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in84 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in94 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in85 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in95 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in86 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in96 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in97 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))  ( <  ( +  in82 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in81 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in83 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in82 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in84 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in83 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in85 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in84 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in86 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in85 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))) ( +  in86 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in71 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in81 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in72 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in82 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in73 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in83 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in74 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in84 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in75 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in85 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in86 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))  ( <  ( +  in72 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in71 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in73 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in72 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in74 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in73 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in75 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in74 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))) ( +  in75 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in61 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))) ( +  in71 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in62 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))) ( +  in72 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in63 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))) ( +  in73 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in64 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))) ( +  in74 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))) ( +  in75 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))  ( <  ( +  in62 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))) ( +  in61 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))  ( <  ( +  in63 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))) ( +  in62 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))  ( <  ( +  in64 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))) ( +  in63 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))  ( <  ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))) ( +  in64 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))  ( <  ( +  in51 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))) ( +  in61 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))  ( <  ( +  in52 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))) ( +  in62 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))  ( <  ( +  in53 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))) ( +  in63 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))  ( <  ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))) ( +  in64 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))  ( <  ( +  in52 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))) ( +  in51 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))))  ( <  ( +  in53 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))) ( +  in52 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))))  ( <  ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))) ( +  in53 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))))  ( <  ( +  in41 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))) ( +  in51 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))))  ( <  ( +  in42 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))) ( +  in52 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))))  ( <  ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))) ( +  in53 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))))  ( <  ( +  in42 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))) ( +  in41 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))))  ( <  ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))) ( +  in42 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))))  ( <  ( +  in31 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))) ( +  in41 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))))  ( <  ( +  in32 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))) ( +  in42 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))))  ( <  ( +  in32 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))) ( +  in31 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))))))  ( <  ( +  in21 ( +  in32 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015)))))))))))))) ( +  in31 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 in015))))))))))))))))",
      "response": "Worst-case time complexity:\n- runDijkstra (the part whose branches they intended to count) runs in Theta(n^2) time: one outer loop over n iterations, each doing two linear scans over the n vertices (find-min and relax).\n- The overall program also initializes a V\u00d7V matrix in main, which is Theta(n^2). So the whole program is Theta(n^2) time. Extra space is Theta(n^2) for D and Theta(n) for dist and fixed.\n\nSMT2 constraint for input size n = 16:\nBelow is a compact SMT-LIB 2 encoding that captures the inputs for the program at size 16. It models the adjacency matrix as a function in(i,j) with diagonal zero and off-diagonal entries constrained to the 0..1000 range (as hinted by the comment in the code). This is sufficient because the algorithm\u2019s worst-case time does not depend on particular weights as long as inputs are well-formed.\n\nAnswer:\n(set-logic AUFLIA)\n(declare-const n Int)\n(assert (= n 16))\n\n; Adjacency matrix weights as a function in(i,j)\n(declare-fun in (Int Int) Int)\n\n; Diagonal entries are zero (i == j)\n(assert\n  (forall ((i Int))\n    (=> (and (>= i 0) (< i n))\n        (= (in i i) 0))))\n\n; Off-diagonal entries are within [0, 1000]\n(assert\n  (forall ((i Int) (j Int))\n    (=> (and (>= i 0) (< i n) (>= j 0) (< j n) (not (= i j)))\n        (and (<= 0 (in i j)) (<= (in i j) 1000)))))"
    },
    "30": {
      "constants": "(declare-const in2917 Int)\n(declare-const in2918 Int)\n(declare-const in2915 Int)\n(declare-const in2916 Int)\n(declare-const in2919 Int)\n(declare-const in2910 Int)\n(declare-const in2913 Int)\n(declare-const in2914 Int)\n(declare-const in2911 Int)\n(declare-const in2912 Int)\n(declare-const in2928 Int)\n(declare-const in1716 Int)\n(declare-const in2926 Int)\n(declare-const in2927 Int)\n(declare-const in1710 Int)\n(declare-const in2920 Int)\n(declare-const in1711 Int)\n(declare-const in2921 Int)\n(declare-const in1714 Int)\n(declare-const in2924 Int)\n(declare-const in1715 Int)\n(declare-const in2925 Int)\n(declare-const in1712 Int)\n(declare-const in2922 Int)\n(declare-const in1713 Int)\n(declare-const in2923 Int)\n(declare-const in1817 Int)\n(declare-const in1815 Int)\n(declare-const in1816 Int)\n(declare-const in1810 Int)\n(declare-const in1813 Int)\n(declare-const in1814 Int)\n(declare-const in1811 Int)\n(declare-const in1812 Int)\n(declare-const in2719 Int)\n(declare-const in2717 Int)\n(declare-const in2718 Int)\n(declare-const in2711 Int)\n(declare-const in2712 Int)\n(declare-const in2710 Int)\n(declare-const in2715 Int)\n(declare-const in2716 Int)\n(declare-const in2713 Int)\n(declare-const in2714 Int)\n(declare-const in1512 Int)\n(declare-const in2722 Int)\n(declare-const in1513 Int)\n(declare-const in2723 Int)\n(declare-const in1510 Int)\n(declare-const in2720 Int)\n(declare-const in1511 Int)\n(declare-const in2721 Int)\n(declare-const in2726 Int)\n(declare-const in1514 Int)\n(declare-const in2724 Int)\n(declare-const in2725 Int)\n(declare-const in2818 Int)\n(declare-const in2819 Int)\n(declare-const in2816 Int)\n(declare-const in2817 Int)\n(declare-const in2810 Int)\n(declare-const in2811 Int)\n(declare-const in2814 Int)\n(declare-const in2815 Int)\n(declare-const in2812 Int)\n(declare-const in2813 Int)\n(declare-const in2827 Int)\n(declare-const in1611 Int)\n(declare-const in2821 Int)\n(declare-const in1612 Int)\n(declare-const in2822 Int)\n(declare-const in1610 Int)\n(declare-const in2820 Int)\n(declare-const in1615 Int)\n(declare-const in2825 Int)\n(declare-const in2826 Int)\n(declare-const in1613 Int)\n(declare-const in2823 Int)\n(declare-const in1614 Int)\n(declare-const in2824 Int)\n(declare-const in1916 Int)\n(declare-const in1917 Int)\n(declare-const in1914 Int)\n(declare-const in1915 Int)\n(declare-const in1918 Int)\n(declare-const in1912 Int)\n(declare-const in1913 Int)\n(declare-const in1910 Int)\n(declare-const in1911 Int)\n(declare-const in02 Int)\n(declare-const in01 Int)\n(declare-const in04 Int)\n(declare-const in03 Int)\n(declare-const in06 Int)\n(declare-const in05 Int)\n(declare-const in08 Int)\n(declare-const in07 Int)\n(declare-const in09 Int)\n(declare-const in2110 Int)\n(declare-const in2113 Int)\n(declare-const in21 Int)\n(declare-const in2114 Int)\n(declare-const in2111 Int)\n(declare-const in2112 Int)\n(declare-const in2117 Int)\n(declare-const in2118 Int)\n(declare-const in2115 Int)\n(declare-const in2116 Int)\n(declare-const in2119 Int)\n(declare-const in2120 Int)\n(declare-const in197 Int)\n(declare-const in198 Int)\n(declare-const in195 Int)\n(declare-const in196 Int)\n(declare-const in199 Int)\n(declare-const in193 Int)\n(declare-const in194 Int)\n(declare-const in191 Int)\n(declare-const in192 Int)\n(declare-const in186 Int)\n(declare-const in187 Int)\n(declare-const in42 Int)\n(declare-const in184 Int)\n(declare-const in41 Int)\n(declare-const in185 Int)\n(declare-const in2212 Int)\n(declare-const in43 Int)\n(declare-const in2213 Int)\n(declare-const in188 Int)\n(declare-const in2210 Int)\n(declare-const in189 Int)\n(declare-const in2211 Int)\n(declare-const in2216 Int)\n(declare-const in2217 Int)\n(declare-const in2214 Int)\n(declare-const in2215 Int)\n(declare-const in182 Int)\n(declare-const in183 Int)\n(declare-const in2218 Int)\n(declare-const in181 Int)\n(declare-const in2219 Int)\n(declare-const in175 Int)\n(declare-const in296 Int)\n(declare-const in176 Int)\n(declare-const in2220 Int)\n(declare-const in297 Int)\n(declare-const in31 Int)\n(declare-const in173 Int)\n(declare-const in294 Int)\n(declare-const in174 Int)\n(declare-const in295 Int)\n(declare-const in179 Int)\n(declare-const in32 Int)\n(declare-const in2221 Int)\n(declare-const in177 Int)\n(declare-const in298 Int)\n(declare-const in178 Int)\n(declare-const in299 Int)\n(declare-const in171 Int)\n(declare-const in292 Int)\n(declare-const in172 Int)\n(declare-const in293 Int)\n(declare-const in291 Int)\n(declare-const in71 Int)\n(declare-const in62 Int)\n(declare-const in164 Int)\n(declare-const in285 Int)\n(declare-const in61 Int)\n(declare-const in165 Int)\n(declare-const in286 Int)\n(declare-const in64 Int)\n(declare-const in162 Int)\n(declare-const in283 Int)\n(declare-const in63 Int)\n(declare-const in163 Int)\n(declare-const in284 Int)\n(declare-const in168 Int)\n(declare-const in289 Int)\n(declare-const in65 Int)\n(declare-const in169 Int)\n(declare-const in166 Int)\n(declare-const in287 Int)\n(declare-const in167 Int)\n(declare-const in288 Int)\n(declare-const in281 Int)\n(declare-const in161 Int)\n(declare-const in282 Int)\n(declare-const in159 Int)\n(declare-const in51 Int)\n(declare-const in153 Int)\n(declare-const in274 Int)\n(declare-const in154 Int)\n(declare-const in275 Int)\n(declare-const in53 Int)\n(declare-const in151 Int)\n(declare-const in272 Int)\n(declare-const in52 Int)\n(declare-const in152 Int)\n(declare-const in273 Int)\n(declare-const in157 Int)\n(declare-const in278 Int)\n(declare-const in54 Int)\n(declare-const in158 Int)\n(declare-const in279 Int)\n(declare-const in155 Int)\n(declare-const in276 Int)\n(declare-const in156 Int)\n(declare-const in277 Int)\n(declare-const in271 Int)\n(declare-const in029 Int)\n(declare-const in148 Int)\n(declare-const in269 Int)\n(declare-const in027 Int)\n(declare-const in149 Int)\n(declare-const in028 Int)\n(declare-const in91 Int)\n(declare-const in93 Int)\n(declare-const in92 Int)\n(declare-const in84 Int)\n(declare-const in142 Int)\n(declare-const in2010 Int)\n(declare-const in263 Int)\n(declare-const in021 Int)\n(declare-const in83 Int)\n(declare-const in143 Int)\n(declare-const in2011 Int)\n(declare-const in264 Int)\n(declare-const in022 Int)\n(declare-const in86 Int)\n(declare-const in261 Int)\n(declare-const in85 Int)\n(declare-const in141 Int)\n(declare-const in262 Int)\n(declare-const in020 Int)\n(declare-const in146 Int)\n(declare-const in2014 Int)\n(declare-const in267 Int)\n(declare-const in025 Int)\n(declare-const in87 Int)\n(declare-const in147 Int)\n(declare-const in2015 Int)\n(declare-const in268 Int)\n(declare-const in026 Int)\n(declare-const in144 Int)\n(declare-const in2012 Int)\n(declare-const in265 Int)\n(declare-const in023 Int)\n(declare-const in145 Int)\n(declare-const in2013 Int)\n(declare-const in266 Int)\n(declare-const in024 Int)\n(declare-const in2018 Int)\n(declare-const in2019 Int)\n(declare-const in2016 Int)\n(declare-const in2017 Int)\n(declare-const in139 Int)\n(declare-const in018 Int)\n(declare-const in019 Int)\n(declare-const in137 Int)\n(declare-const in258 Int)\n(declare-const in016 Int)\n(declare-const in138 Int)\n(declare-const in259 Int)\n(declare-const in017 Int)\n(declare-const in82 Int)\n(declare-const in81 Int)\n(declare-const in73 Int)\n(declare-const in131 Int)\n(declare-const in252 Int)\n(declare-const in010 Int)\n(declare-const in72 Int)\n(declare-const in132 Int)\n(declare-const in253 Int)\n(declare-const in011 Int)\n(declare-const in75 Int)\n(declare-const in74 Int)\n(declare-const in251 Int)\n(declare-const in135 Int)\n(declare-const in256 Int)\n(declare-const in014 Int)\n(declare-const in76 Int)\n(declare-const in136 Int)\n(declare-const in257 Int)\n(declare-const in015 Int)\n(declare-const in133 Int)\n(declare-const in254 Int)\n(declare-const in012 Int)\n(declare-const in134 Int)\n(declare-const in255 Int)\n(declare-const in013 Int)\n(declare-const in2519 Int)\n(declare-const in128 Int)\n(declare-const in249 Int)\n(declare-const in129 Int)\n(declare-const in126 Int)\n(declare-const in247 Int)\n(declare-const in127 Int)\n(declare-const in248 Int)\n(declare-const in241 Int)\n(declare-const in121 Int)\n(declare-const in242 Int)\n(declare-const in124 Int)\n(declare-const in245 Int)\n(declare-const in125 Int)\n(declare-const in246 Int)\n(declare-const in2510 Int)\n(declare-const in122 Int)\n(declare-const in243 Int)\n(declare-const in123 Int)\n(declare-const in244 Int)\n(declare-const in2513 Int)\n(declare-const in2514 Int)\n(declare-const in2511 Int)\n(declare-const in2512 Int)\n(declare-const in2517 Int)\n(declare-const in2518 Int)\n(declare-const in2515 Int)\n(declare-const in2516 Int)\n(declare-const in117 Int)\n(declare-const in238 Int)\n(declare-const in118 Int)\n(declare-const in239 Int)\n(declare-const in115 Int)\n(declare-const in236 Int)\n(declare-const in116 Int)\n(declare-const in237 Int)\n(declare-const in119 Int)\n(declare-const in95 Int)\n(declare-const in94 Int)\n(declare-const in231 Int)\n(declare-const in97 Int)\n(declare-const in96 Int)\n(declare-const in113 Int)\n(declare-const in234 Int)\n(declare-const in2520 Int)\n(declare-const in98 Int)\n(declare-const in114 Int)\n(declare-const in235 Int)\n(declare-const in2521 Int)\n(declare-const in111 Int)\n(declare-const in1311 Int)\n(declare-const in232 Int)\n(declare-const in112 Int)\n(declare-const in1310 Int)\n(declare-const in233 Int)\n(declare-const in2524 Int)\n(declare-const in1312 Int)\n(declare-const in2522 Int)\n(declare-const in2523 Int)\n(declare-const in2618 Int)\n(declare-const in2619 Int)\n(declare-const in106 Int)\n(declare-const in227 Int)\n(declare-const in107 Int)\n(declare-const in228 Int)\n(declare-const in104 Int)\n(declare-const in225 Int)\n(declare-const in105 Int)\n(declare-const in226 Int)\n(declare-const in108 Int)\n(declare-const in229 Int)\n(declare-const in109 Int)\n(declare-const in102 Int)\n(declare-const in223 Int)\n(declare-const in103 Int)\n(declare-const in224 Int)\n(declare-const in221 Int)\n(declare-const in101 Int)\n(declare-const in222 Int)\n(declare-const in2612 Int)\n(declare-const in2613 Int)\n(declare-const in2610 Int)\n(declare-const in2611 Int)\n(declare-const in2616 Int)\n(declare-const in2617 Int)\n(declare-const in2614 Int)\n(declare-const in2615 Int)\n(declare-const in216 Int)\n(declare-const in217 Int)\n(declare-const in214 Int)\n(declare-const in215 Int)\n(declare-const in218 Int)\n(declare-const in219 Int)\n(declare-const in212 Int)\n(declare-const in1410 Int)\n(declare-const in213 Int)\n(declare-const in2620 Int)\n(declare-const in211 Int)\n(declare-const in1413 Int)\n(declare-const in2623 Int)\n(declare-const in2624 Int)\n(declare-const in1411 Int)\n(declare-const in2621 Int)\n(declare-const in1412 Int)\n(declare-const in2622 Int)\n(declare-const in2625 Int)\n(declare-const in205 Int)\n(declare-const in206 Int)\n(declare-const in203 Int)\n(declare-const in204 Int)\n(declare-const in209 Int)\n(declare-const in207 Int)\n(declare-const in208 Int)\n(declare-const in201 Int)\n(declare-const in2311 Int)\n(declare-const in202 Int)\n(declare-const in2312 Int)\n(declare-const in2310 Int)\n(declare-const in2315 Int)\n(declare-const in2316 Int)\n(declare-const in2313 Int)\n(declare-const in2314 Int)\n(declare-const in2319 Int)\n(declare-const in2317 Int)\n(declare-const in2318 Int)\n(declare-const in2322 Int)\n(declare-const in1110 Int)\n(declare-const in2320 Int)\n(declare-const in2321 Int)\n(declare-const in2410 Int)\n(declare-const in2411 Int)\n(declare-const in2414 Int)\n(declare-const in2415 Int)\n(declare-const in2412 Int)\n(declare-const in2413 Int)\n(declare-const in2418 Int)\n(declare-const in2419 Int)\n(declare-const in2416 Int)\n(declare-const in2417 Int)\n(declare-const in1210 Int)\n(declare-const in2421 Int)\n(declare-const in2422 Int)\n(declare-const in1211 Int)\n(declare-const in2420 Int)\n(declare-const in2423 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in02 in01)  ( <  in03 in02))  ( <  in04 in03))  ( <  in05 in04))  ( <  in06 in05))  ( <  in07 in06))  ( <  in08 in07))  ( <  in09 in08))  ( <  in010 in09))  ( <  in011 in010))  ( <  in012 in011))  ( <  in013 in012))  ( <  in014 in013))  ( <  in015 in014))  ( <  in016 in015))  ( <  in017 in016))  ( <  in018 in017))  ( <  in019 in018))  ( <  in020 in019))  ( <  in021 in020))  ( <  in022 in021))  ( <  in023 in022))  ( <  in024 in023))  ( <  in025 in024))  ( <  in026 in025))  ( <  in027 in026))  ( <  in028 in027))  ( <  in029 in028))  ( <  ( +  in291 in029) in01))  ( <  ( +  in292 in029) in02))  ( <  ( +  in293 in029) in03))  ( <  ( +  in294 in029) in04))  ( <  ( +  in295 in029) in05))  ( <  ( +  in296 in029) in06))  ( <  ( +  in297 in029) in07))  ( <  ( +  in298 in029) in08))  ( <  ( +  in299 in029) in09))  ( <  ( +  in2910 in029) in010))  ( <  ( +  in2911 in029) in011))  ( <  ( +  in2912 in029) in012))  ( <  ( +  in2913 in029) in013))  ( <  ( +  in2914 in029) in014))  ( <  ( +  in2915 in029) in015))  ( <  ( +  in2916 in029) in016))  ( <  ( +  in2917 in029) in017))  ( <  ( +  in2918 in029) in018))  ( <  ( +  in2919 in029) in019))  ( <  ( +  in2920 in029) in020))  ( <  ( +  in2921 in029) in021))  ( <  ( +  in2922 in029) in022))  ( <  ( +  in2923 in029) in023))  ( <  ( +  in2924 in029) in024))  ( <  ( +  in2925 in029) in025))  ( <  ( +  in2926 in029) in026))  ( <  ( +  in2927 in029) in027))  ( <  ( +  in2928 in029) in028))  ( <  ( +  in292 in029) ( +  in291 in029)))  ( <  ( +  in293 in029) ( +  in292 in029)))  ( <  ( +  in294 in029) ( +  in293 in029)))  ( <  ( +  in295 in029) ( +  in294 in029)))  ( <  ( +  in296 in029) ( +  in295 in029)))  ( <  ( +  in297 in029) ( +  in296 in029)))  ( <  ( +  in298 in029) ( +  in297 in029)))  ( <  ( +  in299 in029) ( +  in298 in029)))  ( <  ( +  in2910 in029) ( +  in299 in029)))  ( <  ( +  in2911 in029) ( +  in2910 in029)))  ( <  ( +  in2912 in029) ( +  in2911 in029)))  ( <  ( +  in2913 in029) ( +  in2912 in029)))  ( <  ( +  in2914 in029) ( +  in2913 in029)))  ( <  ( +  in2915 in029) ( +  in2914 in029)))  ( <  ( +  in2916 in029) ( +  in2915 in029)))  ( <  ( +  in2917 in029) ( +  in2916 in029)))  ( <  ( +  in2918 in029) ( +  in2917 in029)))  ( <  ( +  in2919 in029) ( +  in2918 in029)))  ( <  ( +  in2920 in029) ( +  in2919 in029)))  ( <  ( +  in2921 in029) ( +  in2920 in029)))  ( <  ( +  in2922 in029) ( +  in2921 in029)))  ( <  ( +  in2923 in029) ( +  in2922 in029)))  ( <  ( +  in2924 in029) ( +  in2923 in029)))  ( <  ( +  in2925 in029) ( +  in2924 in029)))  ( <  ( +  in2926 in029) ( +  in2925 in029)))  ( <  ( +  in2927 in029) ( +  in2926 in029)))  ( <  ( +  in2928 in029) ( +  in2927 in029)))  ( <  ( +  in281 ( +  in2928 in029)) ( +  in291 in029)))  ( <  ( +  in282 ( +  in2928 in029)) ( +  in292 in029)))  ( <  ( +  in283 ( +  in2928 in029)) ( +  in293 in029)))  ( <  ( +  in284 ( +  in2928 in029)) ( +  in294 in029)))  ( <  ( +  in285 ( +  in2928 in029)) ( +  in295 in029)))  ( <  ( +  in286 ( +  in2928 in029)) ( +  in296 in029)))  ( <  ( +  in287 ( +  in2928 in029)) ( +  in297 in029)))  ( <  ( +  in288 ( +  in2928 in029)) ( +  in298 in029)))  ( <  ( +  in289 ( +  in2928 in029)) ( +  in299 in029)))  ( <  ( +  in2810 ( +  in2928 in029)) ( +  in2910 in029)))  ( <  ( +  in2811 ( +  in2928 in029)) ( +  in2911 in029)))  ( <  ( +  in2812 ( +  in2928 in029)) ( +  in2912 in029)))  ( <  ( +  in2813 ( +  in2928 in029)) ( +  in2913 in029)))  ( <  ( +  in2814 ( +  in2928 in029)) ( +  in2914 in029)))  ( <  ( +  in2815 ( +  in2928 in029)) ( +  in2915 in029)))  ( <  ( +  in2816 ( +  in2928 in029)) ( +  in2916 in029)))  ( <  ( +  in2817 ( +  in2928 in029)) ( +  in2917 in029)))  ( <  ( +  in2818 ( +  in2928 in029)) ( +  in2918 in029)))  ( <  ( +  in2819 ( +  in2928 in029)) ( +  in2919 in029)))  ( <  ( +  in2820 ( +  in2928 in029)) ( +  in2920 in029)))  ( <  ( +  in2821 ( +  in2928 in029)) ( +  in2921 in029)))  ( <  ( +  in2822 ( +  in2928 in029)) ( +  in2922 in029)))  ( <  ( +  in2823 ( +  in2928 in029)) ( +  in2923 in029)))  ( <  ( +  in2824 ( +  in2928 in029)) ( +  in2924 in029)))  ( <  ( +  in2825 ( +  in2928 in029)) ( +  in2925 in029)))  ( <  ( +  in2826 ( +  in2928 in029)) ( +  in2926 in029)))  ( <  ( +  in2827 ( +  in2928 in029)) ( +  in2927 in029)))  ( <  ( +  in282 ( +  in2928 in029)) ( +  in281 ( +  in2928 in029))))  ( <  ( +  in283 ( +  in2928 in029)) ( +  in282 ( +  in2928 in029))))  ( <  ( +  in284 ( +  in2928 in029)) ( +  in283 ( +  in2928 in029))))  ( <  ( +  in285 ( +  in2928 in029)) ( +  in284 ( +  in2928 in029))))  ( <  ( +  in286 ( +  in2928 in029)) ( +  in285 ( +  in2928 in029))))  ( <  ( +  in287 ( +  in2928 in029)) ( +  in286 ( +  in2928 in029))))  ( <  ( +  in288 ( +  in2928 in029)) ( +  in287 ( +  in2928 in029))))  ( <  ( +  in289 ( +  in2928 in029)) ( +  in288 ( +  in2928 in029))))  ( <  ( +  in2810 ( +  in2928 in029)) ( +  in289 ( +  in2928 in029))))  ( <  ( +  in2811 ( +  in2928 in029)) ( +  in2810 ( +  in2928 in029))))  ( <  ( +  in2812 ( +  in2928 in029)) ( +  in2811 ( +  in2928 in029))))  ( <  ( +  in2813 ( +  in2928 in029)) ( +  in2812 ( +  in2928 in029))))  ( <  ( +  in2814 ( +  in2928 in029)) ( +  in2813 ( +  in2928 in029))))  ( <  ( +  in2815 ( +  in2928 in029)) ( +  in2814 ( +  in2928 in029))))  ( <  ( +  in2816 ( +  in2928 in029)) ( +  in2815 ( +  in2928 in029))))  ( <  ( +  in2817 ( +  in2928 in029)) ( +  in2816 ( +  in2928 in029))))  ( <  ( +  in2818 ( +  in2928 in029)) ( +  in2817 ( +  in2928 in029))))  ( <  ( +  in2819 ( +  in2928 in029)) ( +  in2818 ( +  in2928 in029))))  ( <  ( +  in2820 ( +  in2928 in029)) ( +  in2819 ( +  in2928 in029))))  ( <  ( +  in2821 ( +  in2928 in029)) ( +  in2820 ( +  in2928 in029))))  ( <  ( +  in2822 ( +  in2928 in029)) ( +  in2821 ( +  in2928 in029))))  ( <  ( +  in2823 ( +  in2928 in029)) ( +  in2822 ( +  in2928 in029))))  ( <  ( +  in2824 ( +  in2928 in029)) ( +  in2823 ( +  in2928 in029))))  ( <  ( +  in2825 ( +  in2928 in029)) ( +  in2824 ( +  in2928 in029))))  ( <  ( +  in2826 ( +  in2928 in029)) ( +  in2825 ( +  in2928 in029))))  ( <  ( +  in2827 ( +  in2928 in029)) ( +  in2826 ( +  in2928 in029))))  ( <  ( +  in271 ( +  in2827 ( +  in2928 in029))) ( +  in281 ( +  in2928 in029))))  ( <  ( +  in272 ( +  in2827 ( +  in2928 in029))) ( +  in282 ( +  in2928 in029))))  ( <  ( +  in273 ( +  in2827 ( +  in2928 in029))) ( +  in283 ( +  in2928 in029))))  ( <  ( +  in274 ( +  in2827 ( +  in2928 in029))) ( +  in284 ( +  in2928 in029))))  ( <  ( +  in275 ( +  in2827 ( +  in2928 in029))) ( +  in285 ( +  in2928 in029))))  ( <  ( +  in276 ( +  in2827 ( +  in2928 in029))) ( +  in286 ( +  in2928 in029))))  ( <  ( +  in277 ( +  in2827 ( +  in2928 in029))) ( +  in287 ( +  in2928 in029))))  ( <  ( +  in278 ( +  in2827 ( +  in2928 in029))) ( +  in288 ( +  in2928 in029))))  ( <  ( +  in279 ( +  in2827 ( +  in2928 in029))) ( +  in289 ( +  in2928 in029))))  ( <  ( +  in2710 ( +  in2827 ( +  in2928 in029))) ( +  in2810 ( +  in2928 in029))))  ( <  ( +  in2711 ( +  in2827 ( +  in2928 in029))) ( +  in2811 ( +  in2928 in029))))  ( <  ( +  in2712 ( +  in2827 ( +  in2928 in029))) ( +  in2812 ( +  in2928 in029))))  ( <  ( +  in2713 ( +  in2827 ( +  in2928 in029))) ( +  in2813 ( +  in2928 in029))))  ( <  ( +  in2714 ( +  in2827 ( +  in2928 in029))) ( +  in2814 ( +  in2928 in029))))  ( <  ( +  in2715 ( +  in2827 ( +  in2928 in029))) ( +  in2815 ( +  in2928 in029))))  ( <  ( +  in2716 ( +  in2827 ( +  in2928 in029))) ( +  in2816 ( +  in2928 in029))))  ( <  ( +  in2717 ( +  in2827 ( +  in2928 in029))) ( +  in2817 ( +  in2928 in029))))  ( <  ( +  in2718 ( +  in2827 ( +  in2928 in029))) ( +  in2818 ( +  in2928 in029))))  ( <  ( +  in2719 ( +  in2827 ( +  in2928 in029))) ( +  in2819 ( +  in2928 in029))))  ( <  ( +  in2720 ( +  in2827 ( +  in2928 in029))) ( +  in2820 ( +  in2928 in029))))  ( <  ( +  in2721 ( +  in2827 ( +  in2928 in029))) ( +  in2821 ( +  in2928 in029))))  ( <  ( +  in2722 ( +  in2827 ( +  in2928 in029))) ( +  in2822 ( +  in2928 in029))))  ( <  ( +  in2723 ( +  in2827 ( +  in2928 in029))) ( +  in2823 ( +  in2928 in029))))  ( <  ( +  in2724 ( +  in2827 ( +  in2928 in029))) ( +  in2824 ( +  in2928 in029))))  ( <  ( +  in2725 ( +  in2827 ( +  in2928 in029))) ( +  in2825 ( +  in2928 in029))))  ( <  ( +  in2726 ( +  in2827 ( +  in2928 in029))) ( +  in2826 ( +  in2928 in029))))  ( <  ( +  in272 ( +  in2827 ( +  in2928 in029))) ( +  in271 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in273 ( +  in2827 ( +  in2928 in029))) ( +  in272 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in274 ( +  in2827 ( +  in2928 in029))) ( +  in273 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in275 ( +  in2827 ( +  in2928 in029))) ( +  in274 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in276 ( +  in2827 ( +  in2928 in029))) ( +  in275 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in277 ( +  in2827 ( +  in2928 in029))) ( +  in276 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in278 ( +  in2827 ( +  in2928 in029))) ( +  in277 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in279 ( +  in2827 ( +  in2928 in029))) ( +  in278 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2710 ( +  in2827 ( +  in2928 in029))) ( +  in279 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2711 ( +  in2827 ( +  in2928 in029))) ( +  in2710 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2712 ( +  in2827 ( +  in2928 in029))) ( +  in2711 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2713 ( +  in2827 ( +  in2928 in029))) ( +  in2712 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2714 ( +  in2827 ( +  in2928 in029))) ( +  in2713 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2715 ( +  in2827 ( +  in2928 in029))) ( +  in2714 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2716 ( +  in2827 ( +  in2928 in029))) ( +  in2715 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2717 ( +  in2827 ( +  in2928 in029))) ( +  in2716 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2718 ( +  in2827 ( +  in2928 in029))) ( +  in2717 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2719 ( +  in2827 ( +  in2928 in029))) ( +  in2718 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2720 ( +  in2827 ( +  in2928 in029))) ( +  in2719 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2721 ( +  in2827 ( +  in2928 in029))) ( +  in2720 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2722 ( +  in2827 ( +  in2928 in029))) ( +  in2721 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2723 ( +  in2827 ( +  in2928 in029))) ( +  in2722 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2724 ( +  in2827 ( +  in2928 in029))) ( +  in2723 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2725 ( +  in2827 ( +  in2928 in029))) ( +  in2724 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2726 ( +  in2827 ( +  in2928 in029))) ( +  in2725 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in261 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in271 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in262 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in272 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in263 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in273 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in264 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in274 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in265 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in275 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in266 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in276 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in267 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in277 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in268 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in278 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in269 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in279 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2610 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2710 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2611 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2711 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2612 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2712 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2613 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2713 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2614 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2714 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2615 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2715 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2616 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2716 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2617 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2717 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2618 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2718 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2619 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2719 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2620 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2720 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2621 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2721 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2622 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2722 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2623 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2723 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2624 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2724 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2725 ( +  in2827 ( +  in2928 in029)))))  ( <  ( +  in262 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in261 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in263 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in262 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in264 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in263 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in265 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in264 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in266 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in265 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in267 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in266 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in268 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in267 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in269 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in268 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2610 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in269 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2611 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2610 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2612 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2611 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2613 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2612 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2614 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2613 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2615 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2614 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2616 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2615 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2617 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2616 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2618 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2617 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2619 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2618 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2620 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2619 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2621 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2620 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2622 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2621 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2623 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2622 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2624 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2623 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))) ( +  in2624 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in251 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in261 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in252 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in262 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in253 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in263 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in254 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in264 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in255 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in265 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in256 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in266 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in257 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in267 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in258 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in268 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in259 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in269 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2510 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2610 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2511 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2611 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2512 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2612 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2513 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2613 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2514 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2614 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2515 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2615 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2516 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2616 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2517 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2617 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2518 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2618 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2519 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2619 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2520 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2620 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2521 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2621 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2522 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2622 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2523 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2623 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2624 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))  ( <  ( +  in252 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in251 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in253 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in252 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in254 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in253 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in255 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in254 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in256 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in255 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in257 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in256 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in258 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in257 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in259 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in258 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2510 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in259 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2511 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2510 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2512 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2511 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2513 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2512 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2514 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2513 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2515 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2514 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2516 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2515 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2517 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2516 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2518 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2517 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2519 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2518 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2520 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2519 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2521 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2520 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2522 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2521 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2523 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2522 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))) ( +  in2523 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in241 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in251 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in242 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in252 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in243 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in253 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in244 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in254 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in245 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in255 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in246 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in256 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in247 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in257 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in248 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in258 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in249 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in259 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2410 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2510 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2411 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2511 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2412 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2512 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2413 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2513 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2414 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2514 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2415 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2515 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2416 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2516 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2417 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2517 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2418 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2518 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2419 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2519 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2420 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2520 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2421 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2521 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2422 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2522 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2523 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))  ( <  ( +  in242 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in241 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in243 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in242 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in244 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in243 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in245 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in244 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in246 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in245 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in247 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in246 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in248 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in247 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in249 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in248 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2410 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in249 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2411 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2410 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2412 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2411 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2413 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2412 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2414 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2413 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2415 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2414 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2416 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2415 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2417 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2416 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2418 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2417 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2419 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2418 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2420 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2419 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2421 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2420 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2422 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2421 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))) ( +  in2422 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in231 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in241 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in232 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in242 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in233 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in243 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in234 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in244 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in235 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in245 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in236 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in246 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in237 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in247 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in238 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in248 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in239 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in249 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2310 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2410 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2311 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2411 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2312 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2412 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2313 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2413 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2314 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2414 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2315 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2415 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2316 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2416 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2317 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2417 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2318 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2418 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2319 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2419 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2320 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2420 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2321 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2421 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2422 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))  ( <  ( +  in232 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in231 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in233 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in232 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in234 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in233 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in235 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in234 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in236 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in235 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in237 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in236 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in238 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in237 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in239 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in238 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2310 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in239 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2311 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2310 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2312 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2311 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2313 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2312 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2314 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2313 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2315 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2314 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2316 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2315 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2317 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2316 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2318 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2317 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2319 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2318 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2320 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2319 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2321 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2320 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))) ( +  in2321 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in231 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in222 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in232 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in223 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in233 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in224 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in234 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in225 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in235 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in226 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in236 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in227 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in237 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in228 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in238 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in229 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in239 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2210 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2310 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2211 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2311 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2212 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2312 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2213 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2313 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2214 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2314 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2215 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2315 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2216 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2316 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2217 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2317 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2218 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2318 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2219 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2319 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2220 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2320 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2321 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))  ( <  ( +  in222 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in223 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in222 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in224 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in223 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in225 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in224 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in226 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in225 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in227 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in226 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in228 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in227 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in229 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in228 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2210 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in229 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2211 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2210 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2212 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2211 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2213 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2212 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2214 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2213 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2215 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2214 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2216 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2215 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2217 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2216 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2218 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2217 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2219 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2218 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2220 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2219 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))) ( +  in2220 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in211 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in212 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in222 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in213 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in223 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in214 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in224 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in215 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in225 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in216 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in226 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in217 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in227 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in218 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in228 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in219 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in229 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2110 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2210 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2111 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2211 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2112 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2212 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2113 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2213 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2114 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2214 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2115 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2215 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2116 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2216 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2117 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2217 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2118 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2218 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2119 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2219 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2220 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))  ( <  ( +  in212 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in211 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in213 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in212 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in214 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in213 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in215 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in214 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in216 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in215 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in217 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in216 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in218 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in217 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in219 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in218 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2110 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in219 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2111 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2110 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2112 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2111 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2113 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2112 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2114 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2113 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2115 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2114 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2116 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2115 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2117 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2116 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2118 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2117 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2119 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2118 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))) ( +  in2119 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in201 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in211 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in202 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in212 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in203 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in213 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in204 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in214 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in205 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in215 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in206 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in216 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in207 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in217 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in208 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in218 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in209 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in219 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2010 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2110 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2011 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2111 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2012 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2112 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2013 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2113 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2014 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2114 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2015 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2115 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2016 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2116 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2017 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2117 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2018 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2118 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2119 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))  ( <  ( +  in202 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in201 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in203 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in202 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in204 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in203 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in205 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in204 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in206 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in205 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in207 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in206 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in208 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in207 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in209 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in208 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2010 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in209 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2011 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2010 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2012 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2011 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2013 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2012 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2014 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2013 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2015 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2014 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2016 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2015 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2017 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2016 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2018 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2017 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))) ( +  in2018 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in191 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in201 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in192 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in202 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in193 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in203 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in194 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in204 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in195 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in205 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in196 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in206 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in197 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in207 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in198 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in208 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in199 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in209 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in1910 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in2010 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in1911 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in2011 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in1912 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in2012 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in1913 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in2013 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in1914 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in2014 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in1915 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in2015 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in1916 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in2016 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in1917 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in2017 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in2018 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))  ( <  ( +  in192 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in191 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in193 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in192 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in194 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in193 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in195 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in194 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in196 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in195 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in197 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in196 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in198 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in197 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in199 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in198 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1910 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in199 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1911 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in1910 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1912 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in1911 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1913 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in1912 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1914 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in1913 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1915 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in1914 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1916 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in1915 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1917 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in1916 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))) ( +  in1917 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in181 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in191 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in182 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in192 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in183 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in193 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in184 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in194 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in185 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in195 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in186 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in196 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in187 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in197 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in188 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in198 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in189 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in199 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1810 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1910 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1811 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1911 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1812 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1912 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1813 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1913 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1814 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1914 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1815 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1915 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1816 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1916 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1917 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))  ( <  ( +  in182 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in181 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in183 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in182 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in184 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in183 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in185 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in184 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in186 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in185 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in187 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in186 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in188 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in187 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in189 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in188 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1810 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in189 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1811 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1810 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1812 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1811 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1813 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1812 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1814 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1813 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1815 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1814 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1816 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1815 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))) ( +  in1816 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in171 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in181 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in172 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in182 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in173 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in183 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in174 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in184 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in175 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in185 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in176 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in186 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in177 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in187 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in178 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in188 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in179 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in189 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1710 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1810 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1711 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1811 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1712 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1812 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1713 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1813 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1714 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1814 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1715 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1815 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1816 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))  ( <  ( +  in172 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in171 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in173 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in172 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in174 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in173 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in175 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in174 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in176 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in175 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in177 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in176 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in178 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in177 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in179 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in178 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1710 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in179 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1711 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1710 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1712 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1711 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1713 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1712 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1714 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1713 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1715 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1714 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))) ( +  in1715 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in161 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in171 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in162 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in172 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in163 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in173 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in164 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in174 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in165 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in175 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in166 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in176 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in167 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in177 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in168 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in178 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in169 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in179 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1610 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1710 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1611 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1711 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1612 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1712 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1613 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1713 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1614 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1714 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1715 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))  ( <  ( +  in162 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in161 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in163 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in162 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in164 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in163 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in165 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in164 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in166 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in165 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in167 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in166 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in168 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in167 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in169 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in168 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1610 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in169 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1611 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1610 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1612 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1611 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1613 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1612 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1614 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1613 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))) ( +  in1614 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in151 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in161 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in152 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in162 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in153 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in163 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in154 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in164 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in155 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in165 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in156 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in166 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in157 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in167 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in158 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in168 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in159 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in169 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1510 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in1610 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1511 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in1611 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1512 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in1612 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1513 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in1613 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in1614 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))  ( <  ( +  in152 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in151 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in153 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in152 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in154 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in153 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in155 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in154 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in156 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in155 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in157 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in156 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in158 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in157 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in159 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in158 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in1510 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in159 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in1511 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in1510 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in1512 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in1511 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in1513 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in1512 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))) ( +  in1513 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in141 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in151 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in142 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in152 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in143 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in153 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in144 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in154 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in145 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in155 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in146 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in156 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in147 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in157 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in148 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in158 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in149 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in159 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in1410 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in1510 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in1411 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in1511 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in1412 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in1512 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in1513 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))  ( <  ( +  in142 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in141 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in143 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in142 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in144 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in143 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in145 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in144 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in146 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in145 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in147 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in146 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in148 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in147 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in149 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in148 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in1410 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in149 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in1411 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in1410 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in1412 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in1411 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))) ( +  in1412 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in131 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in141 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in132 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in142 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in133 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in143 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in134 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in144 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in135 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in145 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in136 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in146 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in137 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in147 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in138 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in148 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in139 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in149 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in1310 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in1410 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in1311 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in1411 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in1412 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))  ( <  ( +  in132 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in131 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in133 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in132 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in134 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in133 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in135 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in134 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in136 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in135 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in137 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in136 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in138 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in137 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in139 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in138 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in1310 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in139 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in1311 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in1310 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))) ( +  in1311 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in121 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in131 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in122 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in132 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in123 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in133 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in124 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in134 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in125 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in135 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in126 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in136 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in127 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in137 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in128 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in138 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in129 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in139 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in1210 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in1310 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in1311 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))  ( <  ( +  in122 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in121 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in123 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in122 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in124 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in123 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in125 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in124 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in126 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in125 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in127 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in126 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in128 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in127 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in129 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in128 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in1210 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in129 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))) ( +  in1210 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in111 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in121 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in112 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in122 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in113 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in123 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in114 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in124 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in115 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in125 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in116 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in126 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in117 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in127 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in118 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in128 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in119 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in129 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in1210 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))  ( <  ( +  in112 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in111 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in113 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in112 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in114 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in113 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in115 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in114 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in116 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in115 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in117 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in116 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in118 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in117 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in119 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in118 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))) ( +  in119 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in101 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in111 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in102 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in112 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in103 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in113 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in104 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in114 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in105 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in115 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in106 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in116 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in107 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in117 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in108 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in118 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in119 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))  ( <  ( +  in102 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in101 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in103 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in102 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in104 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in103 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in105 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in104 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in106 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in105 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in107 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in106 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in108 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in107 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))) ( +  in108 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in91 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in101 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in92 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in102 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in93 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in103 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in94 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in104 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in95 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in105 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in96 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in106 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in97 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in107 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in108 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))  ( <  ( +  in92 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in91 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in93 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in92 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in94 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in93 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in95 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in94 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in96 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in95 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in97 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in96 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))) ( +  in97 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in81 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in91 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in82 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in92 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in83 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in93 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in84 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in94 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in85 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in95 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in86 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in96 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in97 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))  ( <  ( +  in82 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in81 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in83 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in82 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in84 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in83 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in85 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in84 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in86 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in85 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))) ( +  in86 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in71 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in81 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in72 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in82 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in73 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in83 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in74 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in84 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in75 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in85 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in86 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))  ( <  ( +  in72 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in71 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in73 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in72 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in74 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in73 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in75 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in74 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))) ( +  in75 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in61 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))) ( +  in71 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in62 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))) ( +  in72 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in63 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))) ( +  in73 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in64 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))) ( +  in74 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))) ( +  in75 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))  ( <  ( +  in62 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))) ( +  in61 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))  ( <  ( +  in63 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))) ( +  in62 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))  ( <  ( +  in64 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))) ( +  in63 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))  ( <  ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))) ( +  in64 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))  ( <  ( +  in51 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))) ( +  in61 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))  ( <  ( +  in52 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))) ( +  in62 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))  ( <  ( +  in53 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))) ( +  in63 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))  ( <  ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))) ( +  in64 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))  ( <  ( +  in52 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))) ( +  in51 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))))  ( <  ( +  in53 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))) ( +  in52 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))))  ( <  ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))) ( +  in53 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))))  ( <  ( +  in41 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))) ( +  in51 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))))  ( <  ( +  in42 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))) ( +  in52 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))))  ( <  ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))) ( +  in53 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))))  ( <  ( +  in42 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))) ( +  in41 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))))  ( <  ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))) ( +  in42 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))))  ( <  ( +  in31 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))) ( +  in41 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))))  ( <  ( +  in32 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))) ( +  in42 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))))  ( <  ( +  in32 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))) ( +  in31 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))))))  ( <  ( +  in21 ( +  in32 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029)))))))))))))))))))))))))))) ( +  in31 ( +  in43 ( +  in54 ( +  in65 ( +  in76 ( +  in87 ( +  in98 ( +  in109 ( +  in1110 ( +  in1211 ( +  in1312 ( +  in1413 ( +  in1514 ( +  in1615 ( +  in1716 ( +  in1817 ( +  in1918 ( +  in2019 ( +  in2120 ( +  in2221 ( +  in2322 ( +  in2423 ( +  in2524 ( +  in2625 ( +  in2726 ( +  in2827 ( +  in2928 in029))))))))))))))))))))))))))))))",
      "response": "Worst-case time complexity: O(n^2), where n = V (number of vertices)\n\nReasoning:\n- The algorithm uses an adjacency matrix and no heap.\n- For each of the n iterations:\n  - It linearly scans all n vertices to select the next minimum-distance unfixed vertex: O(n).\n  - It then relaxes edges by scanning n outgoing edges: O(n).\n- Total: O(n) + n \u00b7 (O(n) + O(n)) = O(n^2).\n\nA suitable SMT-LIB v2 constraint for n = 30 that matches the program\u2019s symbolic inputs (weights D[i][j] created as inij) and ensures safe, well-formed instances (no overflow, all edges present, diagonal 0) can be expressed succinctly with an uninterpreted function over indices 0..29. We bound weights to [0, 1000], which prevents overflow since 29 \u00b7 1000 << 2,147,483,647.\n\nAnswer:\n(set-logic AUFLIA)\n; in(i,j) represents D[i][j] for 0 <= i,j <= 29\n(declare-fun in (Int Int) Int)\n\n; Non-diagonal edge weights are in [0, 1000]\n(assert\n  (forall ((i Int) (j Int))\n    (=> (and (<= 0 i) (<= i 29) (<= 0 j) (<= j 29) (not (= i j)))\n        (and (<= 0 (in i j)) (<= (in i j) 1000)))))\n\n; Diagonal entries are zero (not used, but reflects the program\u2019s intent)\n(assert\n  (forall ((i Int))\n    (=> (and (<= 0 i) (<= i 29))\n        (= (in i i) 0))))\n\n; Ensure direct reachability from the source (0) to all others (positive weights)\n(assert\n  (forall ((j Int))\n    (=> (and (<= 0 j) (<= j 29) (not (= j 0)))\n        (>= (in 0 j) 1))))\n\n(check-sat)"
    },
    "8": {
      "constants": "(declare-const in71 Int)\n(declare-const in62 Int)\n(declare-const in61 Int)\n(declare-const in42 Int)\n(declare-const in64 Int)\n(declare-const in41 Int)\n(declare-const in63 Int)\n(declare-const in21 Int)\n(declare-const in43 Int)\n(declare-const in65 Int)\n(declare-const in02 Int)\n(declare-const in01 Int)\n(declare-const in04 Int)\n(declare-const in03 Int)\n(declare-const in06 Int)\n(declare-const in05 Int)\n(declare-const in07 Int)\n(declare-const in51 Int)\n(declare-const in73 Int)\n(declare-const in72 Int)\n(declare-const in31 Int)\n(declare-const in53 Int)\n(declare-const in75 Int)\n(declare-const in52 Int)\n(declare-const in74 Int)\n(declare-const in32 Int)\n(declare-const in54 Int)\n(declare-const in76 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in02 in01)  ( <  in03 in02))  ( <  in04 in03))  ( <  in05 in04))  ( <  in06 in05))  ( <  in07 in06))  ( <  ( +  in71 in07) in01))  ( <  ( +  in72 in07) in02))  ( <  ( +  in73 in07) in03))  ( <  ( +  in74 in07) in04))  ( <  ( +  in75 in07) in05))  ( <  ( +  in76 in07) in06))  ( <  ( +  in72 in07) ( +  in71 in07)))  ( <  ( +  in73 in07) ( +  in72 in07)))  ( <  ( +  in74 in07) ( +  in73 in07)))  ( <  ( +  in75 in07) ( +  in74 in07)))  ( <  ( +  in76 in07) ( +  in75 in07)))  ( <  ( +  in61 ( +  in76 in07)) ( +  in71 in07)))  ( <  ( +  in62 ( +  in76 in07)) ( +  in72 in07)))  ( <  ( +  in63 ( +  in76 in07)) ( +  in73 in07)))  ( <  ( +  in64 ( +  in76 in07)) ( +  in74 in07)))  ( <  ( +  in65 ( +  in76 in07)) ( +  in75 in07)))  ( <  ( +  in62 ( +  in76 in07)) ( +  in61 ( +  in76 in07))))  ( <  ( +  in63 ( +  in76 in07)) ( +  in62 ( +  in76 in07))))  ( <  ( +  in64 ( +  in76 in07)) ( +  in63 ( +  in76 in07))))  ( <  ( +  in65 ( +  in76 in07)) ( +  in64 ( +  in76 in07))))  ( <  ( +  in51 ( +  in65 ( +  in76 in07))) ( +  in61 ( +  in76 in07))))  ( <  ( +  in52 ( +  in65 ( +  in76 in07))) ( +  in62 ( +  in76 in07))))  ( <  ( +  in53 ( +  in65 ( +  in76 in07))) ( +  in63 ( +  in76 in07))))  ( <  ( +  in54 ( +  in65 ( +  in76 in07))) ( +  in64 ( +  in76 in07))))  ( <  ( +  in52 ( +  in65 ( +  in76 in07))) ( +  in51 ( +  in65 ( +  in76 in07)))))  ( <  ( +  in53 ( +  in65 ( +  in76 in07))) ( +  in52 ( +  in65 ( +  in76 in07)))))  ( <  ( +  in54 ( +  in65 ( +  in76 in07))) ( +  in53 ( +  in65 ( +  in76 in07)))))  ( <  ( +  in41 ( +  in54 ( +  in65 ( +  in76 in07)))) ( +  in51 ( +  in65 ( +  in76 in07)))))  ( <  ( +  in42 ( +  in54 ( +  in65 ( +  in76 in07)))) ( +  in52 ( +  in65 ( +  in76 in07)))))  ( <  ( +  in43 ( +  in54 ( +  in65 ( +  in76 in07)))) ( +  in53 ( +  in65 ( +  in76 in07)))))  ( <  ( +  in42 ( +  in54 ( +  in65 ( +  in76 in07)))) ( +  in41 ( +  in54 ( +  in65 ( +  in76 in07))))))  ( <  ( +  in43 ( +  in54 ( +  in65 ( +  in76 in07)))) ( +  in42 ( +  in54 ( +  in65 ( +  in76 in07))))))  ( <  ( +  in31 ( +  in43 ( +  in54 ( +  in65 ( +  in76 in07))))) ( +  in41 ( +  in54 ( +  in65 ( +  in76 in07))))))  ( <  ( +  in32 ( +  in43 ( +  in54 ( +  in65 ( +  in76 in07))))) ( +  in42 ( +  in54 ( +  in65 ( +  in76 in07))))))  ( <  ( +  in32 ( +  in43 ( +  in54 ( +  in65 ( +  in76 in07))))) ( +  in31 ( +  in43 ( +  in54 ( +  in65 ( +  in76 in07)))))))  ( <  ( +  in21 ( +  in32 ( +  in43 ( +  in54 ( +  in65 ( +  in76 in07)))))) ( +  in31 ( +  in43 ( +  in54 ( +  in65 ( +  in76 in07))))))))",
      "response": "Worst-case time complexity:\n- Time: O(V^2), since it uses an adjacency matrix and a linear scan to pick the next minimum (no priority queue).\n- Space: O(V^2) for the matrix D.\n\nSMT2 constraint for n = 8 (vertices 0..7):\n- We constrain edge weights to be small positive integers.\n- We enforce an order on weights so that, at each iteration k, the next chosen vertex is k+1.\n- We enforce \u201cimprovement\u201d constraints so that every relaxation from the newly fixed vertex strictly improves all remaining tentative distances, maximizing the number of successful relaxations.\n\nAnswer:\n(set-logic QF_LIA)\n\n; Declare all edge weight variables inij for i != j (Int)\n(declare-fun in01 () Int)\n(declare-fun in02 () Int)\n(declare-fun in03 () Int)\n(declare-fun in04 () Int)\n(declare-fun in05 () Int)\n(declare-fun in06 () Int)\n(declare-fun in07 () Int)\n\n(declare-fun in10 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n\n(declare-fun in30 () Int)\n(declare-fun in31 () Int)\n(declare-fun in32 () Int)\n(declare-fun in34 () Int)\n(declare-fun in35 () Int)\n(declare-fun in36 () Int)\n(declare-fun in37 () Int)\n\n(declare-fun in40 () Int)\n(declare-fun in41 () Int)\n(declare-fun in42 () Int)\n(declare-fun in43 () Int)\n(declare-fun in45 () Int)\n(declare-fun in46 () Int)\n(declare-fun in47 () Int)\n\n(declare-fun in50 () Int)\n(declare-fun in51 () Int)\n(declare-fun in52 () Int)\n(declare-fun in53 () Int)\n(declare-fun in54 () Int)\n(declare-fun in56 () Int)\n(declare-fun in57 () Int)\n\n(declare-fun in60 () Int)\n(declare-fun in61 () Int)\n(declare-fun in62 () Int)\n(declare-fun in63 () Int)\n(declare-fun in64 () Int)\n(declare-fun in65 () Int)\n(declare-fun in67 () Int)\n\n(declare-fun in70 () Int)\n(declare-fun in71 () Int)\n(declare-fun in72 () Int)\n(declare-fun in73 () Int)\n(declare-fun in74 () Int)\n(declare-fun in75 () Int)\n(declare-fun in76 () Int)\n\n; Domain bounds: 1 <= inij <= 100 for all i != j\n(assert (and (<= 1 in01) (<= in01 100)))\n(assert (and (<= 1 in02) (<= in02 100)))\n(assert (and (<= 1 in03) (<= in03 100)))\n(assert (and (<= 1 in04) (<= in04 100)))\n(assert (and (<= 1 in05) (<= in05 100)))\n(assert (and (<= 1 in06) (<= in06 100)))\n(assert (and (<= 1 in07) (<= in07 100)))\n\n(assert (and (<= 1 in10) (<= in10 100)))\n(assert (and (<= 1 in12) (<= in12 100)))\n(assert (and (<= 1 in13) (<= in13 100)))\n(assert (and (<= 1 in14) (<= in14 100)))\n(assert (and (<= 1 in15) (<= in15 100)))\n(assert (and (<= 1 in16) (<= in16 100)))\n(assert (and (<= 1 in17) (<= in17 100)))\n\n(assert (and (<= 1 in20) (<= in20 100)))\n(assert (and (<= 1 in21) (<= in21 100)))\n(assert (and (<= 1 in23) (<= in23 100)))\n(assert (and (<= 1 in24) (<= in24 100)))\n(assert (and (<= 1 in25) (<= in25 100)))\n(assert (and (<= 1 in26) (<= in26 100)))\n(assert (and (<= 1 in27) (<= in27 100)))\n\n(assert (and (<= 1 in30) (<= in30 100)))\n(assert (and (<= 1 in31) (<= in31 100)))\n(assert (and (<= 1 in32) (<= in32 100)))\n(assert (and (<= 1 in34) (<= in34 100)))\n(assert (and (<= 1 in35) (<= in35 100)))\n(assert (and (<= 1 in36) (<= in36 100)))\n(assert (and (<= 1 in37) (<= in37 100)))\n\n(assert (and (<= 1 in40) (<= in40 100)))\n(assert (and (<= 1 in41) (<= in41 100)))\n(assert (and (<= 1 in42) (<= in42 100)))\n(assert (and (<= 1 in43) (<= in43 100)))\n(assert (and (<= 1 in45) (<= in45 100)))\n(assert (and (<= 1 in46) (<= in46 100)))\n(assert (and (<= 1 in47) (<= in47 100)))\n\n(assert (and (<= 1 in50) (<= in50 100)))\n(assert (and (<= 1 in51) (<= in51 100)))\n(assert (and (<= 1 in52) (<= in52 100)))\n(assert (and (<= 1 in53) (<= in53 100)))\n(assert (and (<= 1 in54) (<= in54 100)))\n(assert (and (<= 1 in56) (<= in56 100)))\n(assert (and (<= 1 in57) (<= in57 100)))\n\n(assert (and (<= 1 in60) (<= in60 100)))\n(assert (and (<= 1 in61) (<= in61 100)))\n(assert (and (<= 1 in62) (<= in62 100)))\n(assert (and (<= 1 in63) (<= in63 100)))\n(assert (and (<= 1 in64) (<= in64 100)))\n(assert (and (<= 1 in65) (<= in65 100)))\n(assert (and (<= 1 in67) (<= in67 100)))\n\n(assert (and (<= 1 in70) (<= in70 100)))\n(assert (and (<= 1 in71) (<= in71 100)))\n(assert (and (<= 1 in72) (<= in72 100)))\n(assert (and (<= 1 in73) (<= in73 100)))\n(assert (and (<= 1 in74) (<= in74 100)))\n(assert (and (<= 1 in75) (<= in75 100)))\n(assert (and (<= 1 in76) (<= in76 100)))\n\n; Row-wise strict increasing order to fix the vertex selection order:\n; After relaxing from k, the next min among unfixed is k+1\n(assert (< in01 in02))\n(assert (< in02 in03))\n(assert (< in03 in04))\n(assert (< in04 in05))\n(assert (< in05 in06))\n(assert (< in06 in07))\n\n(assert (< in12 in13))\n(assert (< in13 in14))\n(assert (< in14 in15))\n(assert (< in15 in16))\n(assert (< in16 in17))\n\n(assert (< in23 in24))\n(assert (< in24 in25))\n(assert (< in25 in26))\n(assert (< in26 in27))\n\n(assert (< in34 in35))\n(assert (< in35 in36))\n(assert (< in36 in37))\n\n(assert (< in45 in46))\n(assert (< in46 in47))\n\n(assert (< in56 in57))\n\n; Strict improvement constraints so every relaxation from the newly fixed\n; vertex decreases all remaining tentative distances:\n; For each k=1..6 and all i>k:\n; in(k-1,k) + in(k,i) < in(k-1,i)\n\n; k = 1\n(assert (< (+ in01 in12) in02))\n(assert (< (+ in01 in13) in03))\n(assert (< (+ in01 in14) in04))\n(assert (< (+ in01 in15) in05))\n(assert (< (+ in01 in16) in06))\n(assert (< (+ in01 in17) in07))\n\n; k = 2\n(assert (< (+ in12 in23) in13))\n(assert (< (+ in12 in24) in14))\n(assert (< (+ in12 in25) in15))\n(assert (< (+ in12 in26) in16))\n(assert (< (+ in12 in27) in17))\n\n; k = 3\n(assert (< (+ in23 in34) in24))\n(assert (< (+ in23 in35) in25))\n(assert (< (+ in23 in36) in26))\n(assert (< (+ in23 in37) in27))\n\n; k = 4\n(assert (< (+ in34 in45) in35))\n(assert (< (+ in34 in46) in36))\n(assert (< (+ in34 in47) in37))\n\n; k = 5\n(assert (< (+ in45 in56) in46))\n(assert (< (+ in45 in57) in47))\n\n; k = 6\n(assert (< (+ in56 in67) in57))\n\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const in31 Int)\n(declare-const in21 Int)\n(declare-const in32 Int)\n(declare-const in02 Int)\n(declare-const in01 Int)\n(declare-const in03 Int)",
      "assertions": "(assert (and (and (and (and (and  ( <  in02 in01)  ( <  in03 in02))  ( <  ( +  in31 in03) in01))  ( <  ( +  in32 in03) in02))  ( <  ( +  in32 in03) ( +  in31 in03)))  ( <  ( +  in21 ( +  in32 in03)) ( +  in31 in03))))",
      "response": "Worst-case time complexity: O(n^2)\n\nReasoning:\n- The algorithm uses an adjacency matrix and the simple O(n^2) Dijkstra variant.\n- For each of n iterations (outer loop), it performs two linear scans over n vertices: one to find the next minimum-distance unfixed vertex and one to relax edges. So total time is n \u00b7 (n + n) = O(n^2). Initialization is O(n).\n\nBelow is an SMT2 constraint set for input size n=4 (V=4) that drives the execution along a \u201cworst-case-style\u201d branch pattern, i.e., maximizes true outcomes of the inner conditionals by:\n- Making initial distances from source 0 strictly decreasing in scan order: in01 > in02 > in03.\n- Ensuring each relaxation strictly improves distances and preserves a decreasing order to trigger multiple true branches during the min-scan in subsequent iterations.\n\nAnswer:\n(set-logic QF_LIA)\n\n; Declare symbolic edge weights D[i][j] for i != j\n(declare-fun in01 () Int)\n(declare-fun in02 () Int)\n(declare-fun in03 () Int)\n(declare-fun in10 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in23 () Int)\n(declare-fun in30 () Int)\n(declare-fun in31 () Int)\n(declare-fun in32 () Int)\n\n; Keep weights non-negative (avoid overflow/negatives; Dijkstra-friendly)\n(assert (and\n  (>= in01 0) (>= in02 0) (>= in03 0)\n  (>= in10 0) (>= in12 0) (>= in13 0)\n  (>= in20 0) (>= in21 0) (>= in23 0)\n  (>= in30 0) (>= in31 0) (>= in32 0)\n))\n\n; Iteration k=0: distances after relaxing from source 0 strictly decrease in scan order\n; dist[1]=in01, dist[2]=in02, dist[3]=in03 with in01 > in02 > in03\n(assert (> in01 in02))\n(assert (> in02 in03))\n\n; Iteration k=1: min becomes vertex 3; relaxing from 3 should improve 1 and 2\n(assert (< (+ in03 in31) in01))  ; new dist[1] = in03 + in31 < old dist[1]\n(assert (< (+ in03 in32) in02))  ; new dist[2] = in03 + in32 < old dist[2]\n\n; Ensure next scan (over vertices 1 then 2) gets two true updates in min-scan:\n; dist[2]' < dist[1]'  => in32 < in31\n(assert (< in32 in31))\n\n; Iteration k=2: min becomes vertex 2; relaxing from 2 should improve 1 again\n; dist[2]' + in21 < dist[1]'  => (in03 + in32) + in21 < (in03 + in31)  => in32 + in21 < in31\n(assert (< (+ in32 in21) in31))\n\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": null,
      "assertions": null,
      "response": "Worst-case time complexity: O(V^2)\n\nExplanation:\n- Initialization is O(V).\n- Each of V iterations:\n  - Finds the minimum unfixed vertex in O(V).\n  - Relaxes edges in O(V).\n- Total O(V^2) time. Space is O(V^2) for the adjacency matrix plus O(V) extra.\n\nSMT2 constraint for n = 2 (to steer execution to the longest path and avoid the min = -1 bug):\n- Ensure the relaxation in the first iteration happens so that dist[1] < INF, which requires D[0][1] < Integer.MAX_VALUE.\n- D[1][0] does not affect control flow for n = 2 but we keep it within 32-bit int bounds.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in01 Int)\n(declare-const in10 Int)\n; Java int bounds\n(assert (and (<= -2147483648 in01) (<= in01 2147483646)))\n(assert (and (<= -2147483648 in10) (<= in10 2147483647)))\n; Ensure the relaxation branch is taken and avoid min = -1 on k=1\n; i.e., 0 + in01 < INF == 2147483647\n(assert (< in01 2147483647))\n(check-sat)\n(get-model)"
    }
  },
  "TowerOfHanoi": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class TowerOfHanoi {\n    public static void solveHanoi(int n, char from, char to, char aux) {\n        if(n == 1) {\n            System.out.println(\"Move disk 1 from \" + from + \" to \" + to);\n            return;\n        }\n        solveHanoi(n - 1, from, aux, to);\n        System.out.println(\"Move disk \" + n + \" from \" + from + \" to \" + to);\n        solveHanoi(n - 1, aux, to, from);\n    }\n    \n    public static void main(String[] args) {\n        int n = Debug.makeSymbolicInteger(\"n\");\n        // Limit the number of disks for practicality.\n        if(n < 1 || n > 5) return;\n        solveHanoi(n, 'A', 'C', 'B');\n    }\n}\n",
    "30": {
      "constants": "(declare-const n Int)",
      "assertions": "(assert (and (and  ( >=  n 1)  ( <=  n 5))  ( =  n 1)))",
      "response": "- Worst-case time complexity:\n  - The Tower of Hanoi procedure does T(n) = 2T(n\u22121) + O(1) moves, so T(n) = 2^n \u2212 1 \u21d2 \u0398(2^n).\n  - In this specific program, since n is restricted to 1..5, any single execution is bounded by a constant (maximum 31 moves), i.e., O(1) under that guard. Conceptually, the algorithm\u2019s complexity remains \u0398(2^n) in n.\n\n- SMT2 constraint for input n = 30:\n  - The program takes the early return branch because n > 5. The path condition is (or (< n 1) (> n 5)). With n fixed to 30, the constraint is satisfiable.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const n Int)\n(assert (= n 30))\n(assert (or (< n 1) (> n 5)))\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const n Int)",
      "assertions": "(assert (and (and  ( >=  n 1)  ( <=  n 5))  ( =  n 1)))",
      "response": "- Worst-case time complexity: O(2^n). Specifically, the number of moves (and recursive calls) is 2^n \u2212 1.\n- Space (call stack) complexity: O(n).\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const n Int)\n(assert (and (>= n 1) (<= n 5) (= n 4)))\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const n Int)",
      "assertions": "(assert (and (and  ( >=  n 1)  ( <=  n 5))  ( =  n 1)))",
      "response": "- Worst-case time complexity: \u0398(2^n). The algorithm makes 2^n \u2212 1 moves and the recursion tree has 2^n \u2212 1 calls, so time is exponential in n.\n\nNote: In the given program, main restricts execution to 1 \u2264 n \u2264 5. For n = 8, the guard causes an immediate return (constant work). The SMT2 constraint below reflects that path (n = 8 satisfies n > 5).\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun n () Int)\n; Choose input n = 8\n(assert (= n 8))\n; Satisfy the program\u2019s guard that causes early return\n(assert (or (< n 1) (> n 5)))\n(check-sat)\n(get-model)"
    },
    "16": {
      "constants": "(declare-const n Int)",
      "assertions": "(assert (and (and  ( >=  n 1)  ( <=  n 5))  ( =  n 1)))",
      "response": "- Worst-case time complexity: O(2^n) (Tower of Hanoi makes 2^n \u2212 1 moves). Note: in this specific program, due to the guard (n < 1 || n > 5), the practical worst case is bounded to n=5 (a constant), but asymptotically the algorithm is exponential.\n\n- For input n = 16, the program immediately returns because n > 5. The path condition is (n > 5). An SMT2 encoding that captures this input and path is:\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const n Int)\n(assert (= n 16))\n(assert (or (< n 1) (> n 5)))\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const n Int)",
      "assertions": "(assert (and (and  ( >=  n 1)  ( <=  n 5))  ( =  n 1)))",
      "response": "- Worst-case time complexity: \u0398(2^n). The algorithm makes 2^n \u2212 1 moves (T(n) = 2T(n\u22121) + 1), hence exponential time.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const n Int)\n(assert (and (>= n 1) (<= n 5)))\n(assert (= n 2))\n(check-sat)\n(get-model)"
    }
  },
  "BinarySearch": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class BinarySearch {\n    public static int binarySearch(int[] arr, int target) {\n        int low = 0;\n        int high = arr.length - 1;\n        while(low <= high) {\n            int mid = (low + high) / 2;\n            if(arr[mid] == target) {\n                return mid;\n            } else if(arr[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return -1;\n    }\n    \n    public static void main(String[] args) {\n        final int N = Integer.parseInt(args[0]);\n        int[] arr = new int[N];\n        for(int i = 0; i < N; i++){\n            arr[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n        \n        int target = Debug.makeSymbolicInteger(\"t\");\n        binarySearch(arr, target);\n    }\n}\n",
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const t Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (not ( = in3 t))  ( <  in3 t)) (not ( = in5 t)))  ( <  in5 t)) (not ( = in6 t)))  ( <  in6 t)) (not ( = in7 t)))  ( <  in7 t)))",
      "response": "- Worst-case time complexity:\n  - binarySearch method: O(log n)\n  - Whole program (including array initialization in main): O(n) + O(log n) = O(n)\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun t () Int)\n; Path for n=8 (indices 0..7):\n; mids visited: 3 -> 5 -> 6 -> 7\n; Force the \"<\" branch each time and avoid equality to maximize iterations and end with not found\n(assert (< in3 t))\n(assert (< in5 t))\n(assert (< in6 t))\n(assert (< in7 t))\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const t Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (not ( = in1 t))  ( <  in1 t)) (not ( = in2 t)))  ( <  in2 t)) (not ( = in3 t)))  ( <  in3 t)))",
      "response": "- Worst-case time complexity: O(log n)\n  - Each loop iteration halves the search interval; in the worst case you perform about floor(log2(n)) + 1 iterations.\n\nSMT2 constraints for n = 4 (variables: in0, in1, in2, in3, t). A worst-case path (3 iterations) that ends with \u201cnot found\u201d is obtained by forcing the search to always go to the larger remaining half and never hit equality:\n- Iteration 1 (mid=1): in1 < t \u2192 go right to [2..3]\n- Iteration 2 (mid=2): in2 < t \u2192 go right to [3..3]\n- Iteration 3 (mid=3): in3 < t \u2192 low becomes 4, loop exits, returns -1\n\nComplete SMT2 script:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun t () Int)\n(assert (and (< in1 t) (< in2 t) (< in3 t)))\n(check-sat)\n(get-model)\n\nAnswer: (assert (and (< in1 t) (< in2 t) (< in3 t)))"
    },
    "30": {
      "constants": "(declare-const t Int)\n(declare-const in22 Int)\n(declare-const in26 Int)\n(declare-const in14 Int)\n(declare-const in28 Int)\n(declare-const in29 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (not ( = in14 t))  ( <  in14 t)) (not ( = in22 t)))  ( <  in22 t)) (not ( = in26 t)))  ( <  in26 t)) (not ( = in28 t)))  ( <  in28 t)) (not ( = in29 t)))  ( <  in29 t)))",
      "response": "- Worst-case time complexity of binarySearch: O(log n).\n- Overall worst-case time complexity of the whole program (including creating N symbolic integers): O(n) + O(log n) = O(n).\n\nAnswer:\n(set-logic QF_LIA)\n\n; Declarations for n = 30\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n(declare-fun in18 () Int)\n(declare-fun in19 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in22 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n(declare-fun in28 () Int)\n(declare-fun in29 () Int)\n(declare-fun t () Int)\n\n; Array sorted strictly increasing (sufficient for binary search semantics)\n(assert (< in0 in1))\n(assert (< in1 in2))\n(assert (< in2 in3))\n(assert (< in3 in4))\n(assert (< in4 in5))\n(assert (< in5 in6))\n(assert (< in6 in7))\n(assert (< in7 in8))\n(assert (< in8 in9))\n(assert (< in9 in10))\n(assert (< in10 in11))\n(assert (< in11 in12))\n(assert (< in12 in13))\n(assert (< in13 in14))\n(assert (< in14 in15))\n(assert (< in15 in16))\n(assert (< in16 in17))\n(assert (< in17 in18))\n(assert (< in18 in19))\n(assert (< in19 in20))\n(assert (< in20 in21))\n(assert (< in21 in22))\n(assert (< in22 in23))\n(assert (< in23 in24))\n(assert (< in24 in25))\n(assert (< in25 in26))\n(assert (< in26 in27))\n(assert (< in27 in28))\n(assert (< in28 in29))\n\n; Target not present (forces worst-case search depth and return -1)\n(assert (distinct t in0 in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14 in15 in16 in17 in18 in19 in20 in21 in22 in23 in24 in25 in26 in27 in28 in29))\n\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const t Int)\n(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and (and (and (not ( = in0 t))  ( <  in0 t)) (not ( = in1 t)))  ( <  in1 t)))",
      "response": "- Worst-case time complexity (concrete execution): O(log N) comparisons/iterations and O(1) extra space. The loop halves the search range each iteration.\n\n- SMT2 constraint for input size n = 2 (arr = [in0, in1], target t), driving the worst-case path (two iterations) and not finding the target (assuming ascending order for semantic correctness of binary search):\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun t () Int)\n; array of size 2 is sorted ascending\n(assert (<= in0 in1))\n; 1st iteration: mid=0, arr[0] < t  => low becomes 1\n(assert (< in0 t))\n; 2nd iteration: mid=1, arr[1] < t  => low becomes 2, loop exits with -1\n(assert (< in1 t))\n(check-sat)\n(get-model)"
    },
    "16": {
      "constants": "(declare-const in7 Int)\n(declare-const t Int)\n(declare-const in11 Int)\n(declare-const in13 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (not ( = in7 t))  ( <  in7 t)) (not ( = in11 t)))  ( <  in11 t)) (not ( = in13 t)))  ( <  in13 t)) (not ( = in14 t)))  ( <  in14 t)) (not ( = in15 t)))  ( <  in15 t)))",
      "response": "- Worst-case time complexity:\n  - binarySearch alone: O(log N) comparisons/iterations. For N=16, at most 5 iterations.\n  - Whole program (including building the symbolic array): O(N) due to the initialization loop, i.e., O(N + log N) = O(N).\n\n- SMT2 constraint for n = 16 that forces the worst-case path (not found after 5 iterations), choosing the branch arr[mid] < t at each step (mids: 7, 11, 13, 14, 15):\n\nAnswer:\n(set-logic QF_LIA)\n; n = 16\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun t () Int)\n; Force the right-branch each time to get 5 iterations and \"not found\"\n(assert (< in7 t))\n(assert (< in11 t))\n(assert (< in13 t))\n(assert (< in14 t))\n(assert (< in15 t))\n(check-sat)"
    }
  },
  "ArrayTwister": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class ArrayTwister {\n    public static int[] twist(int[] nums) {\n        int[] result = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            int val = nums[i];\n            if (val % 2 == 0) {\n                result[i] = val / 2;\n            } else if (val % 3 == 0) {\n                result[i] = val * 2;\n            } else {\n                result[i] = val + 1;\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int N = Integer.parseInt(args[0]);\n        int[] input = new int[N];\n        for (int i = 0; i < N; i++) {\n            input[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n        twist(input);\n    }\n}\n",
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and (and (and (not ( = ( mod  in0 2) 0))  ( =  ( mod  in0 3) 0)) (not ( = ( mod  in1 2) 0)))  ( =  ( mod  in1 3) 0)))",
      "response": "- Worst-case time complexity: O(n) time and O(n) extra space, where n = nums.length. The loop does constant work per element.\n\nNote on SMT encoding: Java\u2019s % and / on ints truncate toward zero and the remainder has the sign of the dividend. SMT-LIB Int div/mod use Euclidean semantics for positive divisors. To match Java for all integers (including negatives), the SMT below defines Java-like division/remainder for divisors 2 and 3 and uses them.\n\nAnswer: (set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun out0 () Int)\n(declare-fun out1 () Int)\n; Java-like division (trunc toward 0) and remainder for positive divisors 2 and 3\n(define-fun jdiv2 ((x Int)) Int (ite (>= x 0) (div x 2) (- (div (- x) 2))))\n(define-fun jrem2 ((x Int)) Int (- x (* 2 (jdiv2 x))))\n(define-fun jdiv3 ((x Int)) Int (ite (>= x 0) (div x 3) (- (div (- x) 3))))\n(define-fun jrem3 ((x Int)) Int (- x (* 3 (jdiv3 x))))\n; twist semantics for n = 2\n(assert (= out0 (ite (= (jrem2 in0) 0)\n                     (jdiv2 in0)\n                     (ite (= (jrem3 in0) 0) (* 2 in0) (+ in0 1)))))\n(assert (= out1 (ite (= (jrem2 in1) 0)\n                     (jdiv2 in1)\n                     (ite (= (jrem3 in1) 0) (* 2 in1) (+ in1 1)))))"
    },
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = ( mod  in0 2) 0))  ( =  ( mod  in0 3) 0)) (not ( = ( mod  in1 2) 0)))  ( =  ( mod  in1 3) 0)) (not ( = ( mod  in2 2) 0)))  ( =  ( mod  in2 3) 0)) (not ( = ( mod  in3 2) 0)))  ( =  ( mod  in3 3) 0)) (not ( = ( mod  in4 2) 0)))  ( =  ( mod  in4 3) 0)) (not ( = ( mod  in5 2) 0)))  ( =  ( mod  in5 3) 0)) (not ( = ( mod  in6 2) 0)))  ( =  ( mod  in6 3) 0)) (not ( = ( mod  in7 2) 0)))  ( =  ( mod  in7 3) 0)) (not ( = ( mod  in8 2) 0)))  ( =  ( mod  in8 3) 0)) (not ( = ( mod  in9 2) 0)))  ( =  ( mod  in9 3) 0)) (not ( = ( mod  in10 2) 0)))  ( =  ( mod  in10 3) 0)) (not ( = ( mod  in11 2) 0)))  ( =  ( mod  in11 3) 0)) (not ( = ( mod  in12 2) 0)))  ( =  ( mod  in12 3) 0)) (not ( = ( mod  in13 2) 0)))  ( =  ( mod  in13 3) 0)) (not ( = ( mod  in14 2) 0)))  ( =  ( mod  in14 3) 0)) (not ( = ( mod  in15 2) 0)))  ( =  ( mod  in15 3) 0)))",
      "response": "Worst-case time complexity: O(n), where n is the length of the input array. The algorithm makes a single pass over the array and performs a constant amount of work per element.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n\n(declare-fun out0 () Int)\n(declare-fun out1 () Int)\n(declare-fun out2 () Int)\n(declare-fun out3 () Int)\n(declare-fun out4 () Int)\n(declare-fun out5 () Int)\n(declare-fun out6 () Int)\n(declare-fun out7 () Int)\n(declare-fun out8 () Int)\n(declare-fun out9 () Int)\n(declare-fun out10 () Int)\n(declare-fun out11 () Int)\n(declare-fun out12 () Int)\n(declare-fun out13 () Int)\n(declare-fun out14 () Int)\n(declare-fun out15 () Int)\n\n(assert (= out0  (ite (= (mod in0  2) 0) (div in0  2) (ite (= (mod in0  3) 0) (* in0  2) (+ in0  1)))))\n(assert (= out1  (ite (= (mod in1  2) 0) (div in1  2) (ite (= (mod in1  3) 0) (* in1  2) (+ in1  1)))))\n(assert (= out2  (ite (= (mod in2  2) 0) (div in2  2) (ite (= (mod in2  3) 0) (* in2  2) (+ in2  1)))))\n(assert (= out3  (ite (= (mod in3  2) 0) (div in3  2) (ite (= (mod in3  3) 0) (* in3  2) (+ in3  1)))))\n(assert (= out4  (ite (= (mod in4  2) 0) (div in4  2) (ite (= (mod in4  3) 0) (* in4  2) (+ in4  1)))))\n(assert (= out5  (ite (= (mod in5  2) 0) (div in5  2) (ite (= (mod in5  3) 0) (* in5  2) (+ in5  1)))))\n(assert (= out6  (ite (= (mod in6  2) 0) (div in6  2) (ite (= (mod in6  3) 0) (* in6  2) (+ in6  1)))))\n(assert (= out7  (ite (= (mod in7  2) 0) (div in7  2) (ite (= (mod in7  3) 0) (* in7  2) (+ in7  1)))))\n(assert (= out8  (ite (= (mod in8  2) 0) (div in8  2) (ite (= (mod in8  3) 0) (* in8  2) (+ in8  1)))))\n(assert (= out9  (ite (= (mod in9  2) 0) (div in9  2) (ite (= (mod in9  3) 0) (* in9  2) (+ in9  1)))))\n(assert (= out10 (ite (= (mod in10 2) 0) (div in10 2) (ite (= (mod in10 3) 0) (* in10 2) (+ in10 1)))))\n(assert (= out11 (ite (= (mod in11 2) 0) (div in11 2) (ite (= (mod in11 3) 0) (* in11 2) (+ in11 1)))))\n(assert (= out12 (ite (= (mod in12 2) 0) (div in12 2) (ite (= (mod in12 3) 0) (* in12 2) (+ in12 1)))))\n(assert (= out13 (ite (= (mod in13 2) 0) (div in13 2) (ite (= (mod in13 3) 0) (* in13 2) (+ in13 1)))))\n(assert (= out14 (ite (= (mod in14 2) 0) (div in14 2) (ite (= (mod in14 3) 0) (* in14 2) (+ in14 1)))))\n(assert (= out15 (ite (= (mod in15 2) 0) (div in15 2) (ite (= (mod in15 3) 0) (* in15 2) (+ in15 1)))))"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = ( mod  in0 2) 0))  ( =  ( mod  in0 3) 0)) (not ( = ( mod  in1 2) 0)))  ( =  ( mod  in1 3) 0)) (not ( = ( mod  in2 2) 0)))  ( =  ( mod  in2 3) 0)) (not ( = ( mod  in3 2) 0)))  ( =  ( mod  in3 3) 0)) (not ( = ( mod  in4 2) 0)))  ( =  ( mod  in4 3) 0)) (not ( = ( mod  in5 2) 0)))  ( =  ( mod  in5 3) 0)) (not ( = ( mod  in6 2) 0)))  ( =  ( mod  in6 3) 0)) (not ( = ( mod  in7 2) 0)))  ( =  ( mod  in7 3) 0)))",
      "response": "Worst-case time complexity: O(N) time and O(N) additional space.\n- Reason: twist iterates once over the array, performing constant-time arithmetic and conditional checks per element. main also initializes N symbolic integers and calls twist, so overall linear in N.\n\nSMT2 constraint for input size n = 8:\n- The following models the piecewise transformation per element. It uses a helper jdiv2 to emulate Java\u2019s integer division by 2 (truncates toward zero), and mod to check divisibility.\n\nAnswer:\n(set-logic QF_LIA)\n(set-option :produce-models true)\n\n; Inputs\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n\n; Outputs\n(declare-fun out0 () Int)\n(declare-fun out1 () Int)\n(declare-fun out2 () Int)\n(declare-fun out3 () Int)\n(declare-fun out4 () Int)\n(declare-fun out5 () Int)\n(declare-fun out6 () Int)\n(declare-fun out7 () Int)\n\n; Java-style division by 2 (truncate toward zero)\n(define-fun jdiv2 ((x Int)) Int\n  (ite (>= x 0) (div x 2) (- (div (- x) 2))))\n\n; Element-wise twist semantics\n(assert (= out0 (ite (= (mod in0 2) 0)\n                     (jdiv2 in0)\n                     (ite (= (mod in0 3) 0)\n                          (* in0 2)\n                          (+ in0 1))))))\n(assert (= out1 (ite (= (mod in1 2) 0)\n                     (jdiv2 in1)\n                     (ite (= (mod in1 3) 0)\n                          (* in1 2)\n                          (+ in1 1))))))\n(assert (= out2 (ite (= (mod in2 2) 0)\n                     (jdiv2 in2)\n                     (ite (= (mod in2 3) 0)\n                          (* in2 2)\n                          (+ in2 1))))))\n(assert (= out3 (ite (= (mod in3 2) 0)\n                     (jdiv2 in3)\n                     (ite (= (mod in3 3) 0)\n                          (* in3 2)\n                          (+ in3 1))))))\n(assert (= out4 (ite (= (mod in4 2) 0)\n                     (jdiv2 in4)\n                     (ite (= (mod in4 3) 0)\n                          (* in4 2)\n                          (+ in4 1))))))\n(assert (= out5 (ite (= (mod in5 2) 0)\n                     (jdiv2 in5)\n                     (ite (= (mod in5 3) 0)\n                          (* in5 2)\n                          (+ in5 1))))))\n(assert (= out6 (ite (= (mod in6 2) 0)\n                     (jdiv2 in6)\n                     (ite (= (mod in6 3) 0)\n                          (* in6 2)\n                          (+ in6 1))))))\n(assert (= out7 (ite (= (mod in7 2) 0)\n                     (jdiv2 in7)\n                     (ite (= (mod in7 3) 0)\n                          (* in7 2)\n                          (+ in7 1))))))"
    },
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (not ( = ( mod  in0 2) 0))  ( =  ( mod  in0 3) 0)) (not ( = ( mod  in1 2) 0)))  ( =  ( mod  in1 3) 0)) (not ( = ( mod  in2 2) 0)))  ( =  ( mod  in2 3) 0)) (not ( = ( mod  in3 2) 0)))  ( =  ( mod  in3 3) 0)))",
      "response": "Worst-case time complexity: O(n), where n is the array length. The loop processes each element once with constant-time operations per element.\n\nAnswer:\n(set-logic QF_NIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun out0 () Int)\n(declare-fun out1 () Int)\n(declare-fun out2 () Int)\n(declare-fun out3 () Int)\n(assert\n  (and\n    (= out0 (ite (= (mod in0 2) 0)\n                 (div in0 2)\n                 (ite (= (mod in0 3) 0) (* 2 in0) (+ in0 1))))\n    (= out1 (ite (= (mod in1 2) 0)\n                 (div in1 2)\n                 (ite (= (mod in1 3) 0) (* 2 in1) (+ in1 1))))\n    (= out2 (ite (= (mod in2 2) 0)\n                 (div in2 2)\n                 (ite (= (mod in2 3) 0) (* 2 in2) (+ in2 1))))\n    (= out3 (ite (= (mod in3 2) 0)\n                 (div in3 2)\n                 (ite (= (mod in3 3) 0) (* 2 in3) (+ in3 1))))\n  )\n)"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = ( mod  in0 2) 0))  ( =  ( mod  in0 3) 0)) (not ( = ( mod  in1 2) 0)))  ( =  ( mod  in1 3) 0)) (not ( = ( mod  in2 2) 0)))  ( =  ( mod  in2 3) 0)) (not ( = ( mod  in3 2) 0)))  ( =  ( mod  in3 3) 0)) (not ( = ( mod  in4 2) 0)))  ( =  ( mod  in4 3) 0)) (not ( = ( mod  in5 2) 0)))  ( =  ( mod  in5 3) 0)) (not ( = ( mod  in6 2) 0)))  ( =  ( mod  in6 3) 0)) (not ( = ( mod  in7 2) 0)))  ( =  ( mod  in7 3) 0)) (not ( = ( mod  in8 2) 0)))  ( =  ( mod  in8 3) 0)) (not ( = ( mod  in9 2) 0)))  ( =  ( mod  in9 3) 0)) (not ( = ( mod  in10 2) 0)))  ( =  ( mod  in10 3) 0)) (not ( = ( mod  in11 2) 0)))  ( =  ( mod  in11 3) 0)) (not ( = ( mod  in12 2) 0)))  ( =  ( mod  in12 3) 0)) (not ( = ( mod  in13 2) 0)))  ( =  ( mod  in13 3) 0)) (not ( = ( mod  in14 2) 0)))  ( =  ( mod  in14 3) 0)) (not ( = ( mod  in15 2) 0)))  ( =  ( mod  in15 3) 0)) (not ( = ( mod  in16 2) 0)))  ( =  ( mod  in16 3) 0)) (not ( = ( mod  in17 2) 0)))  ( =  ( mod  in17 3) 0)) (not ( = ( mod  in18 2) 0)))  ( =  ( mod  in18 3) 0)) (not ( = ( mod  in19 2) 0)))  ( =  ( mod  in19 3) 0)) (not ( = ( mod  in20 2) 0)))  ( =  ( mod  in20 3) 0)) (not ( = ( mod  in21 2) 0)))  ( =  ( mod  in21 3) 0)) (not ( = ( mod  in22 2) 0)))  ( =  ( mod  in22 3) 0)) (not ( = ( mod  in23 2) 0)))  ( =  ( mod  in23 3) 0)) (not ( = ( mod  in24 2) 0)))  ( =  ( mod  in24 3) 0)) (not ( = ( mod  in25 2) 0)))  ( =  ( mod  in25 3) 0)) (not ( = ( mod  in26 2) 0)))  ( =  ( mod  in26 3) 0)) (not ( = ( mod  in27 2) 0)))  ( =  ( mod  in27 3) 0)) (not ( = ( mod  in28 2) 0)))  ( =  ( mod  in28 3) 0)) (not ( = ( mod  in29 2) 0)))  ( =  ( mod  in29 3) 0)))",
      "response": "- Worst-case time complexity: O(N), where N is the size of the input array. The program performs a single pass to create N symbolic integers and a single pass through the array in twist, each with constant-time work per element.\n\nAnswer:\n(set-logic QF_NIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n(declare-fun in18 () Int)\n(declare-fun in19 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in22 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n(declare-fun in28 () Int)\n(declare-fun in29 () Int)\n(declare-fun out0 () Int)\n(declare-fun out1 () Int)\n(declare-fun out2 () Int)\n(declare-fun out3 () Int)\n(declare-fun out4 () Int)\n(declare-fun out5 () Int)\n(declare-fun out6 () Int)\n(declare-fun out7 () Int)\n(declare-fun out8 () Int)\n(declare-fun out9 () Int)\n(declare-fun out10 () Int)\n(declare-fun out11 () Int)\n(declare-fun out12 () Int)\n(declare-fun out13 () Int)\n(declare-fun out14 () Int)\n(declare-fun out15 () Int)\n(declare-fun out16 () Int)\n(declare-fun out17 () Int)\n(declare-fun out18 () Int)\n(declare-fun out19 () Int)\n(declare-fun out20 () Int)\n(declare-fun out21 () Int)\n(declare-fun out22 () Int)\n(declare-fun out23 () Int)\n(declare-fun out24 () Int)\n(declare-fun out25 () Int)\n(declare-fun out26 () Int)\n(declare-fun out27 () Int)\n(declare-fun out28 () Int)\n(declare-fun out29 () Int)\n(assert (= out0  (ite (= (mod in0  2) 0) (div in0  2) (ite (= (mod in0  3) 0) (* 2 in0)  (+ in0 1)))))\n(assert (= out1  (ite (= (mod in1  2) 0) (div in1  2) (ite (= (mod in1  3) 0) (* 2 in1)  (+ in1 1)))))\n(assert (= out2  (ite (= (mod in2  2) 0) (div in2  2) (ite (= (mod in2  3) 0) (* 2 in2)  (+ in2 1)))))\n(assert (= out3  (ite (= (mod in3  2) 0) (div in3  2) (ite (= (mod in3  3) 0) (* 2 in3)  (+ in3 1)))))\n(assert (= out4  (ite (= (mod in4  2) 0) (div in4  2) (ite (= (mod in4  3) 0) (* 2 in4)  (+ in4 1)))))\n(assert (= out5  (ite (= (mod in5  2) 0) (div in5  2) (ite (= (mod in5  3) 0) (* 2 in5)  (+ in5 1)))))\n(assert (= out6  (ite (= (mod in6  2) 0) (div in6  2) (ite (= (mod in6  3) 0) (* 2 in6)  (+ in6 1)))))\n(assert (= out7  (ite (= (mod in7  2) 0) (div in7  2) (ite (= (mod in7  3) 0) (* 2 in7)  (+ in7 1)))))\n(assert (= out8  (ite (= (mod in8  2) 0) (div in8  2) (ite (= (mod in8  3) 0) (* 2 in8)  (+ in8 1)))))\n(assert (= out9  (ite (= (mod in9  2) 0) (div in9  2) (ite (= (mod in9  3) 0) (* 2 in9)  (+ in9 1)))))\n(assert (= out10 (ite (= (mod in10 2) 0) (div in10 2) (ite (= (mod in10 3) 0) (* 2 in10) (+ in10 1)))))\n(assert (= out11 (ite (= (mod in11 2) 0) (div in11 2) (ite (= (mod in11 3) 0) (* 2 in11) (+ in11 1)))))\n(assert (= out12 (ite (= (mod in12 2) 0) (div in12 2) (ite (= (mod in12 3) 0) (* 2 in12) (+ in12 1)))))\n(assert (= out13 (ite (= (mod in13 2) 0) (div in13 2) (ite (= (mod in13 3) 0) (* 2 in13) (+ in13 1)))))\n(assert (= out14 (ite (= (mod in14 2) 0) (div in14 2) (ite (= (mod in14 3) 0) (* 2 in14) (+ in14 1)))))\n(assert (= out15 (ite (= (mod in15 2) 0) (div in15 2) (ite (= (mod in15 3) 0) (* 2 in15) (+ in15 1)))))\n(assert (= out16 (ite (= (mod in16 2) 0) (div in16 2) (ite (= (mod in16 3) 0) (* 2 in16) (+ in16 1)))))\n(assert (= out17 (ite (= (mod in17 2) 0) (div in17 2) (ite (= (mod in17 3) 0) (* 2 in17) (+ in17 1)))))\n(assert (= out18 (ite (= (mod in18 2) 0) (div in18 2) (ite (= (mod in18 3) 0) (* 2 in18) (+ in18 1)))))\n(assert (= out19 (ite (= (mod in19 2) 0) (div in19 2) (ite (= (mod in19 3) 0) (* 2 in19) (+ in19 1)))))\n(assert (= out20 (ite (= (mod in20 2) 0) (div in20 2) (ite (= (mod in20 3) 0) (* 2 in20) (+ in20 1)))))\n(assert (= out21 (ite (= (mod in21 2) 0) (div in21 2) (ite (= (mod in21 3) 0) (* 2 in21) (+ in21 1)))))\n(assert (= out22 (ite (= (mod in22 2) 0) (div in22 2) (ite (= (mod in22 3) 0) (* 2 in22) (+ in22 1)))))\n(assert (= out23 (ite (= (mod in23 2) 0) (div in23 2) (ite (= (mod in23 3) 0) (* 2 in23) (+ in23 1)))))\n(assert (= out24 (ite (= (mod in24 2) 0) (div in24 2) (ite (= (mod in24 3) 0) (* 2 in24) (+ in24 1)))))\n(assert (= out25 (ite (= (mod in25 2) 0) (div in25 2) (ite (= (mod in25 3) 0) (* 2 in25) (+ in25 1)))))\n(assert (= out26 (ite (= (mod in26 2) 0) (div in26 2) (ite (= (mod in26 3) 0) (* 2 in26) (+ in26 1)))))\n(assert (= out27 (ite (= (mod in27 2) 0) (div in27 2) (ite (= (mod in27 3) 0) (* 2 in27) (+ in27 1)))))\n(assert (= out28 (ite (= (mod in28 2) 0) (div in28 2) (ite (= (mod in28 3) 0) (* 2 in28) (+ in28 1)))))\n(assert (= out29 (ite (= (mod in29 2) 0) (div in29 2) (ite (= (mod in29 3) 0) (* 2 in29) (+ in29 1)))))"
    }
  },
  "BubbleSort": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class BubbleSort {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        boolean swapped;\n        for(int i = 0; i < n - 1; i++) {\n            swapped = false;\n            for(int j = 0; j < n - 1 - i; j++) {\n                if(arr[j] > arr[j+1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                    swapped = true;\n                }\n            }\n            if(!swapped) break;\n        }\n    }\n    \n    public static void main(String[] args) {\n        final int N = Integer.parseInt(args[0]);\n        int[] arr = new int[N];\n        for(int i = 0; i < N; i++){\n            arr[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n        \n        bubbleSort(arr);\n    }\n}\n",
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert  ( >  in0 in1))",
      "response": "- Worst-case time complexity: O(n^2). This occurs when the array is in strictly descending order, causing swaps on every inner-loop comparison and preventing the early-exit optimization from triggering.\n\n- For input size n = 2, the worst case occurs when in0 > in1 (strictly descending). One valid SMT-LIB2 encoding (using Integers) is:\n\nAnswer:\n(declare-const in0 Int)\n(declare-const in1 Int)\n(assert (> in0 in1))\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and  ( >  in0 in1)  ( >  in0 in2))  ( >  in0 in3))  ( >  in1 in2))  ( >  in1 in3))  ( >  in2 in3)))",
      "response": "- Worst-case time complexity: O(n^2). The early-exit optimization doesn\u2019t change the worst-case (e.g., reverse-sorted input triggers maximum comparisons and swaps).\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(assert (> in0 in1))\n(assert (> in1 in2))\n(assert (> in2 in3))\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >  in0 in1)  ( >  in0 in2))  ( >  in0 in3))  ( >  in0 in4))  ( >  in0 in5))  ( >  in0 in6))  ( >  in0 in7))  ( >  in1 in2))  ( >  in1 in3))  ( >  in1 in4))  ( >  in1 in5))  ( >  in1 in6))  ( >  in1 in7))  ( >  in2 in3))  ( >  in2 in4))  ( >  in2 in5))  ( >  in2 in6))  ( >  in2 in7))  ( >  in3 in4))  ( >  in3 in5))  ( >  in3 in6))  ( >  in3 in7))  ( >  in4 in5))  ( >  in4 in6))  ( >  in4 in7))  ( >  in5 in6))  ( >  in5 in7))  ( >  in6 in7)))",
      "response": "- Worst-case time complexity: O(n^2) time (\u0398(n^2) comparisons; bubble sort with early-exit still does n(n\u22121)/2 comparisons in the worst case, e.g., when the input is strictly decreasing).\n\nTo force the worst-case path for n = 8 (no early break and maximum swaps), the inputs should be strictly decreasing. An SMT-LIB2 encoding:\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(assert (> in0 in1))\n(assert (> in1 in2))\n(assert (> in2 in3))\n(assert (> in3 in4))\n(assert (> in4 in5))\n(assert (> in5 in6))\n(assert (> in6 in7))\n(check-sat)\n(get-model)"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >  in0 in1)  ( >  in0 in2))  ( >  in0 in3))  ( >  in0 in4))  ( >  in0 in5))  ( >  in0 in6))  ( >  in0 in7))  ( >  in0 in8))  ( >  in0 in9))  ( >  in0 in10))  ( >  in0 in11))  ( >  in0 in12))  ( >  in0 in13))  ( >  in0 in14))  ( >  in0 in15))  ( >  in0 in16))  ( >  in0 in17))  ( >  in0 in18))  ( >  in0 in19))  ( >  in0 in20))  ( >  in0 in21))  ( >  in0 in22))  ( >  in0 in23))  ( >  in0 in24))  ( >  in0 in25))  ( >  in0 in26))  ( >  in0 in27))  ( >  in0 in28))  ( >  in0 in29))  ( >  in1 in2))  ( >  in1 in3))  ( >  in1 in4))  ( >  in1 in5))  ( >  in1 in6))  ( >  in1 in7))  ( >  in1 in8))  ( >  in1 in9))  ( >  in1 in10))  ( >  in1 in11))  ( >  in1 in12))  ( >  in1 in13))  ( >  in1 in14))  ( >  in1 in15))  ( >  in1 in16))  ( >  in1 in17))  ( >  in1 in18))  ( >  in1 in19))  ( >  in1 in20))  ( >  in1 in21))  ( >  in1 in22))  ( >  in1 in23))  ( >  in1 in24))  ( >  in1 in25))  ( >  in1 in26))  ( >  in1 in27))  ( >  in1 in28))  ( >  in1 in29))  ( >  in2 in3))  ( >  in2 in4))  ( >  in2 in5))  ( >  in2 in6))  ( >  in2 in7))  ( >  in2 in8))  ( >  in2 in9))  ( >  in2 in10))  ( >  in2 in11))  ( >  in2 in12))  ( >  in2 in13))  ( >  in2 in14))  ( >  in2 in15))  ( >  in2 in16))  ( >  in2 in17))  ( >  in2 in18))  ( >  in2 in19))  ( >  in2 in20))  ( >  in2 in21))  ( >  in2 in22))  ( >  in2 in23))  ( >  in2 in24))  ( >  in2 in25))  ( >  in2 in26))  ( >  in2 in27))  ( >  in2 in28))  ( >  in2 in29))  ( >  in3 in4))  ( >  in3 in5))  ( >  in3 in6))  ( >  in3 in7))  ( >  in3 in8))  ( >  in3 in9))  ( >  in3 in10))  ( >  in3 in11))  ( >  in3 in12))  ( >  in3 in13))  ( >  in3 in14))  ( >  in3 in15))  ( >  in3 in16))  ( >  in3 in17))  ( >  in3 in18))  ( >  in3 in19))  ( >  in3 in20))  ( >  in3 in21))  ( >  in3 in22))  ( >  in3 in23))  ( >  in3 in24))  ( >  in3 in25))  ( >  in3 in26))  ( >  in3 in27))  ( >  in3 in28))  ( >  in3 in29))  ( >  in4 in5))  ( >  in4 in6))  ( >  in4 in7))  ( >  in4 in8))  ( >  in4 in9))  ( >  in4 in10))  ( >  in4 in11))  ( >  in4 in12))  ( >  in4 in13))  ( >  in4 in14))  ( >  in4 in15))  ( >  in4 in16))  ( >  in4 in17))  ( >  in4 in18))  ( >  in4 in19))  ( >  in4 in20))  ( >  in4 in21))  ( >  in4 in22))  ( >  in4 in23))  ( >  in4 in24))  ( >  in4 in25))  ( >  in4 in26))  ( >  in4 in27))  ( >  in4 in28))  ( >  in4 in29))  ( >  in5 in6))  ( >  in5 in7))  ( >  in5 in8))  ( >  in5 in9))  ( >  in5 in10))  ( >  in5 in11))  ( >  in5 in12))  ( >  in5 in13))  ( >  in5 in14))  ( >  in5 in15))  ( >  in5 in16))  ( >  in5 in17))  ( >  in5 in18))  ( >  in5 in19))  ( >  in5 in20))  ( >  in5 in21))  ( >  in5 in22))  ( >  in5 in23))  ( >  in5 in24))  ( >  in5 in25))  ( >  in5 in26))  ( >  in5 in27))  ( >  in5 in28))  ( >  in5 in29))  ( >  in6 in7))  ( >  in6 in8))  ( >  in6 in9))  ( >  in6 in10))  ( >  in6 in11))  ( >  in6 in12))  ( >  in6 in13))  ( >  in6 in14))  ( >  in6 in15))  ( >  in6 in16))  ( >  in6 in17))  ( >  in6 in18))  ( >  in6 in19))  ( >  in6 in20))  ( >  in6 in21))  ( >  in6 in22))  ( >  in6 in23))  ( >  in6 in24))  ( >  in6 in25))  ( >  in6 in26))  ( >  in6 in27))  ( >  in6 in28))  ( >  in6 in29))  ( >  in7 in8))  ( >  in7 in9))  ( >  in7 in10))  ( >  in7 in11))  ( >  in7 in12))  ( >  in7 in13))  ( >  in7 in14))  ( >  in7 in15))  ( >  in7 in16))  ( >  in7 in17))  ( >  in7 in18))  ( >  in7 in19))  ( >  in7 in20))  ( >  in7 in21))  ( >  in7 in22))  ( >  in7 in23))  ( >  in7 in24))  ( >  in7 in25))  ( >  in7 in26))  ( >  in7 in27))  ( >  in7 in28))  ( >  in7 in29))  ( >  in8 in9))  ( >  in8 in10))  ( >  in8 in11))  ( >  in8 in12))  ( >  in8 in13))  ( >  in8 in14))  ( >  in8 in15))  ( >  in8 in16))  ( >  in8 in17))  ( >  in8 in18))  ( >  in8 in19))  ( >  in8 in20))  ( >  in8 in21))  ( >  in8 in22))  ( >  in8 in23))  ( >  in8 in24))  ( >  in8 in25))  ( >  in8 in26))  ( >  in8 in27))  ( >  in8 in28))  ( >  in8 in29))  ( >  in9 in10))  ( >  in9 in11))  ( >  in9 in12))  ( >  in9 in13))  ( >  in9 in14))  ( >  in9 in15))  ( >  in9 in16))  ( >  in9 in17))  ( >  in9 in18))  ( >  in9 in19))  ( >  in9 in20))  ( >  in9 in21))  ( >  in9 in22))  ( >  in9 in23))  ( >  in9 in24))  ( >  in9 in25))  ( >  in9 in26))  ( >  in9 in27))  ( >  in9 in28))  ( >  in9 in29))  ( >  in10 in11))  ( >  in10 in12))  ( >  in10 in13))  ( >  in10 in14))  ( >  in10 in15))  ( >  in10 in16))  ( >  in10 in17))  ( >  in10 in18))  ( >  in10 in19))  ( >  in10 in20))  ( >  in10 in21))  ( >  in10 in22))  ( >  in10 in23))  ( >  in10 in24))  ( >  in10 in25))  ( >  in10 in26))  ( >  in10 in27))  ( >  in10 in28))  ( >  in10 in29))  ( >  in11 in12))  ( >  in11 in13))  ( >  in11 in14))  ( >  in11 in15))  ( >  in11 in16))  ( >  in11 in17))  ( >  in11 in18))  ( >  in11 in19))  ( >  in11 in20))  ( >  in11 in21))  ( >  in11 in22))  ( >  in11 in23))  ( >  in11 in24))  ( >  in11 in25))  ( >  in11 in26))  ( >  in11 in27))  ( >  in11 in28))  ( >  in11 in29))  ( >  in12 in13))  ( >  in12 in14))  ( >  in12 in15))  ( >  in12 in16))  ( >  in12 in17))  ( >  in12 in18))  ( >  in12 in19))  ( >  in12 in20))  ( >  in12 in21))  ( >  in12 in22))  ( >  in12 in23))  ( >  in12 in24))  ( >  in12 in25))  ( >  in12 in26))  ( >  in12 in27))  ( >  in12 in28))  ( >  in12 in29))  ( >  in13 in14))  ( >  in13 in15))  ( >  in13 in16))  ( >  in13 in17))  ( >  in13 in18))  ( >  in13 in19))  ( >  in13 in20))  ( >  in13 in21))  ( >  in13 in22))  ( >  in13 in23))  ( >  in13 in24))  ( >  in13 in25))  ( >  in13 in26))  ( >  in13 in27))  ( >  in13 in28))  ( >  in13 in29))  ( >  in14 in15))  ( >  in14 in16))  ( >  in14 in17))  ( >  in14 in18))  ( >  in14 in19))  ( >  in14 in20))  ( >  in14 in21))  ( >  in14 in22))  ( >  in14 in23))  ( >  in14 in24))  ( >  in14 in25))  ( >  in14 in26))  ( >  in14 in27))  ( >  in14 in28))  ( >  in14 in29))  ( >  in15 in16))  ( >  in15 in17))  ( >  in15 in18))  ( >  in15 in19))  ( >  in15 in20))  ( >  in15 in21))  ( >  in15 in22))  ( >  in15 in23))  ( >  in15 in24))  ( >  in15 in25))  ( >  in15 in26))  ( >  in15 in27))  ( >  in15 in28))  ( >  in15 in29))  ( >  in16 in17))  ( >  in16 in18))  ( >  in16 in19))  ( >  in16 in20))  ( >  in16 in21))  ( >  in16 in22))  ( >  in16 in23))  ( >  in16 in24))  ( >  in16 in25))  ( >  in16 in26))  ( >  in16 in27))  ( >  in16 in28))  ( >  in16 in29))  ( >  in17 in18))  ( >  in17 in19))  ( >  in17 in20))  ( >  in17 in21))  ( >  in17 in22))  ( >  in17 in23))  ( >  in17 in24))  ( >  in17 in25))  ( >  in17 in26))  ( >  in17 in27))  ( >  in17 in28))  ( >  in17 in29))  ( >  in18 in19))  ( >  in18 in20))  ( >  in18 in21))  ( >  in18 in22))  ( >  in18 in23))  ( >  in18 in24))  ( >  in18 in25))  ( >  in18 in26))  ( >  in18 in27))  ( >  in18 in28))  ( >  in18 in29))  ( >  in19 in20))  ( >  in19 in21))  ( >  in19 in22))  ( >  in19 in23))  ( >  in19 in24))  ( >  in19 in25))  ( >  in19 in26))  ( >  in19 in27))  ( >  in19 in28))  ( >  in19 in29))  ( >  in20 in21))  ( >  in20 in22))  ( >  in20 in23))  ( >  in20 in24))  ( >  in20 in25))  ( >  in20 in26))  ( >  in20 in27))  ( >  in20 in28))  ( >  in20 in29))  ( >  in21 in22))  ( >  in21 in23))  ( >  in21 in24))  ( >  in21 in25))  ( >  in21 in26))  ( >  in21 in27))  ( >  in21 in28))  ( >  in21 in29))  ( >  in22 in23))  ( >  in22 in24))  ( >  in22 in25))  ( >  in22 in26))  ( >  in22 in27))  ( >  in22 in28))  ( >  in22 in29))  ( >  in23 in24))  ( >  in23 in25))  ( >  in23 in26))  ( >  in23 in27))  ( >  in23 in28))  ( >  in23 in29))  ( >  in24 in25))  ( >  in24 in26))  ( >  in24 in27))  ( >  in24 in28))  ( >  in24 in29))  ( >  in25 in26))  ( >  in25 in27))  ( >  in25 in28))  ( >  in25 in29))  ( >  in26 in27))  ( >  in26 in28))  ( >  in26 in29))  ( >  in27 in28))  ( >  in27 in29))  ( >  in28 in29)))",
      "response": "Worst-case time complexity: O(n^2) time and O(1) extra space. The worst case occurs when the input array is in strictly decreasing order, which forces the algorithm to perform all n\u22121 passes and a total of n(n\u22121)/2 comparisons (and swaps in the reverse-sorted case).\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n(declare-fun in18 () Int)\n(declare-fun in19 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in22 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n(declare-fun in28 () Int)\n(declare-fun in29 () Int)\n(assert\n  (and\n    (>= in0 -2147483648) (<= in0 2147483647)\n    (>= in1 -2147483648) (<= in1 2147483647)\n    (>= in2 -2147483648) (<= in2 2147483647)\n    (>= in3 -2147483648) (<= in3 2147483647)\n    (>= in4 -2147483648) (<= in4 2147483647)\n    (>= in5 -2147483648) (<= in5 2147483647)\n    (>= in6 -2147483648) (<= in6 2147483647)\n    (>= in7 -2147483648) (<= in7 2147483647)\n    (>= in8 -2147483648) (<= in8 2147483647)\n    (>= in9 -2147483648) (<= in9 2147483647)\n    (>= in10 -2147483648) (<= in10 2147483647)\n    (>= in11 -2147483648) (<= in11 2147483647)\n    (>= in12 -2147483648) (<= in12 2147483647)\n    (>= in13 -2147483648) (<= in13 2147483647)\n    (>= in14 -2147483648) (<= in14 2147483647)\n    (>= in15 -2147483648) (<= in15 2147483647)\n    (>= in16 -2147483648) (<= in16 2147483647)\n    (>= in17 -2147483648) (<= in17 2147483647)\n    (>= in18 -2147483648) (<= in18 2147483647)\n    (>= in19 -2147483648) (<= in19 2147483647)\n    (>= in20 -2147483648) (<= in20 2147483647)\n    (>= in21 -2147483648) (<= in21 2147483647)\n    (>= in22 -2147483648) (<= in22 2147483647)\n    (>= in23 -2147483648) (<= in23 2147483647)\n    (>= in24 -2147483648) (<= in24 2147483647)\n    (>= in25 -2147483648) (<= in25 2147483647)\n    (>= in26 -2147483648) (<= in26 2147483647)\n    (>= in27 -2147483648) (<= in27 2147483647)\n    (>= in28 -2147483648) (<= in28 2147483647)\n    (>= in29 -2147483648) (<= in29 2147483647)\n    (> in0 in1)\n    (> in1 in2)\n    (> in2 in3)\n    (> in3 in4)\n    (> in4 in5)\n    (> in5 in6)\n    (> in6 in7)\n    (> in7 in8)\n    (> in8 in9)\n    (> in9 in10)\n    (> in10 in11)\n    (> in11 in12)\n    (> in12 in13)\n    (> in13 in14)\n    (> in14 in15)\n    (> in15 in16)\n    (> in16 in17)\n    (> in17 in18)\n    (> in18 in19)\n    (> in19 in20)\n    (> in20 in21)\n    (> in21 in22)\n    (> in22 in23)\n    (> in23 in24)\n    (> in24 in25)\n    (> in25 in26)\n    (> in26 in27)\n    (> in27 in28)\n    (> in28 in29)\n  )\n)\n(check-sat)\n(get-model)"
    },
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >  in0 in1)  ( >  in0 in2))  ( >  in0 in3))  ( >  in0 in4))  ( >  in0 in5))  ( >  in0 in6))  ( >  in0 in7))  ( >  in0 in8))  ( >  in0 in9))  ( >  in0 in10))  ( >  in0 in11))  ( >  in0 in12))  ( >  in0 in13))  ( >  in0 in14))  ( >  in0 in15))  ( >  in1 in2))  ( >  in1 in3))  ( >  in1 in4))  ( >  in1 in5))  ( >  in1 in6))  ( >  in1 in7))  ( >  in1 in8))  ( >  in1 in9))  ( >  in1 in10))  ( >  in1 in11))  ( >  in1 in12))  ( >  in1 in13))  ( >  in1 in14))  ( >  in1 in15))  ( >  in2 in3))  ( >  in2 in4))  ( >  in2 in5))  ( >  in2 in6))  ( >  in2 in7))  ( >  in2 in8))  ( >  in2 in9))  ( >  in2 in10))  ( >  in2 in11))  ( >  in2 in12))  ( >  in2 in13))  ( >  in2 in14))  ( >  in2 in15))  ( >  in3 in4))  ( >  in3 in5))  ( >  in3 in6))  ( >  in3 in7))  ( >  in3 in8))  ( >  in3 in9))  ( >  in3 in10))  ( >  in3 in11))  ( >  in3 in12))  ( >  in3 in13))  ( >  in3 in14))  ( >  in3 in15))  ( >  in4 in5))  ( >  in4 in6))  ( >  in4 in7))  ( >  in4 in8))  ( >  in4 in9))  ( >  in4 in10))  ( >  in4 in11))  ( >  in4 in12))  ( >  in4 in13))  ( >  in4 in14))  ( >  in4 in15))  ( >  in5 in6))  ( >  in5 in7))  ( >  in5 in8))  ( >  in5 in9))  ( >  in5 in10))  ( >  in5 in11))  ( >  in5 in12))  ( >  in5 in13))  ( >  in5 in14))  ( >  in5 in15))  ( >  in6 in7))  ( >  in6 in8))  ( >  in6 in9))  ( >  in6 in10))  ( >  in6 in11))  ( >  in6 in12))  ( >  in6 in13))  ( >  in6 in14))  ( >  in6 in15))  ( >  in7 in8))  ( >  in7 in9))  ( >  in7 in10))  ( >  in7 in11))  ( >  in7 in12))  ( >  in7 in13))  ( >  in7 in14))  ( >  in7 in15))  ( >  in8 in9))  ( >  in8 in10))  ( >  in8 in11))  ( >  in8 in12))  ( >  in8 in13))  ( >  in8 in14))  ( >  in8 in15))  ( >  in9 in10))  ( >  in9 in11))  ( >  in9 in12))  ( >  in9 in13))  ( >  in9 in14))  ( >  in9 in15))  ( >  in10 in11))  ( >  in10 in12))  ( >  in10 in13))  ( >  in10 in14))  ( >  in10 in15))  ( >  in11 in12))  ( >  in11 in13))  ( >  in11 in14))  ( >  in11 in15))  ( >  in12 in13))  ( >  in12 in14))  ( >  in12 in15))  ( >  in13 in14))  ( >  in13 in15))  ( >  in14 in15)))",
      "response": "Worst-case time complexity: O(n^2). With the early-exit optimization, best case is O(n), but worst case remains quadratic (e.g., when the array is initially in strictly decreasing order). For n = 16, the worst-case performs 16*15/2 = 120 comparisons and 120 swaps.\n\nAnswer:\n(set-logic QF_BV)\n(declare-fun in0 () (_ BitVec 32))\n(declare-fun in1 () (_ BitVec 32))\n(declare-fun in2 () (_ BitVec 32))\n(declare-fun in3 () (_ BitVec 32))\n(declare-fun in4 () (_ BitVec 32))\n(declare-fun in5 () (_ BitVec 32))\n(declare-fun in6 () (_ BitVec 32))\n(declare-fun in7 () (_ BitVec 32))\n(declare-fun in8 () (_ BitVec 32))\n(declare-fun in9 () (_ BitVec 32))\n(declare-fun in10 () (_ BitVec 32))\n(declare-fun in11 () (_ BitVec 32))\n(declare-fun in12 () (_ BitVec 32))\n(declare-fun in13 () (_ BitVec 32))\n(declare-fun in14 () (_ BitVec 32))\n(declare-fun in15 () (_ BitVec 32))\n\n; Worst-case path: initial array strictly decreasing (signed)\n(assert (bvsgt in0 in1))\n(assert (bvsgt in1 in2))\n(assert (bvsgt in2 in3))\n(assert (bvsgt in3 in4))\n(assert (bvsgt in4 in5))\n(assert (bvsgt in5 in6))\n(assert (bvsgt in6 in7))\n(assert (bvsgt in7 in8))\n(assert (bvsgt in8 in9))\n(assert (bvsgt in9 in10))\n(assert (bvsgt in10 in11))\n(assert (bvsgt in11 in12))\n(assert (bvsgt in12 in13))\n(assert (bvsgt in13 in14))\n(assert (bvsgt in14 in15))\n\n(check-sat)\n(get-model)"
    }
  },
  "BinarySearchTreeHeight": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class BinarySearchTreeHeight {\n    static class Node {\n        int value;\n        Node left, right;\n        Node(int v) { value = v; }\n    }\n    \n    static class BST {\n        Node root;\n        \n        public void insert(int v) {\n            root = insertRec(root, v);\n        }\n        \n        private Node insertRec(Node root, int v) {\n            if (root == null) {\n                return new Node(v);\n            }\n            if (v < root.value) {\n                root.left = insertRec(root.left, v);\n            } else if (v > root.value) {\n                root.right = insertRec(root.right, v);\n            }\n            return root;\n        }\n        \n        public int height() {\n            return heightRec(root);\n        }\n        \n        private int heightRec(Node node) {\n            if (node == null) return 0;\n            int leftHeight = heightRec(node.left);\n            int rightHeight = heightRec(node.right);\n            return 1 + Math.max(leftHeight, rightHeight);\n        }\n    }\n    \n    public static void main(String[] args) {\n        final int N = Integer.parseInt(args[0]);\n        BST tree = new BST();\n        for (int i = 0; i < N; i++){\n            int val = Debug.makeSymbolicInteger(\"in\" + i);\n            tree.insert(val);\n        }\n        \n        tree.height();\n    }\n}\n",
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and  ( >=  in1 in0)  ( >  in1 in0))  ( >=  in2 in0))  ( >  in2 in0))  ( >=  in2 in1))  ( >  in2 in1))  ( >=  in3 in0))  ( >  in3 in0))  ( >=  in3 in1))  ( >  in3 in1))  ( >=  in3 in2))  ( >  in3 in2)))",
      "response": "- Worst-case time complexity:\n  - Inserting N values into an unbalanced BST: O(N^2) (e.g., strictly increasing or strictly decreasing sequence makes the tree a chain).\n  - Computing height: O(N).\n  - Overall for the program (insert N values, then compute height): O(N^2).\n\n- SMT2 constraint for n = 4 (forces worst-case by making inserts strictly increasing; includes 32-bit Java int bounds):\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(assert\n  (and\n    (<= -2147483648 in0) (<= in0 2147483647)\n    (<= -2147483648 in1) (<= in1 2147483647)\n    (<= -2147483648 in2) (<= in2 2147483647)\n    (<= -2147483648 in3) (<= in3 2147483647)\n    (< in0 in1) (< in1 in2) (< in2 in3)))\n(check-sat)"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in1 in0)  ( >  in1 in0))  ( >=  in2 in0))  ( >  in2 in0))  ( >=  in2 in1))  ( >  in2 in1))  ( >=  in3 in0))  ( >  in3 in0))  ( >=  in3 in1))  ( >  in3 in1))  ( >=  in3 in2))  ( >  in3 in2))  ( >=  in4 in0))  ( >  in4 in0))  ( >=  in4 in1))  ( >  in4 in1))  ( >=  in4 in2))  ( >  in4 in2))  ( >=  in4 in3))  ( >  in4 in3))  ( >=  in5 in0))  ( >  in5 in0))  ( >=  in5 in1))  ( >  in5 in1))  ( >=  in5 in2))  ( >  in5 in2))  ( >=  in5 in3))  ( >  in5 in3))  ( >=  in5 in4))  ( >  in5 in4))  ( >=  in6 in0))  ( >  in6 in0))  ( >=  in6 in1))  ( >  in6 in1))  ( >=  in6 in2))  ( >  in6 in2))  ( >=  in6 in3))  ( >  in6 in3))  ( >=  in6 in4))  ( >  in6 in4))  ( >=  in6 in5))  ( >  in6 in5))  ( >=  in7 in0))  ( >  in7 in0))  ( >=  in7 in1))  ( >  in7 in1))  ( >=  in7 in2))  ( >  in7 in2))  ( >=  in7 in3))  ( >  in7 in3))  ( >=  in7 in4))  ( >  in7 in4))  ( >=  in7 in5))  ( >  in7 in5))  ( >=  in7 in6))  ( >  in7 in6)))",
      "response": "Worst-case time complexity: O(N^2)\n- Building the BST can degenerate into a linked list when the inputs are strictly increasing (or strictly decreasing), making the i-th insert cost O(i). Total insert cost is 1 + 2 + ... + N = O(N^2).\n- height() is O(N) in that worst case, so overall remains O(N^2).\n\nConstraint (SMT2) for n = 8 forcing the worst-case (strictly increasing inputs):\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(assert (< in0 in1))\n(assert (< in1 in2))\n(assert (< in2 in3))\n(assert (< in3 in4))\n(assert (< in4 in5))\n(assert (< in5 in6))\n(assert (< in6 in7))"
    },
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in1 in0)  ( >  in1 in0))  ( >=  in2 in0))  ( >  in2 in0))  ( >=  in2 in1))  ( >  in2 in1))  ( >=  in3 in0))  ( >  in3 in0))  ( >=  in3 in1))  ( >  in3 in1))  ( >=  in3 in2))  ( >  in3 in2))  ( >=  in4 in0))  ( >  in4 in0))  ( >=  in4 in1))  ( >  in4 in1))  ( >=  in4 in2))  ( >  in4 in2))  ( >=  in4 in3))  ( >  in4 in3))  ( >=  in5 in0))  ( >  in5 in0))  ( >=  in5 in1))  ( >  in5 in1))  ( >=  in5 in2))  ( >  in5 in2))  ( >=  in5 in3))  ( >  in5 in3))  ( >=  in5 in4))  ( >  in5 in4))  ( >=  in6 in0))  ( >  in6 in0))  ( >=  in6 in1))  ( >  in6 in1))  ( >=  in6 in2))  ( >  in6 in2))  ( >=  in6 in3))  ( >  in6 in3))  ( >=  in6 in4))  ( >  in6 in4))  ( >=  in6 in5))  ( >  in6 in5))  ( >=  in7 in0))  ( >  in7 in0))  ( >=  in7 in1))  ( >  in7 in1))  ( >=  in7 in2))  ( >  in7 in2))  ( >=  in7 in3))  ( >  in7 in3))  ( >=  in7 in4))  ( >  in7 in4))  ( >=  in7 in5))  ( >  in7 in5))  ( >=  in7 in6))  ( >  in7 in6))  ( >=  in8 in0))  ( >  in8 in0))  ( >=  in8 in1))  ( >  in8 in1))  ( >=  in8 in2))  ( >  in8 in2))  ( >=  in8 in3))  ( >  in8 in3))  ( >=  in8 in4))  ( >  in8 in4))  ( >=  in8 in5))  ( >  in8 in5))  ( >=  in8 in6))  ( >  in8 in6))  ( >=  in8 in7))  ( >  in8 in7))  ( >=  in9 in0))  ( >  in9 in0))  ( >=  in9 in1))  ( >  in9 in1))  ( >=  in9 in2))  ( >  in9 in2))  ( >=  in9 in3))  ( >  in9 in3))  ( >=  in9 in4))  ( >  in9 in4))  ( >=  in9 in5))  ( >  in9 in5))  ( >=  in9 in6))  ( >  in9 in6))  ( >=  in9 in7))  ( >  in9 in7))  ( >=  in9 in8))  ( >  in9 in8))  ( >=  in10 in0))  ( >  in10 in0))  ( >=  in10 in1))  ( >  in10 in1))  ( >=  in10 in2))  ( >  in10 in2))  ( >=  in10 in3))  ( >  in10 in3))  ( >=  in10 in4))  ( >  in10 in4))  ( >=  in10 in5))  ( >  in10 in5))  ( >=  in10 in6))  ( >  in10 in6))  ( >=  in10 in7))  ( >  in10 in7))  ( >=  in10 in8))  ( >  in10 in8))  ( >=  in10 in9))  ( >  in10 in9))  ( >=  in11 in0))  ( >  in11 in0))  ( >=  in11 in1))  ( >  in11 in1))  ( >=  in11 in2))  ( >  in11 in2))  ( >=  in11 in3))  ( >  in11 in3))  ( >=  in11 in4))  ( >  in11 in4))  ( >=  in11 in5))  ( >  in11 in5))  ( >=  in11 in6))  ( >  in11 in6))  ( >=  in11 in7))  ( >  in11 in7))  ( >=  in11 in8))  ( >  in11 in8))  ( >=  in11 in9))  ( >  in11 in9))  ( >=  in11 in10))  ( >  in11 in10))  ( >=  in12 in0))  ( >  in12 in0))  ( >=  in12 in1))  ( >  in12 in1))  ( >=  in12 in2))  ( >  in12 in2))  ( >=  in12 in3))  ( >  in12 in3))  ( >=  in12 in4))  ( >  in12 in4))  ( >=  in12 in5))  ( >  in12 in5))  ( >=  in12 in6))  ( >  in12 in6))  ( >=  in12 in7))  ( >  in12 in7))  ( >=  in12 in8))  ( >  in12 in8))  ( >=  in12 in9))  ( >  in12 in9))  ( >=  in12 in10))  ( >  in12 in10))  ( >=  in12 in11))  ( >  in12 in11))  ( >=  in13 in0))  ( >  in13 in0))  ( >=  in13 in1))  ( >  in13 in1))  ( >=  in13 in2))  ( >  in13 in2))  ( >=  in13 in3))  ( >  in13 in3))  ( >=  in13 in4))  ( >  in13 in4))  ( >=  in13 in5))  ( >  in13 in5))  ( >=  in13 in6))  ( >  in13 in6))  ( >=  in13 in7))  ( >  in13 in7))  ( >=  in13 in8))  ( >  in13 in8))  ( >=  in13 in9))  ( >  in13 in9))  ( >=  in13 in10))  ( >  in13 in10))  ( >=  in13 in11))  ( >  in13 in11))  ( >=  in13 in12))  ( >  in13 in12))  ( >=  in14 in0))  ( >  in14 in0))  ( >=  in14 in1))  ( >  in14 in1))  ( >=  in14 in2))  ( >  in14 in2))  ( >=  in14 in3))  ( >  in14 in3))  ( >=  in14 in4))  ( >  in14 in4))  ( >=  in14 in5))  ( >  in14 in5))  ( >=  in14 in6))  ( >  in14 in6))  ( >=  in14 in7))  ( >  in14 in7))  ( >=  in14 in8))  ( >  in14 in8))  ( >=  in14 in9))  ( >  in14 in9))  ( >=  in14 in10))  ( >  in14 in10))  ( >=  in14 in11))  ( >  in14 in11))  ( >=  in14 in12))  ( >  in14 in12))  ( >=  in14 in13))  ( >  in14 in13))  ( >=  in15 in0))  ( >  in15 in0))  ( >=  in15 in1))  ( >  in15 in1))  ( >=  in15 in2))  ( >  in15 in2))  ( >=  in15 in3))  ( >  in15 in3))  ( >=  in15 in4))  ( >  in15 in4))  ( >=  in15 in5))  ( >  in15 in5))  ( >=  in15 in6))  ( >  in15 in6))  ( >=  in15 in7))  ( >  in15 in7))  ( >=  in15 in8))  ( >  in15 in8))  ( >=  in15 in9))  ( >  in15 in9))  ( >=  in15 in10))  ( >  in15 in10))  ( >=  in15 in11))  ( >  in15 in11))  ( >=  in15 in12))  ( >  in15 in12))  ( >=  in15 in13))  ( >  in15 in13))  ( >=  in15 in14))  ( >  in15 in14)))",
      "response": "Worst-case time complexity: O(N^2)\n- In the worst case (e.g., strictly increasing or strictly decreasing inputs), the BST becomes a chain. The k-th insert costs O(k), summing to O(N^2). The final height() call is O(N), so overall O(N^2).\n\nSMT2 constraint (one sufficient worst-case pattern is strictly increasing inputs):\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(declare-const in8 Int)\n(declare-const in9 Int)\n(declare-const in10 Int)\n(declare-const in11 Int)\n(declare-const in12 Int)\n(declare-const in13 Int)\n(declare-const in14 Int)\n(declare-const in15 Int)\n(assert (< in0 in1))\n(assert (< in1 in2))\n(assert (< in2 in3))\n(assert (< in3 in4))\n(assert (< in4 in5))\n(assert (< in5 in6))\n(assert (< in6 in7))\n(assert (< in7 in8))\n(assert (< in8 in9))\n(assert (< in9 in10))\n(assert (< in10 in11))\n(assert (< in11 in12))\n(assert (< in12 in13))\n(assert (< in13 in14))\n(assert (< in14 in15))\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and  ( >=  in1 in0)  ( >  in1 in0)))",
      "response": "- Worst-case time complexity: O(N^2)\n  - Reason: Inserting N values into an unbalanced (degenerate) BST (e.g., strictly increasing or decreasing inputs) takes 1 + 2 + ... + N = O(N^2) time. The final height() call is O(N), so overall O(N^2).\n\nFor input size n = 2, a worst-case shape (a chain) is forced by strictly ordered inputs.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(assert (< in0 in1))\n(check-sat)\n(get-model)"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in1 in0)  ( >  in1 in0))  ( >=  in2 in0))  ( >  in2 in0))  ( >=  in2 in1))  ( >  in2 in1))  ( >=  in3 in0))  ( >  in3 in0))  ( >=  in3 in1))  ( >  in3 in1))  ( >=  in3 in2))  ( >  in3 in2))  ( >=  in4 in0))  ( >  in4 in0))  ( >=  in4 in1))  ( >  in4 in1))  ( >=  in4 in2))  ( >  in4 in2))  ( >=  in4 in3))  ( >  in4 in3))  ( >=  in5 in0))  ( >  in5 in0))  ( >=  in5 in1))  ( >  in5 in1))  ( >=  in5 in2))  ( >  in5 in2))  ( >=  in5 in3))  ( >  in5 in3))  ( >=  in5 in4))  ( >  in5 in4))  ( >=  in6 in0))  ( >  in6 in0))  ( >=  in6 in1))  ( >  in6 in1))  ( >=  in6 in2))  ( >  in6 in2))  ( >=  in6 in3))  ( >  in6 in3))  ( >=  in6 in4))  ( >  in6 in4))  ( >=  in6 in5))  ( >  in6 in5))  ( >=  in7 in0))  ( >  in7 in0))  ( >=  in7 in1))  ( >  in7 in1))  ( >=  in7 in2))  ( >  in7 in2))  ( >=  in7 in3))  ( >  in7 in3))  ( >=  in7 in4))  ( >  in7 in4))  ( >=  in7 in5))  ( >  in7 in5))  ( >=  in7 in6))  ( >  in7 in6))  ( >=  in8 in0))  ( >  in8 in0))  ( >=  in8 in1))  ( >  in8 in1))  ( >=  in8 in2))  ( >  in8 in2))  ( >=  in8 in3))  ( >  in8 in3))  ( >=  in8 in4))  ( >  in8 in4))  ( >=  in8 in5))  ( >  in8 in5))  ( >=  in8 in6))  ( >  in8 in6))  ( >=  in8 in7))  ( >  in8 in7))  ( >=  in9 in0))  ( >  in9 in0))  ( >=  in9 in1))  ( >  in9 in1))  ( >=  in9 in2))  ( >  in9 in2))  ( >=  in9 in3))  ( >  in9 in3))  ( >=  in9 in4))  ( >  in9 in4))  ( >=  in9 in5))  ( >  in9 in5))  ( >=  in9 in6))  ( >  in9 in6))  ( >=  in9 in7))  ( >  in9 in7))  ( >=  in9 in8))  ( >  in9 in8))  ( >=  in10 in0))  ( >  in10 in0))  ( >=  in10 in1))  ( >  in10 in1))  ( >=  in10 in2))  ( >  in10 in2))  ( >=  in10 in3))  ( >  in10 in3))  ( >=  in10 in4))  ( >  in10 in4))  ( >=  in10 in5))  ( >  in10 in5))  ( >=  in10 in6))  ( >  in10 in6))  ( >=  in10 in7))  ( >  in10 in7))  ( >=  in10 in8))  ( >  in10 in8))  ( >=  in10 in9))  ( >  in10 in9))  ( >=  in11 in0))  ( >  in11 in0))  ( >=  in11 in1))  ( >  in11 in1))  ( >=  in11 in2))  ( >  in11 in2))  ( >=  in11 in3))  ( >  in11 in3))  ( >=  in11 in4))  ( >  in11 in4))  ( >=  in11 in5))  ( >  in11 in5))  ( >=  in11 in6))  ( >  in11 in6))  ( >=  in11 in7))  ( >  in11 in7))  ( >=  in11 in8))  ( >  in11 in8))  ( >=  in11 in9))  ( >  in11 in9))  ( >=  in11 in10))  ( >  in11 in10))  ( >=  in12 in0))  ( >  in12 in0))  ( >=  in12 in1))  ( >  in12 in1))  ( >=  in12 in2))  ( >  in12 in2))  ( >=  in12 in3))  ( >  in12 in3))  ( >=  in12 in4))  ( >  in12 in4))  ( >=  in12 in5))  ( >  in12 in5))  ( >=  in12 in6))  ( >  in12 in6))  ( >=  in12 in7))  ( >  in12 in7))  ( >=  in12 in8))  ( >  in12 in8))  ( >=  in12 in9))  ( >  in12 in9))  ( >=  in12 in10))  ( >  in12 in10))  ( >=  in12 in11))  ( >  in12 in11))  ( >=  in13 in0))  ( >  in13 in0))  ( >=  in13 in1))  ( >  in13 in1))  ( >=  in13 in2))  ( >  in13 in2))  ( >=  in13 in3))  ( >  in13 in3))  ( >=  in13 in4))  ( >  in13 in4))  ( >=  in13 in5))  ( >  in13 in5))  ( >=  in13 in6))  ( >  in13 in6))  ( >=  in13 in7))  ( >  in13 in7))  ( >=  in13 in8))  ( >  in13 in8))  ( >=  in13 in9))  ( >  in13 in9))  ( >=  in13 in10))  ( >  in13 in10))  ( >=  in13 in11))  ( >  in13 in11))  ( >=  in13 in12))  ( >  in13 in12))  ( >=  in14 in0))  ( >  in14 in0))  ( >=  in14 in1))  ( >  in14 in1))  ( >=  in14 in2))  ( >  in14 in2))  ( >=  in14 in3))  ( >  in14 in3))  ( >=  in14 in4))  ( >  in14 in4))  ( >=  in14 in5))  ( >  in14 in5))  ( >=  in14 in6))  ( >  in14 in6))  ( >=  in14 in7))  ( >  in14 in7))  ( >=  in14 in8))  ( >  in14 in8))  ( >=  in14 in9))  ( >  in14 in9))  ( >=  in14 in10))  ( >  in14 in10))  ( >=  in14 in11))  ( >  in14 in11))  ( >=  in14 in12))  ( >  in14 in12))  ( >=  in14 in13))  ( >  in14 in13))  ( >=  in15 in0))  ( >  in15 in0))  ( >=  in15 in1))  ( >  in15 in1))  ( >=  in15 in2))  ( >  in15 in2))  ( >=  in15 in3))  ( >  in15 in3))  ( >=  in15 in4))  ( >  in15 in4))  ( >=  in15 in5))  ( >  in15 in5))  ( >=  in15 in6))  ( >  in15 in6))  ( >=  in15 in7))  ( >  in15 in7))  ( >=  in15 in8))  ( >  in15 in8))  ( >=  in15 in9))  ( >  in15 in9))  ( >=  in15 in10))  ( >  in15 in10))  ( >=  in15 in11))  ( >  in15 in11))  ( >=  in15 in12))  ( >  in15 in12))  ( >=  in15 in13))  ( >  in15 in13))  ( >=  in15 in14))  ( >  in15 in14))  ( >=  in16 in0))  ( >  in16 in0))  ( >=  in16 in1))  ( >  in16 in1))  ( >=  in16 in2))  ( >  in16 in2))  ( >=  in16 in3))  ( >  in16 in3))  ( >=  in16 in4))  ( >  in16 in4))  ( >=  in16 in5))  ( >  in16 in5))  ( >=  in16 in6))  ( >  in16 in6))  ( >=  in16 in7))  ( >  in16 in7))  ( >=  in16 in8))  ( >  in16 in8))  ( >=  in16 in9))  ( >  in16 in9))  ( >=  in16 in10))  ( >  in16 in10))  ( >=  in16 in11))  ( >  in16 in11))  ( >=  in16 in12))  ( >  in16 in12))  ( >=  in16 in13))  ( >  in16 in13))  ( >=  in16 in14))  ( >  in16 in14))  ( >=  in16 in15))  ( >  in16 in15))  ( >=  in17 in0))  ( >  in17 in0))  ( >=  in17 in1))  ( >  in17 in1))  ( >=  in17 in2))  ( >  in17 in2))  ( >=  in17 in3))  ( >  in17 in3))  ( >=  in17 in4))  ( >  in17 in4))  ( >=  in17 in5))  ( >  in17 in5))  ( >=  in17 in6))  ( >  in17 in6))  ( >=  in17 in7))  ( >  in17 in7))  ( >=  in17 in8))  ( >  in17 in8))  ( >=  in17 in9))  ( >  in17 in9))  ( >=  in17 in10))  ( >  in17 in10))  ( >=  in17 in11))  ( >  in17 in11))  ( >=  in17 in12))  ( >  in17 in12))  ( >=  in17 in13))  ( >  in17 in13))  ( >=  in17 in14))  ( >  in17 in14))  ( >=  in17 in15))  ( >  in17 in15))  ( >=  in17 in16))  ( >  in17 in16))  ( >=  in18 in0))  ( >  in18 in0))  ( >=  in18 in1))  ( >  in18 in1))  ( >=  in18 in2))  ( >  in18 in2))  ( >=  in18 in3))  ( >  in18 in3))  ( >=  in18 in4))  ( >  in18 in4))  ( >=  in18 in5))  ( >  in18 in5))  ( >=  in18 in6))  ( >  in18 in6))  ( >=  in18 in7))  ( >  in18 in7))  ( >=  in18 in8))  ( >  in18 in8))  ( >=  in18 in9))  ( >  in18 in9))  ( >=  in18 in10))  ( >  in18 in10))  ( >=  in18 in11))  ( >  in18 in11))  ( >=  in18 in12))  ( >  in18 in12))  ( >=  in18 in13))  ( >  in18 in13))  ( >=  in18 in14))  ( >  in18 in14))  ( >=  in18 in15))  ( >  in18 in15))  ( >=  in18 in16))  ( >  in18 in16))  ( >=  in18 in17))  ( >  in18 in17))  ( >=  in19 in0))  ( >  in19 in0))  ( >=  in19 in1))  ( >  in19 in1))  ( >=  in19 in2))  ( >  in19 in2))  ( >=  in19 in3))  ( >  in19 in3))  ( >=  in19 in4))  ( >  in19 in4))  ( >=  in19 in5))  ( >  in19 in5))  ( >=  in19 in6))  ( >  in19 in6))  ( >=  in19 in7))  ( >  in19 in7))  ( >=  in19 in8))  ( >  in19 in8))  ( >=  in19 in9))  ( >  in19 in9))  ( >=  in19 in10))  ( >  in19 in10))  ( >=  in19 in11))  ( >  in19 in11))  ( >=  in19 in12))  ( >  in19 in12))  ( >=  in19 in13))  ( >  in19 in13))  ( >=  in19 in14))  ( >  in19 in14))  ( >=  in19 in15))  ( >  in19 in15))  ( >=  in19 in16))  ( >  in19 in16))  ( >=  in19 in17))  ( >  in19 in17))  ( >=  in19 in18))  ( >  in19 in18))  ( >=  in20 in0))  ( >  in20 in0))  ( >=  in20 in1))  ( >  in20 in1))  ( >=  in20 in2))  ( >  in20 in2))  ( >=  in20 in3))  ( >  in20 in3))  ( >=  in20 in4))  ( >  in20 in4))  ( >=  in20 in5))  ( >  in20 in5))  ( >=  in20 in6))  ( >  in20 in6))  ( >=  in20 in7))  ( >  in20 in7))  ( >=  in20 in8))  ( >  in20 in8))  ( >=  in20 in9))  ( >  in20 in9))  ( >=  in20 in10))  ( >  in20 in10))  ( >=  in20 in11))  ( >  in20 in11))  ( >=  in20 in12))  ( >  in20 in12))  ( >=  in20 in13))  ( >  in20 in13))  ( >=  in20 in14))  ( >  in20 in14))  ( >=  in20 in15))  ( >  in20 in15))  ( >=  in20 in16))  ( >  in20 in16))  ( >=  in20 in17))  ( >  in20 in17))  ( >=  in20 in18))  ( >  in20 in18))  ( >=  in20 in19))  ( >  in20 in19))  ( >=  in21 in0))  ( >  in21 in0))  ( >=  in21 in1))  ( >  in21 in1))  ( >=  in21 in2))  ( >  in21 in2))  ( >=  in21 in3))  ( >  in21 in3))  ( >=  in21 in4))  ( >  in21 in4))  ( >=  in21 in5))  ( >  in21 in5))  ( >=  in21 in6))  ( >  in21 in6))  ( >=  in21 in7))  ( >  in21 in7))  ( >=  in21 in8))  ( >  in21 in8))  ( >=  in21 in9))  ( >  in21 in9))  ( >=  in21 in10))  ( >  in21 in10))  ( >=  in21 in11))  ( >  in21 in11))  ( >=  in21 in12))  ( >  in21 in12))  ( >=  in21 in13))  ( >  in21 in13))  ( >=  in21 in14))  ( >  in21 in14))  ( >=  in21 in15))  ( >  in21 in15))  ( >=  in21 in16))  ( >  in21 in16))  ( >=  in21 in17))  ( >  in21 in17))  ( >=  in21 in18))  ( >  in21 in18))  ( >=  in21 in19))  ( >  in21 in19))  ( >=  in21 in20))  ( >  in21 in20))  ( >=  in22 in0))  ( >  in22 in0))  ( >=  in22 in1))  ( >  in22 in1))  ( >=  in22 in2))  ( >  in22 in2))  ( >=  in22 in3))  ( >  in22 in3))  ( >=  in22 in4))  ( >  in22 in4))  ( >=  in22 in5))  ( >  in22 in5))  ( >=  in22 in6))  ( >  in22 in6))  ( >=  in22 in7))  ( >  in22 in7))  ( >=  in22 in8))  ( >  in22 in8))  ( >=  in22 in9))  ( >  in22 in9))  ( >=  in22 in10))  ( >  in22 in10))  ( >=  in22 in11))  ( >  in22 in11))  ( >=  in22 in12))  ( >  in22 in12))  ( >=  in22 in13))  ( >  in22 in13))  ( >=  in22 in14))  ( >  in22 in14))  ( >=  in22 in15))  ( >  in22 in15))  ( >=  in22 in16))  ( >  in22 in16))  ( >=  in22 in17))  ( >  in22 in17))  ( >=  in22 in18))  ( >  in22 in18))  ( >=  in22 in19))  ( >  in22 in19))  ( >=  in22 in20))  ( >  in22 in20))  ( >=  in22 in21))  ( >  in22 in21))  ( >=  in23 in0))  ( >  in23 in0))  ( >=  in23 in1))  ( >  in23 in1))  ( >=  in23 in2))  ( >  in23 in2))  ( >=  in23 in3))  ( >  in23 in3))  ( >=  in23 in4))  ( >  in23 in4))  ( >=  in23 in5))  ( >  in23 in5))  ( >=  in23 in6))  ( >  in23 in6))  ( >=  in23 in7))  ( >  in23 in7))  ( >=  in23 in8))  ( >  in23 in8))  ( >=  in23 in9))  ( >  in23 in9))  ( >=  in23 in10))  ( >  in23 in10))  ( >=  in23 in11))  ( >  in23 in11))  ( >=  in23 in12))  ( >  in23 in12))  ( >=  in23 in13))  ( >  in23 in13))  ( >=  in23 in14))  ( >  in23 in14))  ( >=  in23 in15))  ( >  in23 in15))  ( >=  in23 in16))  ( >  in23 in16))  ( >=  in23 in17))  ( >  in23 in17))  ( >=  in23 in18))  ( >  in23 in18))  ( >=  in23 in19))  ( >  in23 in19))  ( >=  in23 in20))  ( >  in23 in20))  ( >=  in23 in21))  ( >  in23 in21))  ( >=  in23 in22))  ( >  in23 in22))  ( >=  in24 in0))  ( >  in24 in0))  ( >=  in24 in1))  ( >  in24 in1))  ( >=  in24 in2))  ( >  in24 in2))  ( >=  in24 in3))  ( >  in24 in3))  ( >=  in24 in4))  ( >  in24 in4))  ( >=  in24 in5))  ( >  in24 in5))  ( >=  in24 in6))  ( >  in24 in6))  ( >=  in24 in7))  ( >  in24 in7))  ( >=  in24 in8))  ( >  in24 in8))  ( >=  in24 in9))  ( >  in24 in9))  ( >=  in24 in10))  ( >  in24 in10))  ( >=  in24 in11))  ( >  in24 in11))  ( >=  in24 in12))  ( >  in24 in12))  ( >=  in24 in13))  ( >  in24 in13))  ( >=  in24 in14))  ( >  in24 in14))  ( >=  in24 in15))  ( >  in24 in15))  ( >=  in24 in16))  ( >  in24 in16))  ( >=  in24 in17))  ( >  in24 in17))  ( >=  in24 in18))  ( >  in24 in18))  ( >=  in24 in19))  ( >  in24 in19))  ( >=  in24 in20))  ( >  in24 in20))  ( >=  in24 in21))  ( >  in24 in21))  ( >=  in24 in22))  ( >  in24 in22))  ( >=  in24 in23))  ( >  in24 in23))  ( >=  in25 in0))  ( >  in25 in0))  ( >=  in25 in1))  ( >  in25 in1))  ( >=  in25 in2))  ( >  in25 in2))  ( >=  in25 in3))  ( >  in25 in3))  ( >=  in25 in4))  ( >  in25 in4))  ( >=  in25 in5))  ( >  in25 in5))  ( >=  in25 in6))  ( >  in25 in6))  ( >=  in25 in7))  ( >  in25 in7))  ( >=  in25 in8))  ( >  in25 in8))  ( >=  in25 in9))  ( >  in25 in9))  ( >=  in25 in10))  ( >  in25 in10))  ( >=  in25 in11))  ( >  in25 in11))  ( >=  in25 in12))  ( >  in25 in12))  ( >=  in25 in13))  ( >  in25 in13))  ( >=  in25 in14))  ( >  in25 in14))  ( >=  in25 in15))  ( >  in25 in15))  ( >=  in25 in16))  ( >  in25 in16))  ( >=  in25 in17))  ( >  in25 in17))  ( >=  in25 in18))  ( >  in25 in18))  ( >=  in25 in19))  ( >  in25 in19))  ( >=  in25 in20))  ( >  in25 in20))  ( >=  in25 in21))  ( >  in25 in21))  ( >=  in25 in22))  ( >  in25 in22))  ( >=  in25 in23))  ( >  in25 in23))  ( >=  in25 in24))  ( >  in25 in24))  ( >=  in26 in0))  ( >  in26 in0))  ( >=  in26 in1))  ( >  in26 in1))  ( >=  in26 in2))  ( >  in26 in2))  ( >=  in26 in3))  ( >  in26 in3))  ( >=  in26 in4))  ( >  in26 in4))  ( >=  in26 in5))  ( >  in26 in5))  ( >=  in26 in6))  ( >  in26 in6))  ( >=  in26 in7))  ( >  in26 in7))  ( >=  in26 in8))  ( >  in26 in8))  ( >=  in26 in9))  ( >  in26 in9))  ( >=  in26 in10))  ( >  in26 in10))  ( >=  in26 in11))  ( >  in26 in11))  ( >=  in26 in12))  ( >  in26 in12))  ( >=  in26 in13))  ( >  in26 in13))  ( >=  in26 in14))  ( >  in26 in14))  ( >=  in26 in15))  ( >  in26 in15))  ( >=  in26 in16))  ( >  in26 in16))  ( >=  in26 in17))  ( >  in26 in17))  ( >=  in26 in18))  ( >  in26 in18))  ( >=  in26 in19))  ( >  in26 in19))  ( >=  in26 in20))  ( >  in26 in20))  ( >=  in26 in21))  ( >  in26 in21))  ( >=  in26 in22))  ( >  in26 in22))  ( >=  in26 in23))  ( >  in26 in23))  ( >=  in26 in24))  ( >  in26 in24))  ( >=  in26 in25))  ( >  in26 in25))  ( >=  in27 in0))  ( >  in27 in0))  ( >=  in27 in1))  ( >  in27 in1))  ( >=  in27 in2))  ( >  in27 in2))  ( >=  in27 in3))  ( >  in27 in3))  ( >=  in27 in4))  ( >  in27 in4))  ( >=  in27 in5))  ( >  in27 in5))  ( >=  in27 in6))  ( >  in27 in6))  ( >=  in27 in7))  ( >  in27 in7))  ( >=  in27 in8))  ( >  in27 in8))  ( >=  in27 in9))  ( >  in27 in9))  ( >=  in27 in10))  ( >  in27 in10))  ( >=  in27 in11))  ( >  in27 in11))  ( >=  in27 in12))  ( >  in27 in12))  ( >=  in27 in13))  ( >  in27 in13))  ( >=  in27 in14))  ( >  in27 in14))  ( >=  in27 in15))  ( >  in27 in15))  ( >=  in27 in16))  ( >  in27 in16))  ( >=  in27 in17))  ( >  in27 in17))  ( >=  in27 in18))  ( >  in27 in18))  ( >=  in27 in19))  ( >  in27 in19))  ( >=  in27 in20))  ( >  in27 in20))  ( >=  in27 in21))  ( >  in27 in21))  ( >=  in27 in22))  ( >  in27 in22))  ( >=  in27 in23))  ( >  in27 in23))  ( >=  in27 in24))  ( >  in27 in24))  ( >=  in27 in25))  ( >  in27 in25))  ( >=  in27 in26))  ( >  in27 in26))  ( >=  in28 in0))  ( >  in28 in0))  ( >=  in28 in1))  ( >  in28 in1))  ( >=  in28 in2))  ( >  in28 in2))  ( >=  in28 in3))  ( >  in28 in3))  ( >=  in28 in4))  ( >  in28 in4))  ( >=  in28 in5))  ( >  in28 in5))  ( >=  in28 in6))  ( >  in28 in6))  ( >=  in28 in7))  ( >  in28 in7))  ( >=  in28 in8))  ( >  in28 in8))  ( >=  in28 in9))  ( >  in28 in9))  ( >=  in28 in10))  ( >  in28 in10))  ( >=  in28 in11))  ( >  in28 in11))  ( >=  in28 in12))  ( >  in28 in12))  ( >=  in28 in13))  ( >  in28 in13))  ( >=  in28 in14))  ( >  in28 in14))  ( >=  in28 in15))  ( >  in28 in15))  ( >=  in28 in16))  ( >  in28 in16))  ( >=  in28 in17))  ( >  in28 in17))  ( >=  in28 in18))  ( >  in28 in18))  ( >=  in28 in19))  ( >  in28 in19))  ( >=  in28 in20))  ( >  in28 in20))  ( >=  in28 in21))  ( >  in28 in21))  ( >=  in28 in22))  ( >  in28 in22))  ( >=  in28 in23))  ( >  in28 in23))  ( >=  in28 in24))  ( >  in28 in24))  ( >=  in28 in25))  ( >  in28 in25))  ( >=  in28 in26))  ( >  in28 in26))  ( >=  in28 in27))  ( >  in28 in27))  ( >=  in29 in0))  ( >  in29 in0))  ( >=  in29 in1))  ( >  in29 in1))  ( >=  in29 in2))  ( >  in29 in2))  ( >=  in29 in3))  ( >  in29 in3))  ( >=  in29 in4))  ( >  in29 in4))  ( >=  in29 in5))  ( >  in29 in5))  ( >=  in29 in6))  ( >  in29 in6))  ( >=  in29 in7))  ( >  in29 in7))  ( >=  in29 in8))  ( >  in29 in8))  ( >=  in29 in9))  ( >  in29 in9))  ( >=  in29 in10))  ( >  in29 in10))  ( >=  in29 in11))  ( >  in29 in11))  ( >=  in29 in12))  ( >  in29 in12))  ( >=  in29 in13))  ( >  in29 in13))  ( >=  in29 in14))  ( >  in29 in14))  ( >=  in29 in15))  ( >  in29 in15))  ( >=  in29 in16))  ( >  in29 in16))  ( >=  in29 in17))  ( >  in29 in17))  ( >=  in29 in18))  ( >  in29 in18))  ( >=  in29 in19))  ( >  in29 in19))  ( >=  in29 in20))  ( >  in29 in20))  ( >=  in29 in21))  ( >  in29 in21))  ( >=  in29 in22))  ( >  in29 in22))  ( >=  in29 in23))  ( >  in29 in23))  ( >=  in29 in24))  ( >  in29 in24))  ( >=  in29 in25))  ( >  in29 in25))  ( >=  in29 in26))  ( >  in29 in26))  ( >=  in29 in27))  ( >  in29 in27))  ( >=  in29 in28))  ( >  in29 in28)))",
      "response": "Worst-case time complexity: O(N^2)\n- In the worst case (e.g., strictly increasing or strictly decreasing inputs), the BST becomes a skewed chain. The i-th insertion takes O(i), giving O(1 + 2 + ... + N) = O(N^2). The final height computation is O(N), which is dominated by the insertions.\n\nSMT2 constraint (forces worst case via strictly increasing inputs in0 < in1 < ... < in29):\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(declare-const in8 Int)\n(declare-const in9 Int)\n(declare-const in10 Int)\n(declare-const in11 Int)\n(declare-const in12 Int)\n(declare-const in13 Int)\n(declare-const in14 Int)\n(declare-const in15 Int)\n(declare-const in16 Int)\n(declare-const in17 Int)\n(declare-const in18 Int)\n(declare-const in19 Int)\n(declare-const in20 Int)\n(declare-const in21 Int)\n(declare-const in22 Int)\n(declare-const in23 Int)\n(declare-const in24 Int)\n(declare-const in25 Int)\n(declare-const in26 Int)\n(declare-const in27 Int)\n(declare-const in28 Int)\n(declare-const in29 Int)\n(assert (< in0 in1))\n(assert (< in1 in2))\n(assert (< in2 in3))\n(assert (< in3 in4))\n(assert (< in4 in5))\n(assert (< in5 in6))\n(assert (< in6 in7))\n(assert (< in7 in8))\n(assert (< in8 in9))\n(assert (< in9 in10))\n(assert (< in10 in11))\n(assert (< in11 in12))\n(assert (< in12 in13))\n(assert (< in13 in14))\n(assert (< in14 in15))\n(assert (< in15 in16))\n(assert (< in16 in17))\n(assert (< in17 in18))\n(assert (< in18 in19))\n(assert (< in19 in20))\n(assert (< in20 in21))\n(assert (< in21 in22))\n(assert (< in22 in23))\n(assert (< in23 in24))\n(assert (< in24 in25))\n(assert (< in25 in26))\n(assert (< in26 in27))\n(assert (< in27 in28))\n(assert (< in28 in29))\n(check-sat)\n(get-model)"
    }
  },
  "SubarraySumFinder": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class SubarraySumFinder {\n    public static boolean hasSubarrayWithSum(int[] arr, int target) {\n        int n = arr.length;\n        for (int i = 0; i < n; i++){\n            int sum = 0;\n            for (int j = i; j < n; j++){\n                sum += arr[j];\n                if (sum == target) return true;\n            }\n        }\n        return false;\n    }\n    \n    public static void main(String[] args) {\n        int N = Integer.parseInt(args[0]);\n        int[] arr = new int[N];\n        for (int i = 0; i < N; i++){\n            arr[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n        \n        int target = Debug.makeSymbolicInteger(\"t\");\n        // Constrain values for manageability.\n        for (int i = 0; i < N; i++){\n            if (arr[i] < -10 || arr[i] > 10) return;\n        }\n        if (target < -100 || target > 100) return;\n        \n        hasSubarrayWithSum(arr, target);\n    }\n}\n",
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const t Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 -10)  ( <=  in0 10))  ( >=  in1 -10))  ( <=  in1 10))  ( >=  in2 -10))  ( <=  in2 10))  ( >=  in3 -10))  ( <=  in3 10))  ( >=  in4 -10))  ( <=  in4 10))  ( >=  in5 -10))  ( <=  in5 10))  ( >=  in6 -10))  ( <=  in6 10))  ( >=  in7 -10))  ( <=  in7 10))  ( >=  in8 -10))  ( <=  in8 10))  ( >=  in9 -10))  ( <=  in9 10))  ( >=  in10 -10))  ( <=  in10 10))  ( >=  in11 -10))  ( <=  in11 10))  ( >=  in12 -10))  ( <=  in12 10))  ( >=  in13 -10))  ( <=  in13 10))  ( >=  in14 -10))  ( <=  in14 10))  ( >=  in15 -10))  ( <=  in15 10))  ( >=  t -100))  ( <=  t 100)) (not ( = in0 t))) (not ( = ( +  in1 in0) t))) (not ( = ( +  in2 ( +  in1 in0)) t))) (not ( = ( +  in3 ( +  in2 ( +  in1 in0))) t))) (not ( = ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))) t))) (not ( = ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))))) t))) (not ( = in1 t))) (not ( = ( +  in2 in1) t))) (not ( = ( +  in3 ( +  in2 in1)) t))) (not ( = ( +  in4 ( +  in3 ( +  in2 in1))) t))) (not ( = ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))))) t))) (not ( = in2 t))) (not ( = ( +  in3 in2) t))) (not ( = ( +  in4 ( +  in3 in2)) t))) (not ( = ( +  in5 ( +  in4 ( +  in3 in2))) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))))) t))) (not ( = in3 t))) (not ( = ( +  in4 in3) t))) (not ( = ( +  in5 ( +  in4 in3)) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 in3))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))))) t))) (not ( = in4 t))) (not ( = ( +  in5 in4) t))) (not ( = ( +  in6 ( +  in5 in4)) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 in4))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))))) t))) (not ( = in5 t))) (not ( = ( +  in6 in5) t))) (not ( = ( +  in7 ( +  in6 in5)) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 in5))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))))) t))) (not ( = in6 t))) (not ( = ( +  in7 in6) t))) (not ( = ( +  in8 ( +  in7 in6)) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 in6))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))))) t))) (not ( = in7 t))) (not ( = ( +  in8 in7) t))) (not ( = ( +  in9 ( +  in8 in7)) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 in7))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))))) t))) (not ( = in8 t))) (not ( = ( +  in9 in8) t))) (not ( = ( +  in10 ( +  in9 in8)) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 in8))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))))) t))) (not ( = in9 t))) (not ( = ( +  in10 in9) t))) (not ( = ( +  in11 ( +  in10 in9)) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 in9))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))))) t))) (not ( = in10 t))) (not ( = ( +  in11 in10) t))) (not ( = ( +  in12 ( +  in11 in10)) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 in10))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10)))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10))))) t))) (not ( = in11 t))) (not ( = ( +  in12 in11) t))) (not ( = ( +  in13 ( +  in12 in11)) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 in11))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11)))) t))) (not ( = in12 t))) (not ( = ( +  in13 in12) t))) (not ( = ( +  in14 ( +  in13 in12)) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 in12))) t))) (not ( = in13 t))) (not ( = ( +  in14 in13) t))) (not ( = ( +  in15 ( +  in14 in13)) t))) (not ( = in14 t))) (not ( = ( +  in15 in14) t))) (not ( = in15 t))))",
      "response": "Worst-case time complexity: O(n^2). The nested loops consider all O(n^2) subarrays; in the worst case, none matches the target and the method completes all iterations.\n\nSMT2 constraint for n = 16 (values constrained to the ranges in the code, and enforcing the worst-case path where no subarray sum equals t):\n\nAnswer:\n(set-logic QF_LIA)\n\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun t () Int)\n\n; range constraints from the program\n(assert (and (<= -10 in0) (<= in0 10)))\n(assert (and (<= -10 in1) (<= in1 10)))\n(assert (and (<= -10 in2) (<= in2 10)))\n(assert (and (<= -10 in3) (<= in3 10)))\n(assert (and (<= -10 in4) (<= in4 10)))\n(assert (and (<= -10 in5) (<= in5 10)))\n(assert (and (<= -10 in6) (<= in6 10)))\n(assert (and (<= -10 in7) (<= in7 10)))\n(assert (and (<= -10 in8) (<= in8 10)))\n(assert (and (<= -10 in9) (<= in9 10)))\n(assert (and (<= -10 in10) (<= in10 10)))\n(assert (and (<= -10 in11) (<= in11 10)))\n(assert (and (<= -10 in12) (<= in12 10)))\n(assert (and (<= -10 in13) (<= in13 10)))\n(assert (and (<= -10 in14) (<= in14 10)))\n(assert (and (<= -10 in15) (<= in15 10)))\n(assert (and (<= -100 t) (<= t 100)))\n\n; worst-case path: no subarray sum equals t\n(assert (not (= in0 t)))\n(assert (not (= (+ in0 in1) t)))\n(assert (not (= (+ in0 in1 in2) t)))\n(assert (not (= (+ in0 in1 in2 in3) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6 in7) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6 in7 in8) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6 in7 in8 in9) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6 in7 in8 in9 in10) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in0 in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in1 t)))\n(assert (not (= (+ in1 in2) t)))\n(assert (not (= (+ in1 in2 in3) t)))\n(assert (not (= (+ in1 in2 in3 in4) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6 in7) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6 in7 in8) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6 in7 in8 in9) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6 in7 in8 in9 in10) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in2 t)))\n(assert (not (= (+ in2 in3) t)))\n(assert (not (= (+ in2 in3 in4) t)))\n(assert (not (= (+ in2 in3 in4 in5) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6 in7) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6 in7 in8) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6 in7 in8 in9) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6 in7 in8 in9 in10) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6 in7 in8 in9 in10 in11) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in2 in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in3 t)))\n(assert (not (= (+ in3 in4) t)))\n(assert (not (= (+ in3 in4 in5) t)))\n(assert (not (= (+ in3 in4 in5 in6) t)))\n(assert (not (= (+ in3 in4 in5 in6 in7) t)))\n(assert (not (= (+ in3 in4 in5 in6 in7 in8) t)))\n(assert (not (= (+ in3 in4 in5 in6 in7 in8 in9) t)))\n(assert (not (= (+ in3 in4 in5 in6 in7 in8 in9 in10) t)))\n(assert (not (= (+ in3 in4 in5 in6 in7 in8 in9 in10 in11) t)))\n(assert (not (= (+ in3 in4 in5 in6 in7 in8 in9 in10 in11 in12) t)))\n(assert (not (= (+ in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in3 in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in4 t)))\n(assert (not (= (+ in4 in5) t)))\n(assert (not (= (+ in4 in5 in6) t)))\n(assert (not (= (+ in4 in5 in6 in7) t)))\n(assert (not (= (+ in4 in5 in6 in7 in8) t)))\n(assert (not (= (+ in4 in5 in6 in7 in8 in9) t)))\n(assert (not (= (+ in4 in5 in6 in7 in8 in9 in10) t)))\n(assert (not (= (+ in4 in5 in6 in7 in8 in9 in10 in11) t)))\n(assert (not (= (+ in4 in5 in6 in7 in8 in9 in10 in11 in12) t)))\n(assert (not (= (+ in4 in5 in6 in7 in8 in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in4 in5 in6 in7 in8 in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in5 t)))\n(assert (not (= (+ in5 in6) t)))\n(assert (not (= (+ in5 in6 in7) t)))\n(assert (not (= (+ in5 in6 in7 in8) t)))\n(assert (not (= (+ in5 in6 in7 in8 in9) t)))\n(assert (not (= (+ in5 in6 in7 in8 in9 in10) t)))\n(assert (not (= (+ in5 in6 in7 in8 in9 in10 in11) t)))\n(assert (not (= (+ in5 in6 in7 in8 in9 in10 in11 in12) t)))\n(assert (not (= (+ in5 in6 in7 in8 in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in5 in6 in7 in8 in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in5 in6 in7 in8 in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in6 t)))\n(assert (not (= (+ in6 in7) t)))\n(assert (not (= (+ in6 in7 in8) t)))\n(assert (not (= (+ in6 in7 in8 in9) t)))\n(assert (not (= (+ in6 in7 in8 in9 in10) t)))\n(assert (not (= (+ in6 in7 in8 in9 in10 in11) t)))\n(assert (not (= (+ in6 in7 in8 in9 in10 in11 in12) t)))\n(assert (not (= (+ in6 in7 in8 in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in6 in7 in8 in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in6 in7 in8 in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in7 t)))\n(assert (not (= (+ in7 in8) t)))\n(assert (not (= (+ in7 in8 in9) t)))\n(assert (not (= (+ in7 in8 in9 in10) t)))\n(assert (not (= (+ in7 in8 in9 in10 in11) t)))\n(assert (not (= (+ in7 in8 in9 in10 in11 in12) t)))\n(assert (not (= (+ in7 in8 in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in7 in8 in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in7 in8 in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in8 t)))\n(assert (not (= (+ in8 in9) t)))\n(assert (not (= (+ in8 in9 in10) t)))\n(assert (not (= (+ in8 in9 in10 in11) t)))\n(assert (not (= (+ in8 in9 in10 in11 in12) t)))\n(assert (not (= (+ in8 in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in8 in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in8 in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in9 t)))\n(assert (not (= (+ in9 in10) t)))\n(assert (not (= (+ in9 in10 in11) t)))\n(assert (not (= (+ in9 in10 in11 in12) t)))\n(assert (not (= (+ in9 in10 in11 in12 in13) t)))\n(assert (not (= (+ in9 in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in9 in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in10 t)))\n(assert (not (= (+ in10 in11) t)))\n(assert (not (= (+ in10 in11 in12) t)))\n(assert (not (= (+ in10 in11 in12 in13) t)))\n(assert (not (= (+ in10 in11 in12 in13 in14) t)))\n(assert (not (= (+ in10 in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in11 t)))\n(assert (not (= (+ in11 in12) t)))\n(assert (not (= (+ in11 in12 in13) t)))\n(assert (not (= (+ in11 in12 in13 in14) t)))\n(assert (not (= (+ in11 in12 in13 in14 in15) t)))\n\n(assert (not (= in12 t)))\n(assert (not (= (+ in12 in13) t)))\n(assert (not (= (+ in12 in13 in14) t)))\n(assert (not (= (+ in12 in13 in14 in15) t)))\n\n(assert (not (= in13 t)))\n(assert (not (= (+ in13 in14) t)))\n(assert (not (= (+ in13 in14 in15) t)))\n\n(assert (not (= in14 t)))\n(assert (not (= (+ in14 in15) t)))\n\n(assert (not (= in15 t)))"
    },
    "2": {
      "constants": "(declare-const t Int)\n(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and  ( >=  in0 -10)  ( <=  in0 10))  ( >=  in1 -10))  ( <=  in1 10))  ( >=  t -100))  ( <=  t 100)) (not ( = in0 t))) (not ( = ( +  in1 in0) t))) (not ( = in1 t))))",
      "response": "- Worst-case time complexity: O(n^2). This occurs when no subarray sum equals the target, so both nested loops run to completion without early return.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const t Int)\n; bounds from the program\n(assert (and (>= in0 -10) (<= in0 10)))\n(assert (and (>= in1 -10) (<= in1 10)))\n(assert (and (>= t -100) (<= t 100)))\n; worst-case path: no subarray sum equals target\n(assert (not (= in0 t)))\n(assert (not (= (+ in0 in1) t)))\n(assert (not (= in1 t)))"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const t Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 -10)  ( <=  in0 10))  ( >=  in1 -10))  ( <=  in1 10))  ( >=  in2 -10))  ( <=  in2 10))  ( >=  in3 -10))  ( <=  in3 10))  ( >=  in4 -10))  ( <=  in4 10))  ( >=  in5 -10))  ( <=  in5 10))  ( >=  in6 -10))  ( <=  in6 10))  ( >=  in7 -10))  ( <=  in7 10))  ( >=  in8 -10))  ( <=  in8 10))  ( >=  in9 -10))  ( <=  in9 10))  ( >=  in10 -10))  ( <=  in10 10))  ( >=  in11 -10))  ( <=  in11 10))  ( >=  in12 -10))  ( <=  in12 10))  ( >=  in13 -10))  ( <=  in13 10))  ( >=  in14 -10))  ( <=  in14 10))  ( >=  in15 -10))  ( <=  in15 10))  ( >=  in16 -10))  ( <=  in16 10))  ( >=  in17 -10))  ( <=  in17 10))  ( >=  in18 -10))  ( <=  in18 10))  ( >=  in19 -10))  ( <=  in19 10))  ( >=  in20 -10))  ( <=  in20 10))  ( >=  in21 -10))  ( <=  in21 10))  ( >=  in22 -10))  ( <=  in22 10))  ( >=  in23 -10))  ( <=  in23 10))  ( >=  in24 -10))  ( <=  in24 10))  ( >=  in25 -10))  ( <=  in25 10))  ( >=  in26 -10))  ( <=  in26 10))  ( >=  in27 -10))  ( <=  in27 10))  ( >=  in28 -10))  ( <=  in28 10))  ( >=  in29 -10))  ( <=  in29 10))  ( >=  t -100))  ( <=  t 100)) (not ( = in0 t))) (not ( = ( +  in1 in0) t))) (not ( = ( +  in2 ( +  in1 in0)) t))) (not ( = ( +  in3 ( +  in2 ( +  in1 in0))) t))) (not ( = ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))) t))) (not ( = ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))))))))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))))))))))))))))))))))))) t))) (not ( = in1 t))) (not ( = ( +  in2 in1) t))) (not ( = ( +  in3 ( +  in2 in1)) t))) (not ( = ( +  in4 ( +  in3 ( +  in2 in1))) t))) (not ( = ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))))))))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))))))))))))))))))))))))) t))) (not ( = in2 t))) (not ( = ( +  in3 in2) t))) (not ( = ( +  in4 ( +  in3 in2)) t))) (not ( = ( +  in5 ( +  in4 ( +  in3 in2))) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))))))))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))))))))))))))))))))))))) t))) (not ( = in3 t))) (not ( = ( +  in4 in3) t))) (not ( = ( +  in5 ( +  in4 in3)) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 in3))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3))))))))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))))))))))))))))))))))))) t))) (not ( = in4 t))) (not ( = ( +  in5 in4) t))) (not ( = ( +  in6 ( +  in5 in4)) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 in4))) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4)))))))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 ( +  in5 in4))))))))))))))))))))))))) t))) (not ( = in5 t))) (not ( = ( +  in6 in5) t))) (not ( = ( +  in7 ( +  in6 in5)) t))) (not ( = ( +  in8 ( +  in7 ( +  in6 in5))) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5))))))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 ( +  in6 in5)))))))))))))))))))))))) t))) (not ( = in6 t))) (not ( = ( +  in7 in6) t))) (not ( = ( +  in8 ( +  in7 in6)) t))) (not ( = ( +  in9 ( +  in8 ( +  in7 in6))) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6)))))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 ( +  in7 in6))))))))))))))))))))))) t))) (not ( = in7 t))) (not ( = ( +  in8 in7) t))) (not ( = ( +  in9 ( +  in8 in7)) t))) (not ( = ( +  in10 ( +  in9 ( +  in8 in7))) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7))))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 ( +  in8 in7)))))))))))))))))))))) t))) (not ( = in8 t))) (not ( = ( +  in9 in8) t))) (not ( = ( +  in10 ( +  in9 in8)) t))) (not ( = ( +  in11 ( +  in10 ( +  in9 in8))) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8)))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 ( +  in9 in8))))))))))))))))))))) t))) (not ( = in9 t))) (not ( = ( +  in10 in9) t))) (not ( = ( +  in11 ( +  in10 in9)) t))) (not ( = ( +  in12 ( +  in11 ( +  in10 in9))) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9))))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9))))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9))))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9))))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9))))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9))))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9))))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9))))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 ( +  in10 in9)))))))))))))))))))) t))) (not ( = in10 t))) (not ( = ( +  in11 in10) t))) (not ( = ( +  in12 ( +  in11 in10)) t))) (not ( = ( +  in13 ( +  in12 ( +  in11 in10))) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10)))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10))))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10)))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10))))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10)))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10))))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10)))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10))))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10)))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10))))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10)))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10))))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10)))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10))))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10)))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 ( +  in11 in10))))))))))))))))))) t))) (not ( = in11 t))) (not ( = ( +  in12 in11) t))) (not ( = ( +  in13 ( +  in12 in11)) t))) (not ( = ( +  in14 ( +  in13 ( +  in12 in11))) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11)))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11))))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11)))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11))))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11)))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11))))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11)))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11))))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11)))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11))))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11)))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11))))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11)))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11))))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 ( +  in12 in11)))))))))))))))))) t))) (not ( = in12 t))) (not ( = ( +  in13 in12) t))) (not ( = ( +  in14 ( +  in13 in12)) t))) (not ( = ( +  in15 ( +  in14 ( +  in13 in12))) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12)))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12))))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12)))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12))))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12)))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12))))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12)))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12))))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12)))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12))))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12)))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12))))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12)))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 ( +  in13 in12))))))))))))))))) t))) (not ( = in13 t))) (not ( = ( +  in14 in13) t))) (not ( = ( +  in15 ( +  in14 in13)) t))) (not ( = ( +  in16 ( +  in15 ( +  in14 in13))) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13)))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13))))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13)))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13))))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13)))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13))))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13)))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13))))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13)))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13))))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13)))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13))))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 ( +  in14 in13)))))))))))))))) t))) (not ( = in14 t))) (not ( = ( +  in15 in14) t))) (not ( = ( +  in16 ( +  in15 in14)) t))) (not ( = ( +  in17 ( +  in16 ( +  in15 in14))) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14)))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14))))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14)))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14))))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14)))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14))))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14)))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14))))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14)))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14))))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14)))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 ( +  in15 in14))))))))))))))) t))) (not ( = in15 t))) (not ( = ( +  in16 in15) t))) (not ( = ( +  in17 ( +  in16 in15)) t))) (not ( = ( +  in18 ( +  in17 ( +  in16 in15))) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15)))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15))))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15)))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15))))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15)))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15))))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15)))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15))))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15)))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15))))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 ( +  in16 in15)))))))))))))) t))) (not ( = in16 t))) (not ( = ( +  in17 in16) t))) (not ( = ( +  in18 ( +  in17 in16)) t))) (not ( = ( +  in19 ( +  in18 ( +  in17 in16))) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16)))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16))))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16)))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16))))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16)))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16))))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16)))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16))))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16)))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 ( +  in17 in16))))))))))))) t))) (not ( = in17 t))) (not ( = ( +  in18 in17) t))) (not ( = ( +  in19 ( +  in18 in17)) t))) (not ( = ( +  in20 ( +  in19 ( +  in18 in17))) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 ( +  in18 in17)))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 in17))))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 in17)))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 in17))))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 in17)))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 in17))))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 in17)))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 in17))))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 ( +  in18 in17)))))))))))) t))) (not ( = in18 t))) (not ( = ( +  in19 in18) t))) (not ( = ( +  in20 ( +  in19 in18)) t))) (not ( = ( +  in21 ( +  in20 ( +  in19 in18))) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 ( +  in19 in18)))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 in18))))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 in18)))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 in18))))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 in18)))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 in18))))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 in18)))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 ( +  in19 in18))))))))))) t))) (not ( = in19 t))) (not ( = ( +  in20 in19) t))) (not ( = ( +  in21 ( +  in20 in19)) t))) (not ( = ( +  in22 ( +  in21 ( +  in20 in19))) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 ( +  in20 in19)))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 in19))))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 in19)))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 in19))))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 in19)))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 in19))))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 ( +  in20 in19)))))))))) t))) (not ( = in20 t))) (not ( = ( +  in21 in20) t))) (not ( = ( +  in22 ( +  in21 in20)) t))) (not ( = ( +  in23 ( +  in22 ( +  in21 in20))) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 ( +  in21 in20)))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 in20))))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 in20)))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 in20))))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 in20)))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 ( +  in21 in20))))))))) t))) (not ( = in21 t))) (not ( = ( +  in22 in21) t))) (not ( = ( +  in23 ( +  in22 in21)) t))) (not ( = ( +  in24 ( +  in23 ( +  in22 in21))) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 ( +  in22 in21)))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 in21))))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 in21)))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 in21))))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 ( +  in22 in21)))))))) t))) (not ( = in22 t))) (not ( = ( +  in23 in22) t))) (not ( = ( +  in24 ( +  in23 in22)) t))) (not ( = ( +  in25 ( +  in24 ( +  in23 in22))) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 ( +  in23 in22)))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 in22))))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 in22)))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 ( +  in23 in22))))))) t))) (not ( = in23 t))) (not ( = ( +  in24 in23) t))) (not ( = ( +  in25 ( +  in24 in23)) t))) (not ( = ( +  in26 ( +  in25 ( +  in24 in23))) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 ( +  in24 in23)))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 in23))))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 ( +  in24 in23)))))) t))) (not ( = in24 t))) (not ( = ( +  in25 in24) t))) (not ( = ( +  in26 ( +  in25 in24)) t))) (not ( = ( +  in27 ( +  in26 ( +  in25 in24))) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 ( +  in25 in24)))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 ( +  in25 in24))))) t))) (not ( = in25 t))) (not ( = ( +  in26 in25) t))) (not ( = ( +  in27 ( +  in26 in25)) t))) (not ( = ( +  in28 ( +  in27 ( +  in26 in25))) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 ( +  in26 in25)))) t))) (not ( = in26 t))) (not ( = ( +  in27 in26) t))) (not ( = ( +  in28 ( +  in27 in26)) t))) (not ( = ( +  in29 ( +  in28 ( +  in27 in26))) t))) (not ( = in27 t))) (not ( = ( +  in28 in27) t))) (not ( = ( +  in29 ( +  in28 in27)) t))) (not ( = in28 t))) (not ( = ( +  in29 in28) t))) (not ( = in29 t))))",
      "response": "- Worst-case time complexity: Theta(n^2). The nested loops in hasSubarrayWithSum scan all O(n^2) subarrays in the worst case.\n\nAnswer:\n(set-logic UFLIA)\n\n; Declarations\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(declare-const in8 Int)\n(declare-const in9 Int)\n(declare-const in10 Int)\n(declare-const in11 Int)\n(declare-const in12 Int)\n(declare-const in13 Int)\n(declare-const in14 Int)\n(declare-const in15 Int)\n(declare-const in16 Int)\n(declare-const in17 Int)\n(declare-const in18 Int)\n(declare-const in19 Int)\n(declare-const in20 Int)\n(declare-const in21 Int)\n(declare-const in22 Int)\n(declare-const in23 Int)\n(declare-const in24 Int)\n(declare-const in25 Int)\n(declare-const in26 Int)\n(declare-const in27 Int)\n(declare-const in28 Int)\n(declare-const in29 Int)\n(declare-const t Int)\n\n; Bounds from the program\n(assert (and (>= in0 -10) (<= in0 10)))\n(assert (and (>= in1 -10) (<= in1 10)))\n(assert (and (>= in2 -10) (<= in2 10)))\n(assert (and (>= in3 -10) (<= in3 10)))\n(assert (and (>= in4 -10) (<= in4 10)))\n(assert (and (>= in5 -10) (<= in5 10)))\n(assert (and (>= in6 -10) (<= in6 10)))\n(assert (and (>= in7 -10) (<= in7 10)))\n(assert (and (>= in8 -10) (<= in8 10)))\n(assert (and (>= in9 -10) (<= in9 10)))\n(assert (and (>= in10 -10) (<= in10 10)))\n(assert (and (>= in11 -10) (<= in11 10)))\n(assert (and (>= in12 -10) (<= in12 10)))\n(assert (and (>= in13 -10) (<= in13 10)))\n(assert (and (>= in14 -10) (<= in14 10)))\n(assert (and (>= in15 -10) (<= in15 10)))\n(assert (and (>= in16 -10) (<= in16 10)))\n(assert (and (>= in17 -10) (<= in17 10)))\n(assert (and (>= in18 -10) (<= in18 10)))\n(assert (and (>= in19 -10) (<= in19 10)))\n(assert (and (>= in20 -10) (<= in20 10)))\n(assert (and (>= in21 -10) (<= in21 10)))\n(assert (and (>= in22 -10) (<= in22 10)))\n(assert (and (>= in23 -10) (<= in23 10)))\n(assert (and (>= in24 -10) (<= in24 10)))\n(assert (and (>= in25 -10) (<= in25 10)))\n(assert (and (>= in26 -10) (<= in26 10)))\n(assert (and (>= in27 -10) (<= in27 10)))\n(assert (and (>= in28 -10) (<= in28 10)))\n(assert (and (>= in29 -10) (<= in29 10)))\n(assert (and (>= t -100) (<= t 100)))\n\n; Prefix sums s0..s30\n(define-fun s0 () Int 0)\n(define-fun s1 () Int (+ s0 in0))\n(define-fun s2 () Int (+ s1 in1))\n(define-fun s3 () Int (+ s2 in2))\n(define-fun s4 () Int (+ s3 in3))\n(define-fun s5 () Int (+ s4 in4))\n(define-fun s6 () Int (+ s5 in5))\n(define-fun s7 () Int (+ s6 in6))\n(define-fun s8 () Int (+ s7 in7))\n(define-fun s9 () Int (+ s8 in8))\n(define-fun s10 () Int (+ s9 in9))\n(define-fun s11 () Int (+ s10 in10))\n(define-fun s12 () Int (+ s11 in11))\n(define-fun s13 () Int (+ s12 in12))\n(define-fun s14 () Int (+ s13 in13))\n(define-fun s15 () Int (+ s14 in14))\n(define-fun s16 () Int (+ s15 in15))\n(define-fun s17 () Int (+ s16 in16))\n(define-fun s18 () Int (+ s17 in17))\n(define-fun s19 () Int (+ s18 in18))\n(define-fun s20 () Int (+ s19 in19))\n(define-fun s21 () Int (+ s20 in20))\n(define-fun s22 () Int (+ s21 in21))\n(define-fun s23 () Int (+ s22 in22))\n(define-fun s24 () Int (+ s23 in23))\n(define-fun s25 () Int (+ s24 in24))\n(define-fun s26 () Int (+ s25 in25))\n(define-fun s27 () Int (+ s26 in26))\n(define-fun s28 () Int (+ s27 in27))\n(define-fun s29 () Int (+ s28 in28))\n(define-fun s30 () Int (+ s29 in29))\n\n; Selector for prefix sums by index 0..30\n(define-fun S ((k Int)) Int\n  (ite (= k 0) s0\n  (ite (= k 1) s1\n  (ite (= k 2) s2\n  (ite (= k 3) s3\n  (ite (= k 4) s4\n  (ite (= k 5) s5\n  (ite (= k 6) s6\n  (ite (= k 7) s7\n  (ite (= k 8) s8\n  (ite (= k 9) s9\n  (ite (= k 10) s10\n  (ite (= k 11) s11\n  (ite (= k 12) s12\n  (ite (= k 13) s13\n  (ite (= k 14) s14\n  (ite (= k 15) s15\n  (ite (= k 16) s16\n  (ite (= k 17) s17\n  (ite (= k 18) s18\n  (ite (= k 19) s19\n  (ite (= k 20) s20\n  (ite (= k 21) s21\n  (ite (= k 22) s22\n  (ite (= k 23) s23\n  (ite (= k 24) s24\n  (ite (= k 25) s25\n  (ite (= k 26) s26\n  (ite (= k 27) s27\n  (ite (= k 28) s28\n  (ite (= k 29) s29\n  (ite (= k 30) s30 0)))))))))))))))))))))))))))))\n\n; There exists a subarray sum equal to t\n(assert\n  (exists ((i Int) (j Int))\n    (and (<= 0 i) (<= i j) (<= j 29)\n         (= t (- (S (+ j 1)) (S i))))))\n\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const t Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 -10)  ( <=  in0 10))  ( >=  in1 -10))  ( <=  in1 10))  ( >=  in2 -10))  ( <=  in2 10))  ( >=  in3 -10))  ( <=  in3 10))  ( >=  in4 -10))  ( <=  in4 10))  ( >=  in5 -10))  ( <=  in5 10))  ( >=  in6 -10))  ( <=  in6 10))  ( >=  in7 -10))  ( <=  in7 10))  ( >=  t -100))  ( <=  t 100)) (not ( = in0 t))) (not ( = ( +  in1 in0) t))) (not ( = ( +  in2 ( +  in1 in0)) t))) (not ( = ( +  in3 ( +  in2 ( +  in1 in0))) t))) (not ( = ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))) t))) (not ( = ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0)))))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 ( +  in1 in0))))))) t))) (not ( = in1 t))) (not ( = ( +  in2 in1) t))) (not ( = ( +  in3 ( +  in2 in1)) t))) (not ( = ( +  in4 ( +  in3 ( +  in2 in1))) t))) (not ( = ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1))))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 ( +  in2 in1)))))) t))) (not ( = in2 t))) (not ( = ( +  in3 in2) t))) (not ( = ( +  in4 ( +  in3 in2)) t))) (not ( = ( +  in5 ( +  in4 ( +  in3 in2))) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2)))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 ( +  in3 in2))))) t))) (not ( = in3 t))) (not ( = ( +  in4 in3) t))) (not ( = ( +  in5 ( +  in4 in3)) t))) (not ( = ( +  in6 ( +  in5 ( +  in4 in3))) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 ( +  in4 in3)))) t))) (not ( = in4 t))) (not ( = ( +  in5 in4) t))) (not ( = ( +  in6 ( +  in5 in4)) t))) (not ( = ( +  in7 ( +  in6 ( +  in5 in4))) t))) (not ( = in5 t))) (not ( = ( +  in6 in5) t))) (not ( = ( +  in7 ( +  in6 in5)) t))) (not ( = in6 t))) (not ( = ( +  in7 in6) t))) (not ( = in7 t))))",
      "response": "Worst-case time complexity: O(n^2). The nested loops in hasSubarrayWithSum iterate over all O(n^2) contiguous subarrays, accumulating sums.\n\nBelow is an SMT-LIB v2 encoding for n = 8, capturing the input bounds and the condition that some contiguous subarray sums to t (i.e., the function returns true).\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(declare-const t Int)\n\n; bounds from the program\n(assert (and (>= in0 -10) (<= in0 10)))\n(assert (and (>= in1 -10) (<= in1 10)))\n(assert (and (>= in2 -10) (<= in2 10)))\n(assert (and (>= in3 -10) (<= in3 10)))\n(assert (and (>= in4 -10) (<= in4 10)))\n(assert (and (>= in5 -10) (<= in5 10)))\n(assert (and (>= in6 -10) (<= in6 10)))\n(assert (and (>= in7 -10) (<= in7 10)))\n(assert (and (>= t -100) (<= t 100)))\n\n; there exists a contiguous subarray whose sum equals t\n(assert\n  (or\n    (= t in0)\n    (= t (+ in0 in1))\n    (= t (+ in0 in1 in2))\n    (= t (+ in0 in1 in2 in3))\n    (= t (+ in0 in1 in2 in3 in4))\n    (= t (+ in0 in1 in2 in3 in4 in5))\n    (= t (+ in0 in1 in2 in3 in4 in5 in6))\n    (= t (+ in0 in1 in2 in3 in4 in5 in6 in7))\n\n    (= t in1)\n    (= t (+ in1 in2))\n    (= t (+ in1 in2 in3))\n    (= t (+ in1 in2 in3 in4))\n    (= t (+ in1 in2 in3 in4 in5))\n    (= t (+ in1 in2 in3 in4 in5 in6))\n    (= t (+ in1 in2 in3 in4 in5 in6 in7))\n\n    (= t in2)\n    (= t (+ in2 in3))\n    (= t (+ in2 in3 in4))\n    (= t (+ in2 in3 in4 in5))\n    (= t (+ in2 in3 in4 in5 in6))\n    (= t (+ in2 in3 in4 in5 in6 in7))\n\n    (= t in3)\n    (= t (+ in3 in4))\n    (= t (+ in3 in4 in5))\n    (= t (+ in3 in4 in5 in6))\n    (= t (+ in3 in4 in5 in6 in7))\n\n    (= t in4)\n    (= t (+ in4 in5))\n    (= t (+ in4 in5 in6))\n    (= t (+ in4 in5 in6 in7))\n\n    (= t in5)\n    (= t (+ in5 in6))\n    (= t (+ in5 in6 in7))\n\n    (= t in6)\n    (= t (+ in6 in7))\n\n    (= t in7)\n  )\n)\n\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const t Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 -10)  ( <=  in0 10))  ( >=  in1 -10))  ( <=  in1 10))  ( >=  in2 -10))  ( <=  in2 10))  ( >=  in3 -10))  ( <=  in3 10))  ( >=  t -100))  ( <=  t 100)) (not ( = in0 t))) (not ( = ( +  in1 in0) t))) (not ( = ( +  in2 ( +  in1 in0)) t))) (not ( = ( +  in3 ( +  in2 ( +  in1 in0))) t))) (not ( = in1 t))) (not ( = ( +  in2 in1) t))) (not ( = ( +  in3 ( +  in2 in1)) t))) (not ( = in2 t))) (not ( = ( +  in3 in2) t))) (not ( = in3 t))))",
      "response": "Worst-case time complexity: O(n^2)\n- The nested (i, j) loops perform O(n^2) iterations in the worst case, dominating the O(n) setup in main.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun t () Int)\n(assert (and (>= in0 -10) (<= in0 10)\n             (>= in1 -10) (<= in1 10)\n             (>= in2 -10) (<= in2 10)\n             (>= in3 -10) (<= in3 10)\n             (>= t -100) (<= t 100)))\n(assert (or\n  (= t in0)\n  (= t (+ in0 in1))\n  (= t (+ in0 in1 in2))\n  (= t (+ in0 in1 in2 in3))\n  (= t in1)\n  (= t (+ in1 in2))\n  (= t (+ in1 in2 in3))\n  (= t in2)\n  (= t (+ in2 in3))\n  (= t in3)))\n(check-sat)\n(get-model)"
    }
  },
  "GreedyStepper": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class GreedyStepper {\n\n    public static void walk(int[] arr) {\n        int i = 0;\n        int steps = 0;\n\n        while (i < arr.length) {\n            if (arr[i] % 2 == 0 && i + 1 < arr.length) {\n                i += 2; // bigger step if even\n            } else {\n                i += 1; // normal step\n            }\n            steps++;\n        }\n\n        // Cost simulated: more steps = more work\n        for (int j = 0; j < steps * 100; j++) {\n            int x = j * j;\n        }\n    }\n\n    public static void main(String[] args) {\n        int N = Integer.parseInt(args[0]);\n        int[] arr = new int[N];\n        for (int i = 0; i < N; i++) {\n            arr[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n\n        walk(arr);\n    }\n}\n",
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (not ( = ( mod  in0 2) 0)) (not ( = ( mod  in1 2) 0))) (not ( = ( mod  in2 2) 0))) (not ( = ( mod  in3 2) 0))))",
      "response": "- Worst-case time complexity: O(n) (linear). Explanation: the while-loop advances by at least 1 each iteration, so it runs at most n times. The cost loop runs 100\u00b7steps times, with steps \u2264 n, so overall time is linear. Worst-case occurs when arr[0..n-2] are odd, forcing single-step advances.\n\n- SMT2 constraint for n = 4 (forcing the worst-case path, i.e., single-step at i = 0, 1, 2):\nAnswer:\n(set-logic QF_NIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(assert (= (mod in0 2) 1))\n(assert (= (mod in1 2) 1))\n(assert (= (mod in2 2) 1))"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (not ( = ( mod  in0 2) 0)) (not ( = ( mod  in1 2) 0))) (not ( = ( mod  in2 2) 0))) (not ( = ( mod  in3 2) 0))) (not ( = ( mod  in4 2) 0))) (not ( = ( mod  in5 2) 0))) (not ( = ( mod  in6 2) 0))) (not ( = ( mod  in7 2) 0))))",
      "response": "Worst-case time complexity: Theta(n)\n\nReasoning:\n- The while-loop advances by 1 when arr[i] is odd (or when i is at the last index). To maximize the number of iterations, force single-step moves for all i where i + 1 < n. That yields steps = n.\n- The trailing loop runs steps * 100 iterations, which is 100n in the worst case. Constant factors do not change asymptotic complexity, so overall time is linear.\n\nSMT2 constraint for n = 8 (force worst-case path by making in0..in6 odd; in7 unconstrained):\n\nAnswer:\n(set-logic QF_NIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(assert (not (= (mod in0 2) 0)))\n(assert (not (= (mod in1 2) 0)))\n(assert (not (= (mod in2 2) 0)))\n(assert (not (= (mod in3 2) 0)))\n(assert (not (= (mod in4 2) 0)))\n(assert (not (= (mod in5 2) 0)))\n(assert (not (= (mod in6 2) 0)))\n(check-sat)\n(get-model)"
    },
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = ( mod  in0 2) 0)) (not ( = ( mod  in1 2) 0))) (not ( = ( mod  in2 2) 0))) (not ( = ( mod  in3 2) 0))) (not ( = ( mod  in4 2) 0))) (not ( = ( mod  in5 2) 0))) (not ( = ( mod  in6 2) 0))) (not ( = ( mod  in7 2) 0))) (not ( = ( mod  in8 2) 0))) (not ( = ( mod  in9 2) 0))) (not ( = ( mod  in10 2) 0))) (not ( = ( mod  in11 2) 0))) (not ( = ( mod  in12 2) 0))) (not ( = ( mod  in13 2) 0))) (not ( = ( mod  in14 2) 0))) (not ( = ( mod  in15 2) 0))))",
      "response": "Worst-case time complexity: Theta(n). Reason: the while loop takes between ceil(n/2) and n iterations; the cost-simulating loop runs 100\u00b7steps iterations. In the worst case (all relevant entries odd), steps = n, so the total work is linear in n.\n\nWorst-case constraints for n = 16: ensure the fast 2-step branch never triggers. It suffices to make arr[i] odd for i = 0..14 (i = 15 doesn\u2019t matter because i+1 < n is false).\n\nAnswer:\n(set-logic QF_NIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(assert (= (mod in0 2) 1))\n(assert (= (mod in1 2) 1))\n(assert (= (mod in2 2) 1))\n(assert (= (mod in3 2) 1))\n(assert (= (mod in4 2) 1))\n(assert (= (mod in5 2) 1))\n(assert (= (mod in6 2) 1))\n(assert (= (mod in7 2) 1))\n(assert (= (mod in8 2) 1))\n(assert (= (mod in9 2) 1))\n(assert (= (mod in10 2) 1))\n(assert (= (mod in11 2) 1))\n(assert (= (mod in12 2) 1))\n(assert (= (mod in13 2) 1))\n(assert (= (mod in14 2) 1))\n; in15 unconstrained\n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and (not ( = ( mod  in0 2) 0)) (not ( = ( mod  in1 2) 0))))",
      "response": "Worst-case time complexity: \u0398(n)\n\nReasoning:\n- The while loop advances by 1 when arr[i] is odd (or at the last index), and by 2 when arr[i] is even and i+1 < n.\n- To maximize iterations (worst case), choose arr[i] odd for all i from 0 to n-2, yielding steps = n.\n- The final for-loop runs 100\u00b7steps = 100n iterations, each O(1).\n- Total worst-case is \u0398(n).\n\nWorst-case input condition:\n- For general n: for all i in [0, n-2], arr[i] is odd.\n- For n = 2: arr[0] is odd; arr[1] is unconstrained.\n\nAnswer:\n(set-logic QF_NIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(assert (= (mod in0 2) 1))"
    },
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = ( mod  in0 2) 0)) (not ( = ( mod  in1 2) 0))) (not ( = ( mod  in2 2) 0))) (not ( = ( mod  in3 2) 0))) (not ( = ( mod  in4 2) 0))) (not ( = ( mod  in5 2) 0))) (not ( = ( mod  in6 2) 0))) (not ( = ( mod  in7 2) 0))) (not ( = ( mod  in8 2) 0))) (not ( = ( mod  in9 2) 0))) (not ( = ( mod  in10 2) 0))) (not ( = ( mod  in11 2) 0))) (not ( = ( mod  in12 2) 0))) (not ( = ( mod  in13 2) 0))) (not ( = ( mod  in14 2) 0))) (not ( = ( mod  in15 2) 0))) (not ( = ( mod  in16 2) 0))) (not ( = ( mod  in17 2) 0))) (not ( = ( mod  in18 2) 0))) (not ( = ( mod  in19 2) 0))) (not ( = ( mod  in20 2) 0))) (not ( = ( mod  in21 2) 0))) (not ( = ( mod  in22 2) 0))) (not ( = ( mod  in23 2) 0))) (not ( = ( mod  in24 2) 0))) (not ( = ( mod  in25 2) 0))) (not ( = ( mod  in26 2) 0))) (not ( = ( mod  in27 2) 0))) (not ( = ( mod  in28 2) 0))) (not ( = ( mod  in29 2) 0))))",
      "response": "Worst-case time complexity: \u0398(n), where n is the array length.\n- The while loop performs one iteration per \u201cstep.\u201d The maximum number of steps occurs when the if-condition is always false for i = 0..n-2, i.e., when all those elements are odd, yielding steps = n.\n- The final loop performs steps*100 iterations, which is still \u0398(n). Total time is linear.\n\nSMT2 constraint for n = 30 (maximizing steps by forcing in0..in28 to be odd; in29 unconstrained):\n\nAnswer:\n(set-logic QF_NIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n(declare-fun in18 () Int)\n(declare-fun in19 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in22 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n(declare-fun in28 () Int)\n(declare-fun in29 () Int)\n(assert (= (mod in0 2) 1))\n(assert (= (mod in1 2) 1))\n(assert (= (mod in2 2) 1))\n(assert (= (mod in3 2) 1))\n(assert (= (mod in4 2) 1))\n(assert (= (mod in5 2) 1))\n(assert (= (mod in6 2) 1))\n(assert (= (mod in7 2) 1))\n(assert (= (mod in8 2) 1))\n(assert (= (mod in9 2) 1))\n(assert (= (mod in10 2) 1))\n(assert (= (mod in11 2) 1))\n(assert (= (mod in12 2) 1))\n(assert (= (mod in13 2) 1))\n(assert (= (mod in14 2) 1))\n(assert (= (mod in15 2) 1))\n(assert (= (mod in16 2) 1))\n(assert (= (mod in17 2) 1))\n(assert (= (mod in18 2) 1))\n(assert (= (mod in19 2) 1))\n(assert (= (mod in20 2) 1))\n(assert (= (mod in21 2) 1))\n(assert (= (mod in22 2) 1))\n(assert (= (mod in23 2) 1))\n(assert (= (mod in24 2) 1))\n(assert (= (mod in25 2) 1))\n(assert (= (mod in26 2) 1))\n(assert (= (mod in27 2) 1))\n(assert (= (mod in28 2) 1))"
    }
  },
  "DizzyRamp": {
    "program": "/**\n * @author Daniel Koh <daniel.koh@student.manchester.ac.uk>\n */\npackage custom;\n\nimport gov.nasa.jpf.symbc.Debug;\n\npublic class DizzyRamp {\n\n    public static void spin(int[] arr) {\n        int N = arr.length;\n        boolean climbing = true;\n        boolean spinning = false;\n\n        for (int i = 1; i < N; i++) {\n            if (arr[i] > arr[i - 1]) {\n                if (!climbing) {\n                    spinning = true;\n                }\n            } else if (arr[i] < arr[i - 1]) {\n                climbing = false;\n            } else {\n                spinning = true;\n            }\n        }\n\n        // Cost simulation: spin triggers a costly loop like SameHundred\n        if (spinning) {\n            int aa = 9999;\n            for (int i = 0; i < N; i++) {\n                aa = aa * aa; // Dummy heavy work\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        final int N = Integer.parseInt(args[0]);\n        int[] arr = new int[N];\n        for (int i = 0; i < N; i++) {\n            arr[i] = Debug.makeSymbolicInteger(\"in\" + i);\n        }\n\n        // This method's cost will be analyzed symbolically\n        spin(arr);\n    }\n}\n",
    "30": {
      "constants": "(declare-const in20 Int)\n(declare-const in22 Int)\n(declare-const in21 Int)\n(declare-const in24 Int)\n(declare-const in23 Int)\n(declare-const in26 Int)\n(declare-const in25 Int)\n(declare-const in28 Int)\n(declare-const in27 Int)\n(declare-const in29 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)\n(declare-const in17 Int)\n(declare-const in16 Int)\n(declare-const in19 Int)\n(declare-const in18 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <=  in1 in0)  ( <  in1 in0))  ( <=  in2 in1))  ( <  in2 in1))  ( <=  in3 in2))  ( <  in3 in2))  ( <=  in4 in3))  ( <  in4 in3))  ( <=  in5 in4))  ( <  in5 in4))  ( <=  in6 in5))  ( <  in6 in5))  ( <=  in7 in6))  ( <  in7 in6))  ( <=  in8 in7))  ( <  in8 in7))  ( <=  in9 in8))  ( <  in9 in8))  ( <=  in10 in9))  ( <  in10 in9))  ( <=  in11 in10))  ( <  in11 in10))  ( <=  in12 in11))  ( <  in12 in11))  ( <=  in13 in12))  ( <  in13 in12))  ( <=  in14 in13))  ( <  in14 in13))  ( <=  in15 in14))  ( <  in15 in14))  ( <=  in16 in15))  ( <  in16 in15))  ( <=  in17 in16))  ( <  in17 in16))  ( <=  in18 in17))  ( <  in18 in17))  ( <=  in19 in18))  ( <  in19 in18))  ( <=  in20 in19))  ( <  in20 in19))  ( <=  in21 in20))  ( <  in21 in20))  ( <=  in22 in21))  ( <  in22 in21))  ( <=  in23 in22))  ( <  in23 in22))  ( <=  in24 in23))  ( <  in24 in23))  ( <=  in25 in24))  ( <  in25 in24))  ( <=  in26 in25))  ( <  in26 in25))  ( <=  in27 in26))  ( <  in27 in26))  ( <=  in28 in27))  ( <  in28 in27))  ( <=  in29 in28))  ( <  in29 in28)))",
      "response": "Worst-case time complexity: \u0398(N)\n- The first for-loop scans the array once: O(N).\n- The second for-loop also runs at most N iterations and executes only when spinning becomes true: O(N).\n- Therefore, the worst-case is linear overall.\n\nInputs that trigger the worst case:\n- spinning becomes true if there is any adjacent equality arr[i] == arr[i-1], or if there is an increase after a prior decrease. A simple sufficient condition is to force any one adjacent equality.\n\nSMT2 constraint for n = 30:\n- We model the 30 symbolic integers in0..in29 and assert that at least one adjacent pair is equal, which guarantees spinning is true and thus the worst-case path.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n(declare-fun in16 () Int)\n(declare-fun in17 () Int)\n(declare-fun in18 () Int)\n(declare-fun in19 () Int)\n(declare-fun in20 () Int)\n(declare-fun in21 () Int)\n(declare-fun in22 () Int)\n(declare-fun in23 () Int)\n(declare-fun in24 () Int)\n(declare-fun in25 () Int)\n(declare-fun in26 () Int)\n(declare-fun in27 () Int)\n(declare-fun in28 () Int)\n(declare-fun in29 () Int)\n(assert (or\n  (= in1 in0)\n  (= in2 in1)\n  (= in3 in2)\n  (= in4 in3)\n  (= in5 in4)\n  (= in6 in5)\n  (= in7 in6)\n  (= in8 in7)\n  (= in9 in8)\n  (= in10 in9)\n  (= in11 in10)\n  (= in12 in11)\n  (= in13 in12)\n  (= in14 in13)\n  (= in15 in14)\n  (= in16 in15)\n  (= in17 in16)\n  (= in18 in17)\n  (= in19 in18)\n  (= in20 in19)\n  (= in21 in20)\n  (= in22 in21)\n  (= in23 in22)\n  (= in24 in23)\n  (= in25 in24)\n  (= in26 in25)\n  (= in27 in26)\n  (= in28 in27)\n  (= in29 in28)\n)) \n(check-sat)\n(get-model)"
    },
    "2": {
      "constants": "(declare-const in0 Int)\n(declare-const in1 Int)",
      "assertions": "(assert (and  ( <=  in1 in0)  ( <  in1 in0)))",
      "response": "- Worst-case time complexity: O(N) time, O(1) extra space.\n  - The first for-loop runs in O(N).\n  - The second loop runs only if spinning becomes true; when it does, it adds another O(N).\n  - Thus the worst case is O(N) + O(N) = O(N). (The integer multiplication is constant time.)\n\n- When does the worst case occur?\n  - spinning becomes true if there exists an i such that arr[i] == arr[i-1], or if the sequence first decreases at some point and later increases (i.e., an increase after climbing has been set to false).\n  - For N = 2, the only way to make spinning true is arr[1] == arr[0].\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n; N = 2; worst-case when spinning becomes true\n(assert (= in1 in0))\n(check-sat)\n(get-model)"
    },
    "4": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and  ( <=  in1 in0)  ( <  in1 in0))  ( <=  in2 in1))  ( <  in2 in1))  ( <=  in3 in2))  ( <  in3 in2)))",
      "response": "Worst-case time complexity: Theta(N), where N = arr.length. The first loop always does N-1 comparisons. In the worst case, spinning becomes true and the second loop performs N integer multiplications. With Java 32-bit int arithmetic being constant-time, total work is linear.\n\nOne worst-case-triggering condition for N=4 is to make any adjacent pair equal, which forces spinning = true. For example, enforce in1 = in0.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n; Ensure spinning becomes true at i=1 by making adjacent elements equal\n(assert (= in1 in0))\n(check-sat)\n(get-model)"
    },
    "16": {
      "constants": "(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)\n(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in8 Int)\n(declare-const in7 Int)\n(declare-const in11 Int)\n(declare-const in10 Int)\n(declare-const in9 Int)\n(declare-const in13 Int)\n(declare-const in12 Int)\n(declare-const in15 Int)\n(declare-const in14 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <=  in1 in0)  ( <  in1 in0))  ( <=  in2 in1))  ( <  in2 in1))  ( <=  in3 in2))  ( <  in3 in2))  ( <=  in4 in3))  ( <  in4 in3))  ( <=  in5 in4))  ( <  in5 in4))  ( <=  in6 in5))  ( <  in6 in5))  ( <=  in7 in6))  ( <  in7 in6))  ( <=  in8 in7))  ( <  in8 in7))  ( <=  in9 in8))  ( <  in9 in8))  ( <=  in10 in9))  ( <  in10 in9))  ( <=  in11 in10))  ( <  in11 in10))  ( <=  in12 in11))  ( <  in12 in11))  ( <=  in13 in12))  ( <  in13 in12))  ( <=  in14 in13))  ( <  in14 in13))  ( <=  in15 in14))  ( <  in15 in14)))",
      "response": "Worst-case time complexity: O(N)\n- The first for-loop scans the array once: O(N).\n- If spinning becomes true, the second loop performs N constant-time multiplications: O(N).\n- Therefore, the worst-case (and average/best-case asymptotically) time complexity is O(N).\n\nSMT2 constraint for input size n = 16 to force the worst-case path (spinning = true):\nA simple way is to require any consecutive pair to be equal, which immediately sets spinning = true. For example, enforce in1 = in0.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-fun in0 () Int)\n(declare-fun in1 () Int)\n(declare-fun in2 () Int)\n(declare-fun in3 () Int)\n(declare-fun in4 () Int)\n(declare-fun in5 () Int)\n(declare-fun in6 () Int)\n(declare-fun in7 () Int)\n(declare-fun in8 () Int)\n(declare-fun in9 () Int)\n(declare-fun in10 () Int)\n(declare-fun in11 () Int)\n(declare-fun in12 () Int)\n(declare-fun in13 () Int)\n(declare-fun in14 () Int)\n(declare-fun in15 () Int)\n; Force spinning = true by making two consecutive elements equal\n(assert (= in1 in0))\n(check-sat)\n(get-model)"
    },
    "8": {
      "constants": "(declare-const in6 Int)\n(declare-const in5 Int)\n(declare-const in7 Int)\n(declare-const in0 Int)\n(declare-const in2 Int)\n(declare-const in1 Int)\n(declare-const in4 Int)\n(declare-const in3 Int)",
      "assertions": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <=  in1 in0)  ( <  in1 in0))  ( <=  in2 in1))  ( <  in2 in1))  ( <=  in3 in2))  ( <  in3 in2))  ( <=  in4 in3))  ( <  in4 in3))  ( <=  in5 in4))  ( <  in5 in4))  ( <=  in6 in5))  ( <  in6 in5))  ( <=  in7 in6))  ( <  in7 in6)))",
      "response": "Worst-case time complexity: \u0398(N)\n- The first loop scans the array once: O(N).\n- If spinning becomes true, a second loop runs N iterations with constant-time work per iteration: O(N).\n- Therefore, even in the worst case (spinning = true), total time is O(N) + O(N) = \u0398(N).\n\nConstraint to trigger the worst-case (spinning = true) for n = 8:\nA simple way is to force any adjacent equality, e.g., in1 = in0. That guarantees spinning becomes true at i = 1.\n\nAnswer:\n(set-logic QF_LIA)\n(declare-const in0 Int)\n(declare-const in1 Int)\n(declare-const in2 Int)\n(declare-const in3 Int)\n(declare-const in4 Int)\n(declare-const in5 Int)\n(declare-const in6 Int)\n(declare-const in7 Int)\n(assert (= in1 in0))\n(check-sat)\n(get-model)"
    }
  }
}